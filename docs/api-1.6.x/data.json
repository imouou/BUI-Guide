{
    "project": {
        "name": "BUI",
        "description": "BUI API文档",
        "version": "1.6.x",
        "url": "http://www.easybui.com"
    },
    "files": {
        "src/scripts/animate/bui.animate.js": {
            "name": "src/scripts/animate/bui.animate.js",
            "modules": {
                "Animate": 1
            },
            "classes": {
                "bui.animate": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.config.js": {
            "name": "src/scripts/core/bui.config.js",
            "modules": {},
            "classes": {
                "bui.config": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.core.js": {
            "name": "src/scripts/core/bui.core.js",
            "modules": {},
            "classes": {
                "bui.guid": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.event.js": {
            "name": "src/scripts/core/bui.event.js",
            "modules": {
                "Event": 1
            },
            "classes": {
                "bui.emitter": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.extend.js": {
            "name": "src/scripts/core/bui.extend.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/core/bui.history.js": {
            "name": "src/scripts/core/bui.history.js",
            "modules": {},
            "classes": {
                "bui.history": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.init.js": {
            "name": "src/scripts/core/bui.init.js",
            "modules": {},
            "classes": {
                "bui.init": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.loader.js": {
            "name": "src/scripts/core/bui.loader.js",
            "modules": {},
            "classes": {
                "bui.loader": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.page.js": {
            "name": "src/scripts/core/bui.page.js",
            "modules": {},
            "classes": {
                "bui.page": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.router.js": {
            "name": "src/scripts/core/bui.router.js",
            "modules": {},
            "classes": {
                "bui.router": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.store.js": {
            "name": "src/scripts/core/bui.store.js",
            "modules": {},
            "classes": {
                "bui.store": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.toggle.js": {
            "name": "src/scripts/core/bui.toggle.js",
            "modules": {},
            "classes": {
                "bui.toggle": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/core/bui.viewport.js": {
            "name": "src/scripts/core/bui.viewport.js",
            "modules": {},
            "classes": {
                "bui.viewport": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/method/bui.array.js": {
            "name": "src/scripts/method/bui.array.js",
            "modules": {
                "Method": 1
            },
            "classes": {
                "bui.array": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/method/bui.date.js": {
            "name": "src/scripts/method/bui.date.js",
            "modules": {},
            "classes": {
                "bui.date": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/method/bui.method.js": {
            "name": "src/scripts/method/bui.method.js",
            "modules": {},
            "classes": {
                "bui.typeof": 1,
                "bui.setting": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/method/bui.platform.js": {
            "name": "src/scripts/method/bui.platform.js",
            "modules": {},
            "classes": {
                "bui.platform": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/method/bui.storage.js": {
            "name": "src/scripts/method/bui.storage.js",
            "modules": {},
            "classes": {
                "bui.storage": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/method/bui.unit.js": {
            "name": "src/scripts/method/bui.unit.js",
            "modules": {},
            "classes": {
                "bui.unit": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/apicloud/bui.native.ajax.js": {
            "name": "src/scripts/mix/apicloud/bui.native.ajax.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.back.js": {
            "name": "src/scripts/mix/apicloud/bui.native.back.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.download.js": {
            "name": "src/scripts/mix/apicloud/bui.native.download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.file.js": {
            "name": "src/scripts/mix/apicloud/bui.native.file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.fileselect.js": {
            "name": "src/scripts/mix/apicloud/bui.native.fileselect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.getPageParams.js": {
            "name": "src/scripts/mix/apicloud/bui.native.getPageParams.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.js": {
            "name": "src/scripts/mix/apicloud/bui.native.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/apicloud/bui.native.load.js": {
            "name": "src/scripts/mix/apicloud/bui.native.load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.ready.js": {
            "name": "src/scripts/mix/apicloud/bui.native.ready.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.refresh.js": {
            "name": "src/scripts/mix/apicloud/bui.native.refresh.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.run.js": {
            "name": "src/scripts/mix/apicloud/bui.native.run.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/apicloud/bui.native.upload.js": {
            "name": "src/scripts/mix/apicloud/bui.native.upload.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.ajax.js": {
            "name": "src/scripts/mix/appcan/bui.native.ajax.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.back.js": {
            "name": "src/scripts/mix/appcan/bui.native.back.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.download.js": {
            "name": "src/scripts/mix/appcan/bui.native.download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.file.js": {
            "name": "src/scripts/mix/appcan/bui.native.file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.fileselect.js": {
            "name": "src/scripts/mix/appcan/bui.native.fileselect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.getPageParams.js": {
            "name": "src/scripts/mix/appcan/bui.native.getPageParams.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.js": {
            "name": "src/scripts/mix/appcan/bui.native.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/appcan/bui.native.load.js": {
            "name": "src/scripts/mix/appcan/bui.native.load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.ready.js": {
            "name": "src/scripts/mix/appcan/bui.native.ready.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.refresh.js": {
            "name": "src/scripts/mix/appcan/bui.native.refresh.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.run.js": {
            "name": "src/scripts/mix/appcan/bui.native.run.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/appcan/bui.native.upload.js": {
            "name": "src/scripts/mix/appcan/bui.native.upload.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.ajax.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.ajax.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.back.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.back.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.download.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.file.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.fileselect.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.fileselect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.getPageParams.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.getPageParams.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.load.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.ready.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.ready.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.refresh.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.refresh.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.run.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.run.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/bingotouch/bui.native.upload.js": {
            "name": "src/scripts/mix/bingotouch/bui.native.upload.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/common/bui.checkVersion.js": {
            "name": "src/scripts/mix/common/bui.checkVersion.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/dcloud/bui.native.ajax.js": {
            "name": "src/scripts/mix/dcloud/bui.native.ajax.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.ajax_plus.js": {
            "name": "src/scripts/mix/dcloud/bui.native.ajax_plus.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.back.js": {
            "name": "src/scripts/mix/dcloud/bui.native.back.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.download.js": {
            "name": "src/scripts/mix/dcloud/bui.native.download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.download的副本.js": {
            "name": "src/scripts/mix/dcloud/bui.native.download的副本.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.file.js": {
            "name": "src/scripts/mix/dcloud/bui.native.file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.fileselect.js": {
            "name": "src/scripts/mix/dcloud/bui.native.fileselect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.getPageParams.js": {
            "name": "src/scripts/mix/dcloud/bui.native.getPageParams.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.js": {
            "name": "src/scripts/mix/dcloud/bui.native.js",
            "modules": {},
            "classes": {
                "bui.checkVersion": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/dcloud/bui.native.load.js": {
            "name": "src/scripts/mix/dcloud/bui.native.load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.ready.js": {
            "name": "src/scripts/mix/dcloud/bui.native.ready.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.refresh.js": {
            "name": "src/scripts/mix/dcloud/bui.native.refresh.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.run.js": {
            "name": "src/scripts/mix/dcloud/bui.native.run.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.upload.js": {
            "name": "src/scripts/mix/dcloud/bui.native.upload.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/dcloud/bui.native.upload的副本.js": {
            "name": "src/scripts/mix/dcloud/bui.native.upload的副本.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.ajax.js": {
            "name": "src/scripts/mix/link/bui.native.ajax.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.back.js": {
            "name": "src/scripts/mix/link/bui.native.back.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.download.js": {
            "name": "src/scripts/mix/link/bui.native.download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.file.js": {
            "name": "src/scripts/mix/link/bui.native.file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.fileselect.js": {
            "name": "src/scripts/mix/link/bui.native.fileselect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.getPageParams.js": {
            "name": "src/scripts/mix/link/bui.native.getPageParams.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.load.js": {
            "name": "src/scripts/mix/link/bui.native.load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.ready.js": {
            "name": "src/scripts/mix/link/bui.native.ready.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.refresh.js": {
            "name": "src/scripts/mix/link/bui.native.refresh.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.run.js": {
            "name": "src/scripts/mix/link/bui.native.run.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/link/bui.native.upload.js": {
            "name": "src/scripts/mix/link/bui.native.upload.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/web/bui.ajax.js": {
            "name": "src/scripts/mix/web/bui.ajax.js",
            "modules": {},
            "classes": {
                "bui.ajax": 1,
                "bui.get": 1,
                "bui.post": 1,
                "bui.put": 1,
                "bui.delete": 1,
                "bui.all": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.back.js": {
            "name": "src/scripts/mix/web/bui.back.js",
            "modules": {},
            "classes": {
                "bui.back": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.download.js": {
            "name": "src/scripts/mix/web/bui.download.js",
            "modules": {},
            "classes": {
                "bui.download": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.file.js": {
            "name": "src/scripts/mix/web/bui.file.js",
            "modules": {},
            "classes": {
                "bui.file": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.fileselect.js": {
            "name": "src/scripts/mix/web/bui.fileselect.js",
            "modules": {},
            "classes": {
                "bui.fileselect": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.getPageParams.js": {
            "name": "src/scripts/mix/web/bui.getPageParams.js",
            "modules": {},
            "classes": {
                "bui.getPageParams": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.load.js": {
            "name": "src/scripts/mix/web/bui.load.js",
            "modules": {},
            "classes": {
                "bui.load": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.ready.js": {
            "name": "src/scripts/mix/web/bui.ready.js",
            "modules": {},
            "classes": {
                "bui.ready": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.refresh.js": {
            "name": "src/scripts/mix/web/bui.refresh.js",
            "modules": {},
            "classes": {
                "bui.refresh": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.run.js": {
            "name": "src/scripts/mix/web/bui.run.js",
            "modules": {},
            "classes": {
                "bui.run": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/web/bui.upload.js": {
            "name": "src/scripts/mix/web/bui.upload.js",
            "modules": {},
            "classes": {
                "bui.upload": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/mix/workplus/bui.native.ajax.js": {
            "name": "src/scripts/mix/workplus/bui.native.ajax.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.back.js": {
            "name": "src/scripts/mix/workplus/bui.native.back.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.download.js": {
            "name": "src/scripts/mix/workplus/bui.native.download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.file.js": {
            "name": "src/scripts/mix/workplus/bui.native.file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.fileselect.js": {
            "name": "src/scripts/mix/workplus/bui.native.fileselect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.getPageParams.js": {
            "name": "src/scripts/mix/workplus/bui.native.getPageParams.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.load.js": {
            "name": "src/scripts/mix/workplus/bui.native.load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.ready.js": {
            "name": "src/scripts/mix/workplus/bui.native.ready.js",
            "modules": {
                "Core": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.refresh.js": {
            "name": "src/scripts/mix/workplus/bui.native.refresh.js",
            "modules": {
                "Native": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.run.js": {
            "name": "src/scripts/mix/workplus/bui.native.run.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/mix/workplus/bui.native.upload.js": {
            "name": "src/scripts/mix/workplus/bui.native.upload.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/scripts/ui/bui.accordion.js": {
            "name": "src/scripts/ui/bui.accordion.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "bui.accordion": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.actionsheet.js": {
            "name": "src/scripts/ui/bui.actionsheet.js",
            "modules": {},
            "classes": {
                "bui.actionsheet": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.alert.js": {
            "name": "src/scripts/ui/bui.alert.js",
            "modules": {},
            "classes": {
                "bui.alert": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.btn.js": {
            "name": "src/scripts/ui/bui.btn.js",
            "modules": {},
            "classes": {
                "bui.btn": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.confirm.js": {
            "name": "src/scripts/ui/bui.confirm.js",
            "modules": {},
            "classes": {
                "bui.confirm": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.dialog.js": {
            "name": "src/scripts/ui/bui.dialog.js",
            "modules": {},
            "classes": {
                "bui.dialog": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.dropdown.js": {
            "name": "src/scripts/ui/bui.dropdown.js",
            "modules": {},
            "classes": {
                "bui.dropdown": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.floor.js": {
            "name": "src/scripts/ui/bui.floor.js",
            "modules": {},
            "classes": {
                "bui.floor": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.hint.js": {
            "name": "src/scripts/ui/bui.hint.js",
            "modules": {},
            "classes": {
                "bui.hint": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.input.js": {
            "name": "src/scripts/ui/bui.input.js",
            "modules": {},
            "classes": {
                "bui.input": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.levelselect.js": {
            "name": "src/scripts/ui/bui.levelselect.js",
            "modules": {},
            "classes": {
                "bui.levelselect": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.list.js": {
            "name": "src/scripts/ui/bui.list.js",
            "modules": {},
            "classes": {
                "bui.list": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.listview.js": {
            "name": "src/scripts/ui/bui.listview.js",
            "modules": {},
            "classes": {
                "bui.listview": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.loading.js": {
            "name": "src/scripts/ui/bui.loading.js",
            "modules": {},
            "classes": {
                "bui.loading": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.mask.js": {
            "name": "src/scripts/ui/bui.mask.js",
            "modules": {},
            "classes": {
                "bui.mask": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.number.js": {
            "name": "src/scripts/ui/bui.number.js",
            "modules": {},
            "classes": {
                "bui.number": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.pickerdate.js": {
            "name": "src/scripts/ui/bui.pickerdate.js",
            "modules": {},
            "classes": {
                "bui.pickerdate": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.prompt.js": {
            "name": "src/scripts/ui/bui.prompt.js",
            "modules": {},
            "classes": {
                "bui.prompt": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.pullrefresh.js": {
            "name": "src/scripts/ui/bui.pullrefresh.js",
            "modules": {},
            "classes": {
                "bui.pullrefresh": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.rating.js": {
            "name": "src/scripts/ui/bui.rating.js",
            "modules": {},
            "classes": {
                "bui.rating": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.scroll.js": {
            "name": "src/scripts/ui/bui.scroll.js",
            "modules": {},
            "classes": {
                "bui.scroll": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.searchbar.js": {
            "name": "src/scripts/ui/bui.searchbar.js",
            "modules": {},
            "classes": {
                "bui.searchbar": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.select.js": {
            "name": "src/scripts/ui/bui.select.js",
            "modules": {},
            "classes": {
                "bui.select": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.sidebar.js": {
            "name": "src/scripts/ui/bui.sidebar.js",
            "modules": {},
            "classes": {
                "bui.sidebar": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.slide.js": {
            "name": "src/scripts/ui/bui.slide.js",
            "modules": {},
            "classes": {
                "bui.slide": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.stepbar.js": {
            "name": "src/scripts/ui/bui.stepbar.js",
            "modules": {},
            "classes": {
                "bui.stepbar": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.swipe.js": {
            "name": "src/scripts/ui/bui.swipe.js",
            "modules": {},
            "classes": {
                "bui.swipe": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.tab.js": {
            "name": "src/scripts/ui/bui.tab.js",
            "modules": {},
            "classes": {
                "bui.tab": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        },
        "src/scripts/ui/bui.timer.js": {
            "name": "src/scripts/ui/bui.timer.js",
            "modules": {},
            "classes": {
                "bui.timer": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            }
        }
    },
    "modules": {
        "Animate": {
            "name": "Animate",
            "submodules": {},
            "elements": {},
            "classes": {
                "bui.animate": 1,
                "bui.config": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            },
            "tag": "module",
            "file": "src/scripts/core/bui.config.js",
            "line": 58,
            "description": "<h3>动画库</h3> \n<h5>动画控制器</h5>\n{{#crossLink \"bui.animate\"}}{{/crossLink}}: 常用的transform动画及属性动画 <br>\n<h5>动画切换器</h5>\n{{#crossLink \"bui.toggle\"}}{{/crossLink}}: animate.css的常用动画,切换显示 <br>"
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "bui.guid": 1,
                "bui.history": 1,
                "bui.init": 1,
                "bui.loader": 1,
                "bui.page": 1,
                "bui.router": 1,
                "bui.store": 1,
                "bui.toggle": 1,
                "bui.viewport": 1,
                "bui.ready": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            },
            "tag": "module",
            "file": "src/scripts/mix/web/bui.ready.js",
            "line": 10,
            "description": "核心"
        },
        "Event": {
            "name": "Event",
            "submodules": {},
            "elements": {},
            "classes": {
                "bui.emitter": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            },
            "tag": "module",
            "file": "src/scripts/core/bui.event.js",
            "line": 11,
            "description": "<h3>全局事件: </h3>\n<p>依次加载顺序, 所有事件均在 dom 加载以后处理.</p>\n<p>pagebefore(dom准备完毕,但bui还未初始化) -  pageinit(dom准备完毕,bui初始化完成) - pageready(dom+原生能力都已经准备完毕) - onload(图片及资源都加载完毕以后触发)</p>"
        },
        "Method": {
            "name": "Method",
            "submodules": {},
            "elements": {},
            "classes": {
                "bui.array": 1,
                "bui.date": 1,
                "bui.typeof": 1,
                "bui.setting": 1,
                "bui.platform": 1,
                "bui.storage": 1,
                "bui.unit": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            },
            "tag": "module",
            "file": "src/scripts/method/bui.unit.js",
            "line": 9,
            "description": "方法库"
        },
        "Native": {
            "name": "Native",
            "submodules": {},
            "elements": {},
            "classes": {
                "bui.ajax": 1,
                "bui.load": 1,
                "bui.getPageParams": 1,
                "bui.back": 1,
                "bui.refresh": 1,
                "bui.run": 1,
                "bui.checkVersion": 1,
                "bui.get": 1,
                "bui.post": 1,
                "bui.put": 1,
                "bui.delete": 1,
                "bui.all": 1,
                "bui.download": 1,
                "bui.file": 1,
                "bui.fileselect": 1,
                "bui.upload": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            },
            "tag": "module",
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 7
        },
        "UI": {
            "name": "UI",
            "submodules": {},
            "elements": {},
            "classes": {
                "bui.accordion": 1,
                "bui.actionsheet": 1,
                "bui.alert": 1,
                "bui.btn": 1,
                "bui.confirm": 1,
                "bui.dialog": 1,
                "bui.dropdown": 1,
                "bui.floor": 1,
                "bui.hint": 1,
                "bui.input": 1,
                "bui.levelselect": 1,
                "bui.list": 1,
                "bui.listview": 1,
                "bui.loading": 1,
                "bui.mask": 1,
                "bui.number": 1,
                "bui.pickerdate": 1,
                "bui.prompt": 1,
                "bui.pullrefresh": 1,
                "bui.rating": 1,
                "bui.scroll": 1,
                "bui.searchbar": 1,
                "bui.select": 1,
                "bui.sidebar": 1,
                "bui.slide": 1,
                "bui.stepbar": 1,
                "bui.swipe": 1,
                "bui.tab": 1,
                "bui.timer": 1
            },
            "fors": {},
            "namespaces": {
                "bui": 1
            },
            "tag": "module",
            "file": "src/scripts/ui/bui.timer.js",
            "line": 9,
            "description": "UI控件库"
        }
    },
    "classes": {
        "bui.animate": {
            "name": "bui.animate",
            "shortname": "bui.animate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animate",
            "namespace": "bui",
            "file": "src/scripts/animate/bui.animate.js",
            "line": 12,
            "description": "常用的动画,有transform动画,链式动画,属性动画\n <h3>预览地址: <a href=\"../../index.html#pages/ui_method/bui.animate.html\" target=\"_blank\">demo</a></h3>\n\n<h5>动画配置修改</h5>\n{{#crossLink \"bui.animate/option\"}}{{/crossLink}}: 设置修改参数 <br>\n{{#crossLink \"bui.animate/widget\"}}{{/crossLink}}: 获取依赖的控件 <br>\n{{#crossLink \"bui.animate/origin\"}}{{/crossLink}}: 修改动画原点 <br>\n{{#crossLink \"bui.animate/transition\"}}{{/crossLink}}: 修改动画时间 <br>\n{{#crossLink \"bui.animate/open3D\"}}{{/crossLink}}: 开启3D加速对rotate有效果 <br>\n<h5>综合动画</h5>\n{{#crossLink \"bui.animate/transform\"}}{{/crossLink}}: 综合动画,需要熟悉transform属性 <br>\n<h5>位移动画</h5>\n{{#crossLink \"bui.animate/left\"}}{{/crossLink}}: 左移动画 <br>\n{{#crossLink \"bui.animate/right\"}}{{/crossLink}}: 右移动画 <br>\n{{#crossLink \"bui.animate/up\"}}{{/crossLink}}: 上移动画 <br>\n{{#crossLink \"bui.animate/down\"}}{{/crossLink}}: 下移动画 <br>\n<h5>缩放动画</h5>\n{{#crossLink \"bui.animate/scale\"}}{{/crossLink}}: 缩放动画 <br>\n{{#crossLink \"bui.animate/scaleX\"}}{{/crossLink}}: 水平缩放动画 <br>\n{{#crossLink \"bui.animate/scaleY\"}}{{/crossLink}}: 垂直缩放动画 <br>\n<h5>旋转动画</h5>\n{{#crossLink \"bui.animate/rotate\"}}{{/crossLink}}: 左移动画 <br>\n{{#crossLink \"bui.animate/rotateX\"}}{{/crossLink}}: 右移动画 <br>\n{{#crossLink \"bui.animate/rotateY\"}}{{/crossLink}}: 左移动画 <br>\n<h5>扭曲动画</h5>\n{{#crossLink \"bui.animate/skew\"}}{{/crossLink}}: 扭曲动画 <br>\n{{#crossLink \"bui.animate/skewX\"}}{{/crossLink}}: 水平扭曲动画 <br>\n{{#crossLink \"bui.animate/skewY\"}}{{/crossLink}}: 垂直扭曲动画 <br>\n<h5>属性动画</h5>\n{{#crossLink \"bui.animate/property\"}}{{/crossLink}}: 属性动画 性能差,尽量少用<br>",
            "is_constructor": 1,
            "example": [
                "\n\n        //初始化page对象\n        var uiAnimate = bui.animate(\"#page\");\n    \n        //链式动画\n        uiAnimate.left(100).down(100).start();\n      \n        //累计动画,左移动画以后下移各自100px,\n        uiAnimate.left(100).start(function({\n        \n          this.down(100).start();\n        }));\n    \n        //综合动画, 只执行一次,下次执行会从头开始\n        uiAnimate.transform(\"translateX(-100px)\") ==  uiAnimate.left(100).stop();\n"
            ]
        },
        "bui.config": {
            "name": "bui.config",
            "shortname": "bui.config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animate",
            "namespace": "bui",
            "file": "src/scripts/core/bui.config.js",
            "line": 58,
            "description": "[控件的全局配置]",
            "static": 1,
            "example": [
                "\n\n       // 这样可以全局更改dialog默认不需要遮罩\n       bui.config.dialog = {\n           mask: false\n       };\n\n"
            ]
        },
        "bui.guid": {
            "name": "bui.guid",
            "shortname": "bui.guid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.core.js",
            "line": 38,
            "description": "1.5.1 生成唯一id 36位, 默认前3位是bui, 如果需要随机,则传 null 或者 \"\", 如果是用来做选择器,默认就可, 因为选择器不能是数字开头, 随机数字开头是大概率 .",
            "is_constructor": 1,
            "return": {
                "description": "[唯一id]",
                "type": "String"
            },
            "example": [
                "\n      var guid = bui.guid();\n"
            ]
        },
        "bui.emitter": {
            "name": "bui.emitter",
            "shortname": "bui.emitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Event",
            "namespace": "bui",
            "file": "src/scripts/core/bui.event.js",
            "line": 11,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>事件发射器</h2>\n    <h3>方法说明:</h3>\n    {{#crossLink \"bui.emitter/on\"}}{{/crossLink}}: 监听事件 <br>\n    {{#crossLink \"bui.emitter/off\"}}{{/crossLink}}: 取消事件监听 <br>\n    {{#crossLink \"bui.emitter/trigger\"}}{{/crossLink}}: 触发自定义事件 <br>\n    {{#crossLink \"bui.emitter/one\"}}{{/crossLink}}: 监听一次事件 <br>\n  </div>\n</div>",
            "is_constructor": 1,
            "example": [
                "\n\n  js:\n\n           // 初始化\n           var emitter = bui.emitter();\n\n           // 自定义search事件监听\n           emitter.on(\"search\",function(val){\n             search(val);\n           });\n\n           $(\"#id\").click(function (e) {\n             var val = $(\"input\").val();\n             emitter.trigger(\"search\",val);\n           })\n\n           // 搜索\n           function search(val) {\n             bui.ajax({\n               url: \"\",\n               data: {\n                 keyword: val\n               }\n             }).then(function () {\n               // 拿到数据返回渲染\n             })\n           }\n"
            ]
        },
        "bui.history": {
            "name": "bui.history",
            "shortname": "bui.history",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.history.js",
            "line": 9,
            "description": "[单页跟多页的公共历史记录,反映模块的加载关系, router.history 将废弃使用 ]",
            "since": "1.5.6",
            "static": 1,
            "example": [
                "\n\n       // 获取历史记录\n       var history = bui.history.get()\n"
            ]
        },
        "bui.init": {
            "name": "bui.init",
            "shortname": "bui.init",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.init.js",
            "line": 9,
            "description": "init 页面初始化,动态计算main高度 默认已经执行,可以通过bui.config.init.auto = false; 修改为不执行.",
            "since": "1.3.4",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object|number",
                    "optional": true,
                    "props": [
                        {
                            "name": "id] [初始化的页面ID, 默认: \".bui-page\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "height] [初始化一个固定高度,会自动减去header,footer得到main的值",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "header] [默认: header 标签, 可以是 \"#id\"或者\".classname\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "main] [默认: main 标签, 可以是 \"#id\"或者\".classname\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "footer] [默认: footer 标签, 可以是 \"#id\"或者\".classname\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "reduceRem] [1.5.3新增, 默认: 0, 这个值会自动根据屏幕分辨率自动改变, 跟切图规范保持一致 px/100",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[返回main的高度]",
                "type": "Number"
            },
            "is_constructor": 1,
            "example": [
                "\n\n方法一: 根据页面高度初始化高度\n\n        bui.init();\n\n方法二: 传固定高度计算main的高度\n\n        bui.init(500);\n\n方法三: 每个页面都有独立的id\n\n        bui.init({\n           id: \"#page\"\n        })\n\n方法四: 选择器不再是 header,main,footer 时可以通过对象修改\n\n        bui.init({\n           header: \"#header\",\n           main: \"#main\",\n           footer: \"#footer\"\n        })\n"
            ]
        },
        "bui.loader": {
            "name": "bui.loader",
            "shortname": "bui.loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.loader.js",
            "line": 10,
            "description": "<h2>模块加载器</h2>\n<p>模块加载器, 默认已经初始化给 window.loader, 无需再次初始化. </p>\n<p>可以直接调用 loader.define, loader.require 或者 loader.map 等方法</p>\n<p>主要配合 router 的单页模块加载. </p><h3>预览地址: <a href=\"../../index.html#pages/ui_loader/index.html\" target=\"_blank\">demo</a></h3>\n<h3>方法说明:</h3>\n{{#crossLink \"bui.loader/define\"}}{{/crossLink}}: 模块定义<br>\n{{#crossLink \"bui.loader/require\"}}{{/crossLink}}: 加载模块脚本 <br>\n{{#crossLink \"bui.loader/map\"}}{{/crossLink}}: 模块声明,基本路径配置 <br>\n{{#crossLink \"bui.loader/import\"}}{{/crossLink}}: 加载动态脚本资源及CSS资源 <br>\n{{#crossLink \"bui.loader/checkLoad\"}}{{/crossLink}}: 检查是否所有模块都已经实例化 <br>\n{{#crossLink \"bui.loader/get\"}}{{/crossLink}}: 获取模块信息 <br>\n{{#crossLink \"bui.loader/set\"}}{{/crossLink}}: 设置模块信息 <br>\n{{#crossLink \"bui.loader/global\"}}{{/crossLink}}: 1.6.2 新增定义全局方法供模块内部调用,避免编译找不到全局变量 <br>\n1.6.x 新增\n{{#crossLink \"bui.loader/load\"}}{{/crossLink}}: 加载组件到一个容器里 <br>\n{{#crossLink \"bui.loader/delay\"}}{{/crossLink}}: 加载component上有delay属性的标签,只加载一次 <br>\n{{#crossLink \"bui.loader/component\"}}{{/crossLink}}: 解析component标签 <br>\n{{#crossLink \"bui.loader/components\"}}{{/crossLink}}: 解析容器下的所有component标签 <br>\n{{#crossLink \"bui.loader/view\"}}{{/crossLink}}: 解析view标签 <br>\n{{#crossLink \"bui.loader/views\"}}{{/crossLink}}: 解析容器下的所有view标签 <br>",
            "since": "1.4.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "[默认: true, 浏览器缓存脚本 | false, 不缓存 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "scriptSuffix",
                            "description": "[默认: \".js\", 一般无需更改 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "needNative",
                            "description": "[ 1.6.0新增, 请求是否使用设备原生方法, 默认: false | true  ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "deepComponent",
                            "description": "[1.6.0新增, 编译 component 标签时, 是否继续编译内部的component标签, 默认: true | false ]",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n\n       // 默认已经初始化,无需再次初始化, 如果要修改,应该在 window.router 前面.\n       window.loader = bui.loader();\n"
            ]
        },
        "bui.page": {
            "name": "bui.page",
            "shortname": "bui.page",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.page.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>页面加载器</h2>\n    <p>用于在单页或者多页里面穿插一个新的页面, 比方登录.那就很方便的用来处理权限问题</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.page.html\" target=\"_blank\">demo</a></h3>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.page.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-page_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "since": "1.5.6",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "[页面id]",
                            "type": "String"
                        },
                        {
                            "name": "dialogid] [ 1.6.2新增 指定生成的dialog id, 便于 bui.history.getPageDialog(id);",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "param] [传给 url的参数, url里面的模块需要使用 bui.history.getParams(module.id) 获取",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "script] [ 可以指定模块的脚本, 默认不需要写, 按模块的同名规范加载.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "appendTo] [ 打开的页面要加载到哪个容器下, 默认是\".bui-page\", 如果是 body, bui-router 等非单页里面的选择器, 则模块里面,不能使用 router.$, 应该使用 $, 包括里面用到的控件id, 之前是字符串, 现在是对象 $(\"#xxx\"), 控件才能正常.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "autoload] [默认 true 自动执行 | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "syncHistory] [是否同步历史记录, 默认 false | true; 同步历史记录用户使用后退可以回到创建的页面",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "cache] [ 默认 true (只加载一次) | false (每次调用打开都执行一次)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "iframe] [ 默认 false | true 打开外部地址",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "effect] [ 默认 \"fadeInRight\" 打开的动画, 具体查看 bui.toggle 的api",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "close] [ 默认 false | true 需要右上角有关闭按钮",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needRemove] [ 默认 false | true 点击右上角关闭按钮,是否移除对话框,默认不需要",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "openFirst] [ 默认 true 先打开动画以后再执行模块 | false 先执行模块再打开动画",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "closeFirst] [ 默认 false 如果模块有hide,执行模块的hide 跟关闭一起执行. | true 先执行关闭动画, 如果模块有hide,再执行模块的hide",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "beforeOpen] [ 打开前执行, return false 则不执行打开操作",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "opened] [ 每次打开后执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeClose] [ 关闭前执行, return false 则不执行关闭操作",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "closed] [ 每次关闭后执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeLoad] [ 加载前执行,只执行一次",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onError] [ 找不到页面执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "loaded] [ 初始化后执行,只执行一次",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n           \n           方法1: \n               var uiPage = bui.page({\n                 url:\"pages/login/login.html\",\n                 param: {}\n               })\n               \n           方法2: \n               var uiPage = bui.page({\n                 url:\"pages/login/login.html\",\n                 autoload: false\n               })\n               \n               $(\"#id\").click(function(){\n                   uiPage.open();\n               })\n\n           注意: bui.page 加载的页面,不会自动计算main 的高度, 建议里面的页面采用新的 page 结构,会自动适配.\n           <div class=\"bui-page bui-vertical-box\">\n               <header>\n                   <div class=\"bui-bar\">\n                       <div class=\"bui-bar-left\"></div>\n                       <div class=\"bui-bar-main\">标题栏</div>\n                       <div class=\"bui-bar-right\"></div>\n                   </div>\n               </header>\n               <main>\n                   主要内容会自动减去 footer header 的高度.\n               </main>\n               <footer></footer>\n           </div>\n\n"
            ]
        },
        "bui.router": {
            "name": "bui.router",
            "shortname": "bui.router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.router.js",
            "line": 10,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>BUI 单页路由器</h2>\n     <p><a href=\"http://www.easybui.com/docs/index.html?id=buirouter\" target=\"_parent\" style=\"color:red;\">单页路由入门文档</a></p>\n     <p>开启单页路由以后, 同样可以使用 bui.back (页面后退) , bui.load (页面跳转) , bui.getPageParams (获取对应的参数), 保持跟多页的开发方式一致有利于后面单页满足不了需求的时候进行切换.</p>\n     <p>路由依赖于 {{#crossLink \"bui.loader\"}}{{/crossLink}}, 具体查看模块的API. </p>\n     <p>路由默认已经初始化了一个main模块, 通过loader.map 可以修改首页的路径,一般无需修改</p>\n     <h3>预览地址: <a href=\"../../index.html#pages/router/index.html\" target=\"_blank\">demo</a></h3>\n     <p>功能点:</p>\n     <p>1. 页面跳转,支持模块跳转或者html跳转,支持动画 {{#crossLink \"bui.router/load\"}}{{/crossLink}}</p>\n     <p>2. 指定后退几层,并且可以执行回调 {{#crossLink \"bui.router/back\"}}{{/crossLink}}</p>\n     <p>3. 页面刷新,后退刷新 {{#crossLink \"bui.router/refresh\"}}{{/crossLink}}</p>\n     <p>4. 页面替换 {{#crossLink \"bui.router/replace\"}}{{/crossLink}}</p>\n     <p>5. 局部加载 {{#crossLink \"bui.router/loadPart\"}}{{/crossLink}}</p>\n     <p>6. 页面传参,配合load,获取参数 {{#crossLink \"bui.router/getPageParams\"}}{{/crossLink}}</p>\n     <p>7. 局部传参,配合loadPart,获取参数 {{#crossLink \"bui.router/getPartParams\"}}{{/crossLink}}</p>\n     <p>8. 检测当前页面是否已经加载一次 {{#crossLink \"bui.router/isLoad\"}}{{/crossLink}}</p>\n     <p>9. 返回当前页面Dom对象 {{#crossLink \"bui.router/currentPage\"}}{{/crossLink}}</p>\n     <p>10. 返回当前模块对象 {{#crossLink \"bui.router/currentModule\"}}{{/crossLink}}</p>\n     <p>11. 预加载模板 {{#crossLink \"bui.router/preload\"}}{{/crossLink}}</p>\n     <p>12. 修改切换效果</p>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/router/index.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-router_low.gif\" alt=\"BUI单页路由\"/></a></div>\n </div>",
            "since": "1.4.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "[路由初始化的id]",
                            "type": "String"
                        },
                        {
                            "name": "progress] [默认: false 关闭 | true 开启, 页面跳转是否开启进度条",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "effect] [默认: push | slide | cover | zoom | fadein | fadeinslide | none",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "indexModule] [ 1.4.3新增, 首页地址配置, 默认: { moduleName: \"main\",template: \"pages/main/main.html\", script: \"pages/main/main.js\" }",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "height] [1.4.7新增 默认: 0",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "swipe] [1.6.3新增 默认: false | true 开启滑动swipeleft,swiperight事件",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "swipeBack] [1.6.3新增 默认: false | true 开启滑动返回, 必须在swipe为true才会生效",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "pageMove] [1.6.3新增 默认: true | false 往右滑动的时候,页面跟着一起移动",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "distance] [1.6.3新增 默认: 100  按下位置 必须在 0-100之间",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "startDistance] [1.6.3新增 默认: 5  开始滑动的距离先大于5 防止误操作",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "swipeDistance] [1.6.3新增 默认: 50 开始滑动的距离且大于50 防止误操作",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "onBeforeSwipeRight] [1.6.3新增 默认: null 往右滑动后触发,return false 则不触发后退",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSwipeRight] [1.6.3新增 默认: null 往右滑动后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSwipeLeft] [1.6.3新增 默认: null 往左滑动后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSwipeUp] [1.6.3新增 默认: null 往左滑动后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSwipeDown] [1.6.3新增 默认: null 往左滑动后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "cache] [默认: true ,缓存模板,下次再进入不会继续请求,速度会快一些",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "hash] [1.5.1新增 hash跳转模式 默认: false , 可以用来处理刷新以后后退不了的问题, 相比reloadCache参数,不用加载那么多缓存,但也就后退没有动画效果.",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "reloadCache] [1.4.1新增 默认: false | true , 刷新是否可以后退, 为true时可以加载之前的路由页面, 建议部署的时候有必要再开启",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "syncHistory] [默认: true ,同步浏览器历史记录,这样可以兼容手机的后退按键,为false则页面地址不会,例如:appcan平台,使用打包以后没有历史记录,所以需要设置false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "firstAnimate] [1.4.2默认: false 等数据加载结束再切换,本地打包速度较快 | true 先执行页面切换,再执行页面加载,这样切换速度较快,但页面会先空白,webapp受网络影响,建议开启,并且开启进度条",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needComponent] [1.6.0 默认: true 解析component标签 | false 不解析component标签",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "beforeBack] [1.5.1默认: null 每次后退前触发, 如果返回 false 则不后退, 不返回或者返回true 都会后退.",
                            "description": "",
                            "type": "Function||boolean",
                            "optional": true
                        },
                        {
                            "name": "beforeLoad] [1.5.1默认: null 每次跳转前触发, 如果返回 false 则不跳转, 不返回或者返回true 都会跳转.",
                            "description": "",
                            "type": "Function||boolean",
                            "optional": true
                        },
                        {
                            "name": "loaded] [1.5.5 新增默认: null 每次跳转后触发, 相当于 router.on(\"complete\",callback) .",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "backed] [1.5.5 新增默认: null 每次跳转后触发, 相当于 router.on(\"complete\",callback) .",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n  html: \n     <xmp>\n        <div id=\"bui-router\"></div>\n     </xmp>\n   js:\n    \n     // 把路由实例化给 window.router\n      \n      window.router = bui.router();\n     bui.ready(function(){\n        // 路由初始化\n        router.init({\n            id: \"#bui-router\",\n            hash:true\n        })\n      })\n     js: 路由权限拦截, \n      // 判断示例,正常用户信息应该使用 bui.storage 来操作. \n      var userinfo = null;\n      bui.ready(function(){\n        router.init({\n            id: \"#bui-router\",\n            beforeLoad: function(e) {\n                // 如果没有登录,并且当前页面不是登录页面,则执行跳转, 并且要return false; 这样没有历史记录,不能使用后退.\n                // 1.6.x 统一使用 e.target.name , 1.4.x-1.5.x 使用 e.target.pid ;\n                if( !userinfo && e.target.name !== \"pages/login/login\"){\n                    router.load({\n                        url:\"pages/login/login.html\"\n                    })\n                    return false;\n                }\n            }\n        })\n      })\n"
            ]
        },
        "bui.store": {
            "name": "bui.store",
            "shortname": "bui.store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.store.js",
            "line": 10,
            "description": "<h2>数据行为存储器 Data Behavior Store</h2>\n<p>按vue接口设计的状态管理,但这不是vue,具体使用请查看<a href=\"/guide/#/store/about\" target=\"_blank\">教程</a>或示例</p>\n<h3>预览地址: <a href=\"../../index.html#pages/store/index.html\" target=\"_blank\">demo</a></h3>",
            "since": "1.5.1",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "el] [最外层的选择器, 默认: \".bui-page\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "scope",
                            "description": "[数据的范围唯一标识, 比方公共数据可以用app, 模块的数据可以用page 或者其它自定义名称]",
                            "type": "String"
                        },
                        {
                            "name": "isPublic] [是否作为公共数据, 默认: false ( 在模块里面使用) | true (在index.js 路由初始化以后使用)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needStatic] [1.5.1 静态解析{{page.title}}, 默认 false | true, 注意: isPublic:true 以后, needStatic不能为true, 在index.js把store挂载到路由,才能解析{{}},",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needCompile] [1.5.1 默认编译对应的解析器",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "data] [ 动态监听的对象,当变更会自动触发相关联的选择器,需要提前定义",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "computed] [需要动态计算改变的相关联的时候,例如 fullName ,依赖于 data.firstName,data.lastName",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "watch] [ 监听的数据字段,在数据改变的时候,做对应的其它事情",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "methods] [ 定义的方法,便于拿取相关数据",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "mixins] [ 1.6.0新增 一个数组, 里面每个对象,都是一个单独组件,在当前实例合并,便于业务划分 {data:{},templates:{},methods:{},mounted:function(){}...} 参数跟store基本一致, 并且配合 view 标签,可以分模板处理",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "needView] [1.6.0 新增 是否解析view标签, 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needComponent] [1.6.0 新增 是否解析component标签, 默认 false(不解析) | true , 单页会由路由去解析",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "templates] [ 定义的模板方法",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "beforeMount] [ 数据解析前处理",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "beforeCompile] [1.5.3 新增 模板解析前处理",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "compiled] [1.5.3 新增 模板解析后处理",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "mounted] [ 数据解析完成以后处理",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "modelEvent] [默认: \"input\" | \"change\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n\n       var bs = bui.store({\n         scope: \"app\",\n         data: {\n           size: 1\n         }\n       });\n\n       // 这样就会设置内容为1\n       <b b-text=\"app.size\"></b>\n\n       // 设置以后就会触发dom 的变更\n       bs.size = 2;\n\n"
            ]
        },
        "bui.toggle": {
            "name": "bui.toggle",
            "shortname": "bui.toggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.toggle.js",
            "line": 9,
            "description": "常用动画切换器,只能运行已经配置好的动画,更多效果需要引入animate.css 外部样动画库 <br>\n\n <h3>预览地址: <a href=\"../../index.html#pages/ui_method/bui.toggle.html\" target=\"_blank\">demo</a></h3>\n\n{{#crossLink \"bui.toggle/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.toggle/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n{{#crossLink \"bui.toggle/show\"}}{{/crossLink}}: 显示 <br>\n{{#crossLink \"bui.toggle/hide\"}}{{/crossLink}}: 隐藏 <br>\n{{#crossLink \"bui.toggle/remove\"}}{{/crossLink}}: 移除 <br>\n{{#crossLink \"bui.toggle/isShow\"}}{{/crossLink}}: 显示状态 since 1.3.5 <br>",
            "params": [
                {
                    "name": "id",
                    "description": "[要操控的元素的选择器]",
                    "type": "String"
                },
                {
                    "name": "effect",
                    "description": "[内置的效果, none (无动画) | showIn(无动画) | fadeIn | fadeInLeft | fadeInRight | fadeInDown | fadeInUp | zoomIn | bounceIn | rotateIn | flipInX | flipInY]",
                    "type": "String"
                },
                {
                    "name": "inOrder",
                    "description": "[ 是否按顺序出场, 默认:false (从哪进,就从哪出) ->进 <-出 | true (顺着进来的方向出) ->进 ->出 ]",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n\n     方法1:\n\n             //初始化page对象\n         var uiToggle = bui.toggle(\"#page\");\n\n             //显示动画\n             uiToggle.show();\n\n             //隐藏动画\n             uiToggle.hide();\n\n     方法2:\n\n         var uiToggle = bui.toggle({ id:\"#page\" ,effect:\"fadeInLeft\"});\n             uiToggle.show();\n             uiToggle.hide();\n\n     方法3: 自定义动画库里面没有的动画\n\n         var uiToggle = bui.toggle(\"#page\");\n             uiToggle.show(\"fadeInLeft\");\n             uiToggle.hide(\"fadeOutLeft\");\n"
            ]
        },
        "bui.viewport": {
            "name": "bui.viewport",
            "shortname": "bui.viewport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/core/bui.viewport.js",
            "line": 10,
            "description": "默认引入BUI.js就会初始化整个视图缩放.\n用于修改页面缩放比例,默认字体大小100px,手机端的字体大小大概在76px;\n整个缩放是基于540视图处理.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "size",
                    "description": "[默认页面的字体大小比例是100, bui会动态去计算该以多大展示]",
                    "type": "Number"
                },
                {
                    "name": "base",
                    "description": "[设计稿大小基数540, bui会动态去计算该以多大展示]",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\n        bui.ready(function(){\n            //强制页面缩小一半的比例显示\n            window.viewport = bui.viewport(50);\n        })\n"
            ]
        },
        "bui.array": {
            "name": "bui.array",
            "shortname": "bui.array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.array.js",
            "line": 14,
            "description": "常用小方法",
            "static": 1
        },
        "bui.date": {
            "name": "bui.date",
            "shortname": "bui.date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.date.js",
            "line": 9,
            "description": "日期常用方法"
        },
        "bui.typeof": {
            "name": "bui.typeof",
            "shortname": "bui.typeof",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.method.js",
            "line": 106,
            "description": "判断类型, 不能用来判断jq对象,会返回一个数组",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "[要判断的对象]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[返回 json | regexp | array | object | function | string | number | boolean | null | undefined ]",
                "type": "String"
            },
            "example": [
                "\n      var type = bui.typeof({\"id\":\"123\"});\n       console.log(type) // \"object\"\n"
            ]
        },
        "bui.setting": {
            "name": "bui.setting",
            "shortname": "bui.setting",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.method.js",
            "line": 127,
            "description": "获取及设置控件默认参数",
            "since": "1.5.5",
            "is_constructor": 1,
            "params": [
                {
                    "name": "key] [控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value] [修改的全局参数",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回 json ]",
                "type": "String"
            },
            "example": [
                "\n      \n      // 例子1: 获取所有默认配置\n      var setting = bui.setting();\n\n      // 例子2: 获取某个配置\n      var ajaxSetting = bui.setting(\"ajax\");\n\n      // 例子3: 设置更改所有ajax 加上headers的默认配置\n      var ajaxSetting = bui.setting(\"ajax\",{headers:{token:\"bui\"}});\n\n      // 例子4: 修改所有alert的宽高\n      var alertSetting = bui.setting(\"alert\",{\"width\":600,height:500});\n      \n      bui.alert(\"bui will be better!\")\n"
            ]
        },
        "bui.platform": {
            "name": "bui.platform",
            "shortname": "bui.platform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.platform.js",
            "line": 9,
            "description": "仅用于安卓及ios移动平台的检测"
        },
        "bui.storage": {
            "name": "bui.storage",
            "shortname": "bui.storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.storage.js",
            "line": 10,
            "description": "本地数据存储,支持字符串跟对象存储,注意:取的时候是返回一个数组\n <h3>预览地址: <a href=\"../../index.html#pages/ui_method/bui.storage.html\" target=\"_blank\">存字符demo</a> | <a href=\"../../index.html#pages/ui_method/bui.storage_json.html\" target=\"_blank\">存对象demo</a></h3>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "size] [可以是对象,也可以是数字,数字代表存储的数据大小,默认是1",
                    "description": "",
                    "type": "Number|object|number",
                    "optional": true
                },
                {
                    "name": "object.size] [ 存储多少条数据,默认为1 | 0 为不限制",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "object.reverse] [ 1.4新增 默认true(最新的数据在后面),false(最新的数据在前面,常用于最近历史记录)",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "object.deep] [ 1.5.4新增 默认false || true; 是否采用逐层取值，部分数据在存数据的时候，存的是一个多维数组，那就需要开启为true;",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "object.local] [ 默认true 永久存储 | false 临时存储,切换页面则消失",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "object.prefix] [ 1.5.5新增, 默认 \"\" , 用于区分不同数据段,clear才能指定清除",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n       存储使用示例:\n\n       // 存储1条数据\n       var storage = bui.storage();\n           storage.set(\"username\",\"hello\");\n           storage.set(\"username\",\"bui\");\n           // 第2个会覆盖第1个\n\n      // 获取所有数据\n      var data = storage.get(\"username\");\n      //console.log( data ) [\"bui\"]\n\n      // 拿到第一条数据的值\n      var val = storage.get(\"username\",0);\n      //console.log( val ) \"bui\"\n\n多条数据存储示例:\n\n       // 保存数据\n       var storage = bui.storage(2);\n       //存储第1条数据\n       storage.set(\"userinfo\",{\"id\":\"n1\",\"name\":\"hello\"},\"id\");\n       //存储第2条数据\n       storage.set(\"userinfo\",{\"id\":\"n2\",\"name\":\"bui\"},\"id\");\n       //删除1条数据,通过name值比对\n       storage.remove(\"userinfo\",\"hello\",\"name\");\n       // 获取数据,返回一个数组\n       var data = storage.get(\"userinfo\");\n\n        //console.log( data ) [{\"id\":\"n2\",\"name\":\"bui\"}]\n"
            ]
        },
        "bui.unit": {
            "name": "bui.unit",
            "shortname": "bui.unit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Method",
            "namespace": "bui",
            "file": "src/scripts/method/bui.unit.js",
            "line": 9,
            "description": "常用小方法"
        },
        "bui.ajax": {
            "name": "bui.ajax",
            "shortname": "bui.ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ajax.js",
            "line": 22,
            "description": "数据请求, $.ajax 跟 app.ajax 有的参数, bui.ajax 都有, 这里只列了简单的几个参数.\n可以全局配置所有请求的默认参数: bui.config.ajax = { headers: {} }\n <h3>预览地址: <a href=\"../../index.html#pages/ui_method/bui.ajax.html\" target=\"_blank\">demo</a></h3>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "[请求的地址]",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "[传输的数据对象]",
                            "type": "Object"
                        },
                        {
                            "name": "method] [传输的方法 GET | POST",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "dataType] [默认 json | jsonp | script | xml | html | text",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "contentType] [默认 'text/html;charset",
                            "description": "'",
                            "type": "String",
                            "optional": true,
                            "optdefault": "UTF-8' | 'application/x-www-form-urlencoded'"
                        },
                        {
                            "name": "timeout] [超出这个时间则认为请求失败",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    bui.ajax({\n        url: \"\",\n        data: {}\n    }).done(function(res){\n        console.log(res)\n    }).fail(function(res,status){\n        console.log(status);\n              // status = \"timeout\" || \"error\" || \"abort\", \"parsererror\"\n    })\n"
            ]
        },
        "bui.load": {
            "name": "bui.load",
            "shortname": "bui.load",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.load.js",
            "line": 8,
            "description": "页面跳转可以传参 获取参数请看 {{#crossLink \"bui.getPageParams\"}}{{/crossLink}} 方法\n <h3>预览地址: <a href=\"../../index.html#pages/ui_method/bui.load.html\" target=\"_blank\">demo</a></h3>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "请求的地址",
                            "type": "String"
                        },
                        {
                            "name": "param",
                            "description": "传过去另外页面的参数",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "example": [
                "\n    bui.load({ \n        url: \"\",\n        param:{}\n    })\n"
            ]
        },
        "bui.getPageParams": {
            "name": "bui.getPageParams",
            "shortname": "bui.getPageParams",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.getPageParams.js",
            "line": 8,
            "description": "获取页面参数,配合 {{#crossLink \"bui.load\"}}{{/crossLink}} 使用,需要在回调里面获取执行.\n <h3>预览地址: <a href=\"../../index.html#pages/ui_method/bui.getPageParams.html\" target=\"_blank\">demo</a></h3>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "数据都在回调里面",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    bui.getPageParams(function(res){\n        var urlparam = res;\n\n         console.log(urlparam) //{}\n    });\n"
            ]
        },
        "bui.back": {
            "name": "bui.back",
            "shortname": "bui.back",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.back.js",
            "line": 7,
            "description": "## 后退方法\n后退方法的回调,只在bui.isWebapp=false才会触发,会根据平台使用不同的后退方法",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "在后退的页面触发",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    bui.back();\n"
            ]
        },
        "bui.refresh": {
            "name": "bui.refresh",
            "shortname": "bui.refresh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.refresh.js",
            "line": 7,
            "description": "刷新页面",
            "is_constructor": 1,
            "example": [
                "\n    bui.refresh();\n"
            ]
        },
        "bui.run": {
            "name": "bui.run",
            "shortname": "bui.run",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.run.js",
            "line": 7,
            "description": "打开第三方应用, 参数needNative 为true 才能调用原生打开, false打开网址",
            "params": [
                {
                    "name": "string",
                    "description": "[应用的id,如果是\"http://\"则打开浏览器]",
                    "type": "Id"
                },
                {
                    "name": "{}",
                    "description": "[启动参数]",
                    "type": "Data"
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n    bui.run(\"http://www.easybui.com/demo/api/\");\n"
            ]
        },
        "bui.checkVersion": {
            "name": "bui.checkVersion",
            "shortname": "bui.checkVersion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/dcloud/bui.native.js",
            "line": 409,
            "description": "<h3>检查版本更新</h3>\n<p>需要把对应的<a href=\"http://www.easybui.com/demo/json/versionUpdate.json\" target=\"_blank\">versionUpdate.json</a> 放到服务器,然后通过修改里面的值来进行检测更新</p>\n<h5>versionUpdate.json 文件说明: </h5><br>\n{<br>\n           \"versionName\": \"1.0\",          //版本名称<br>\n           \"versionCode\": 20160605,       //版本ID<br>\n           \"minVersionCode\": 20160604,    //最小版本号<br>\n           \"isForced\": true,              //是否强制更新,如果强制更新,需要检测最小版本号<br>\n           \"downloadUrl\": \"\",             //下载的地址<br>\n           \"remark\": \"版本更新的内容\"        //新版本的描述,支持html<br>\n       }<br>",
            "requires": [
                "confirm"
            ],
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "String",
                    "props": [
                        {
                            "name": "url",
                            "description": "[请求更新的地址]",
                            "type": "String"
                        },
                        {
                            "name": "data] [是否需要传参",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "id] [控件的id,有id会绑定它的点击检查更新事件",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "target] [圆点要放在哪个位置,可以使用ID,独立一个位置,默认在i标签下",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "title] [对话框提醒的标题",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "url] [请求地址",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data] [请求接口需要的参数",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "method] [请求的方法 GET | POST",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout] [超时 20000",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "tips",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "nowVersion] [当前是最新版本的提醒,默认提醒会有版本号",
                                    "description": "",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "minVersion] [版本太低需要强制更新的提醒",
                                    "description": "",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fail] [网络请求失败的提醒",
                                    "description": "",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "callback] [点击按钮以后是否还有其它业务处理",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n    bui.checkVersion({\n        id: \"#checkUpdate\",\n        url: \"http://www.easybui.com/json/versionUpdate.json\"\n    });\n"
            ]
        },
        "bui.get": {
            "name": "bui.get",
            "shortname": "bui.get",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ajax.js",
            "line": 234,
            "description": "数据get请求, bui.ajax get请求的简单版.",
            "since": "1.5.4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "[必须,请求的地址]",
                    "type": "String"
                },
                {
                    "name": "data] [传输的数据为json对象 {}",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option] [参数的修改,非必须参数, 但类型必须是数组, 例如: [{ contentType:\"text/html\"}]",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\n\n       // 例子1: 简单请求\n        bui.get(\"http://www.easybui.com/demo/json/shop.json\").then(function(res){\n            console.log(res)\n        },function(res,status){\n            console.log(status);\n               // status = \"timeout\" || \"error\" || \"abort\", \"parsererror\"\n        })\n        \n       // 例子2: 修改参数示例,具体参数请查看 bui.ajax .\n        bui.get(\"http://www.easybui.com/demo/json/shop.json\",{type:\"new\"},[{needNative:true}]).then(function(res){\n            console.log(res)\n        },function(res,status){\n            console.log(status);\n        })\n\n       \n"
            ]
        },
        "bui.post": {
            "name": "bui.post",
            "shortname": "bui.post",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ajax.js",
            "line": 283,
            "description": "数据post请求, bui.ajax 的post请求的简单版.",
            "since": "1.5.4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "[必须,请求的地址]",
                    "type": "String"
                },
                {
                    "name": "data] [传输的数据为json对象 {}",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option] [参数的修改,非必须参数, 但类型必须是数组, 例如: [{ contentType:\"application/json\"}]",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\n \n       // 例子1: 简单发送请求, 非真实接口,无法接受post请求,只是示例\n       bui.post(\"http://www.easybui.com/demo/json/shop.json\",{type:\"new\"} ).then(function(res){\n           console.log(res)\n       },function(res,status){\n           console.log(status);\n       })\n       \n       // 例子2: 修改参数示例,具体参数请查看 bui.ajax .\n       bui.post(\"http://www.easybui.com/demo/json/shop.json\",{type:\"new\"},[{ contentType:\"application/json\"}]).then(function(res){\n           console.log(res)\n       },function(res,status){\n           console.log(status);\n       })\n\n"
            ]
        },
        "bui.put": {
            "name": "bui.put",
            "shortname": "bui.put",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ajax.js",
            "line": 334,
            "description": "数据put请求, bui.ajax 的put请求的简单版.",
            "since": "1.5.4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "[必须,请求的地址]",
                    "type": "String"
                },
                {
                    "name": "data] [传输的数据为json对象 {}",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option] [参数的修改,非必须参数, 但类型必须是数组, 例如: [{ contentType:\"application/json\"}]",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\n \n       // 例子1: 简单发送请求, 非真实接口,无法接受post请求,只是示例\n       bui.put(\"http://www.easybui.com/demo/json/shop.json\",{type:\"new\"} ).then(function(res){\n           console.log(res)\n       },function(res,status){\n           console.log(status);\n       })\n\n"
            ]
        },
        "bui.delete": {
            "name": "bui.delete",
            "shortname": "bui.delete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ajax.js",
            "line": 378,
            "description": "数据delete请求, bui.ajax 的delete请求的简单版.",
            "since": "1.5.4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "[必须,请求的地址]",
                    "type": "String"
                },
                {
                    "name": "data] [传输的数据为json对象 {}",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option] [参数的修改,非必须参数, 但类型必须是数组, 例如: [{ contentType:\"application/json\"}]",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\n \n       // 例子1: 简单发送请求, 非真实接口,无法接受post请求,只是示例\n       bui.delete(\"http://www.easybui.com/demo/json/shop.json\",{type:\"new\"} ).then(function(res){\n           console.log(res)\n       },function(res,status){\n           console.log(status);\n       })\n\n"
            ]
        },
        "bui.all": {
            "name": "bui.all",
            "shortname": "bui.all",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ajax.js",
            "line": 423,
            "description": "数据多个请求以后的处理.",
            "since": "1.5.4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "[数组里面必须为一个 promise 对象]",
                    "type": "Array"
                }
            ],
            "example": [
                "\n \n       var ajaxGetList = bui.get(\"http://www.easybui.com/demo/json/shop.json\");\n       var ajaxGetList2 = bui.get(\"http://www.easybui.com/demo/json/shop2.json\");\n       // 模拟失败请求\n       var ajaxGetList3 = bui.post(\"http://www.easybui.com/demo/json/shop2.json\");\n\n       // 例子1: 等2个请求都结束以后才会进入回调\n       bui.all([ajaxGetList,ajaxGetList2]).then(function(res1,res2){\n           console.log(res1)\n           console.log(res2)\n       },function(res,status){\n           console.log(status);\n       })\n\n       // 如果2个请求都成功,则进入then, 如果有一个请求 ajaxGetList3 失败,则会进入always\n       bui.all([ajaxGetList, ajaxGetList3]).then(function(res, res2) {\n           console.log(res);\n           console.log(res2);\n       }).always(function(res, res2) {\n           console.log(res, \"always\");\n           console.log(res2, \"always\");\n       })\n\n"
            ]
        },
        "bui.download": {
            "name": "bui.download",
            "shortname": "bui.download",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 6,
            "description": "<h3>下载控件, 支持安卓下载图片, web不支持, 默认使用web下载,切换原生,需要更改needNative参数</h3>\n<h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.download.html\" target=\"_blank\">demo</a></h3>\n<p>下载文件在本地,web不支持</p>\n{{#crossLink \"bui.download/getFile\"}}{{/crossLink}}: 获取文件,获取不到则下载文件 <br>\n{{#crossLink \"bui.download/start\"}}{{/crossLink}}: 下载文件 <br>\n{{#crossLink \"bui.download/stop\"}}{{/crossLink}}: 停止下载 <br>\n{{#crossLink \"bui.download/toBase64\"}}{{/crossLink}}: 下载的图片转换成可以插入页面的图片 <br>\n{{#crossLink \"bui.download/widget\"}}{{/crossLink}}: 获取依赖的控件 <br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url] [ 下载的地址, 中文地址, needEncode 参数应该设置为true",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "needEncode] [ 1.5.1新增 地址是否需要转码 默认: false | true , 如果是中文地址,需要转码",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "data] [ 请求下载需要传的参数",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout] [ 触发timeout的时间默认60000",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "folderName] [ 文件夹名称,默认是download",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "showProgress] [ 是否显示进度条 默认true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needNative] [ 1.5.1新增, 是否使用原生下载, 不受bui.isWebapp状态决定 默认 true|false 通过这个切换对应的效果,可以通过全局配置 bui.config.download",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " {needNative:true}"
                        },
                        {
                            "name": "onProgress] [ 自定义进度条回调,接收百分比值",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSuccess] [ 成功的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [ 失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  js:\n\n           // 1. 初始化 这里如果传url初始化,则马上下载\n           var uidownload = bui.download();\n\n           // 2. 开始下载\n           uiUpload.start({\n               data: null\n           })\n"
            ]
        },
        "bui.file": {
            "name": "bui.file",
            "shortname": "bui.file",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 6,
            "description": "<h3>文件管理,主要用于对下载文件的管理,安卓适用,web不支持</h3>\n <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.file.html\" target=\"_blank\">demo</a></h3>\n<p>所有文件及文件夹的操作都基于根应用文件夹</p>\n{{#crossLink \"bui.file/getFolder\"}}{{/crossLink}}: 获取创建文件夹 <br>\n{{#crossLink \"bui.file/removeFolder\"}}{{/crossLink}}: 删除文件夹包含里面的所有文件 <br>\n{{#crossLink \"bui.file/getFile\"}}{{/crossLink}}: 获取创建文件 <br>\n{{#crossLink \"bui.file/removeFile\"}}{{/crossLink}}: 删除单个文件 <br>\n{{#crossLink \"bui.file/getFileName\"}}{{/crossLink}}: 返回路径的文件名 <br>\n{{#crossLink \"bui.file/open\"}}{{/crossLink}}: 打开文件 <br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "native] [ 1.5.1废弃,由needNative决定 <del>默认true 由bui.isWebapp状态决定 false则强制采用web方式</del>",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needNative] [ 1.5.1新增, 是否使用原生上传, 不受bui.isWebapp状态决定 默认 false|true 通过这个切换对应的效果,可以通过全局配置 bui.config.file",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " {needNative:true}"
                        },
                        {
                            "name": "size] [ 默认10 M存储的大小, WEB存储需要",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  js:\n\n           var uiFile = bui.file();\n\n           // 创建 download 文件夹下的 bui.docx 文件\n           uiFile.getFile({\n               folderName: \"download\",\n               fileName: \"bui.docx\",\n               onSuccess: function (aa) {\n                   bui.alert(aa)\n               },\n               onFail: function (err) {\n                   bui.alert(err)\n               }\n           })\n"
            ]
        },
        "bui.fileselect": {
            "name": "bui.fileselect",
            "shortname": "bui.fileselect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 7,
            "description": "<h3>选择文件</h3>\n <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.fileselect.html\" target=\"_blank\">demo</a></h3>\n<p>选择文件</p>\n{{#crossLink \"bui.fileselect/add\"}}{{/crossLink}}: 添加文件 <br>\n{{#crossLink \"bui.fileselect/remove\"}}{{/crossLink}}: 移除添加的文件 <br>\n{{#crossLink \"bui.fileselect/clear\"}}{{/crossLink}}: 清除所有添加的文件 <br>\n{{#crossLink \"bui.fileselect/data\"}}{{/crossLink}}: 获取添加的数据 <br>\n{{#crossLink \"bui.fileselect/value\"}}{{/crossLink}}: 获取上传的文件值 <br>\n{{#crossLink \"bui.fileselect/toBase64\"}}{{/crossLink}}: 把获取到的本地图片转换成base64位 <br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "quality] [ 图片的质量, 默认 0.8",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "width] [ 图片的宽度, 默认 800, 原生是在上传前压缩成800宽度,web是在显示的时候显示为800宽度,需要后台自己压缩",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "mediaType] [ 文件的类型, picture | video | audio | allmedia  ,原生只支持图片上传",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "from] [ 1.4.7新增, 默认 \"\" 从相册选 | \"camera\" 相机拍照 | \"camcorder\" 录像, 需要配合 mediaType  参数",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "needNative] [ 1.5.1新增, 是否使用原生上传, 不受bui.isWebapp状态决定 默认 false|true 通过这个切换对应的效果,可以通过全局配置 bui.config.fileselect",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " {needNative:true}"
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  js:\n\n           // 1. 初始化, 这里如果有 onSuccess,onFail 则为公共处理方法,添加只需要 uiFileSelect.add();\n           var uiFileSelect = bui.fileselect();\n\n           // 2. 调用 添加文件方法\n           uiFileSelect.add({\n               onSuccess: function(files){\n                   // 展示本地图片,部分手机不支持\n                   var url = window.URL.createObjectURL(files[0]);\n                   document.querySelector('img').src = window.URL.createObjectURL(url);\n\n                   // 展示base64本地图片\n                   // this.toBase64({\n                   //     onSuccess: function (url) {\n                   //         document.querySelector('img').src = url;\n\n                   //     }\n                   // });\n               },\n               onFail: null\n           })\n\n"
            ]
        },
        "bui.ready": {
            "name": "bui.ready",
            "shortname": "bui.ready",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.ready.js",
            "line": 10,
            "description": "<p>ready 用于原生接口的调用,必须放在这里面才能使用. </p>\n<p>跟 pageinit 全局事件的区别是: bui.on(\"pageinit\",callback) 用于UI控件的初始化,这样可以保证在手机浏览器跟打包的APP保持一致的UI加载.\n<p>使用bui.on监听页面事件,类型有 \"pagebefore\"(dom加载完成,但bui未初始化) | \"pageinit\"(dom加载完成,bui已经初始化) | \"pageready\"(dom+原生接口都已经准备完毕) | \"onload\"(图片及脚本等资源加载完毕,较慢) </p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "[回调]",
                    "type": "[function]"
                }
            ],
            "example": [
                "\n\n\n        //方法1: web跟原生方法的使用,随着 bui.isWebapp 的切换,在这里才能保持一致.\n        bui.ready(function(){\n            //原生的方法都必须在ready里面执行.\n        })\n\n\n        //方法2: 监听控件初始化,用于UI类控件的初始化,在这里初始化UI控件会更快,但原生方法必须放在bui.ready\n        bui.on(\"pageinit\",function () {\n           console.log(\"pageinit\")\n        })\n"
            ]
        },
        "bui.upload": {
            "name": "bui.upload",
            "shortname": "bui.upload",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native",
            "namespace": "bui",
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 7,
            "description": "<h3>单文件上传,支持webapp跟安卓,ios,依赖于fileselect控件, 1.5.1开始,默认使用web上传,切换原生,需要更改needNative参数</h3>\n <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.upload.html\" target=\"_blank\">demo</a></h3>\n<p>选择,上传图片,只支持单个文件上传</p>\n{{#crossLink \"bui.upload/add\"}}{{/crossLink}}: 添加文件 <br>\n{{#crossLink \"bui.upload/remove\"}}{{/crossLink}}: 移除添加的文件 <br>\n{{#crossLink \"bui.upload/clear\"}}{{/crossLink}}: 清除所有添加的文件 <br>\n{{#crossLink \"bui.upload/data\"}}{{/crossLink}}: 获取添加的数据 <br>\n{{#crossLink \"bui.upload/start\"}}{{/crossLink}}: 上传文件 <br>\n{{#crossLink \"bui.upload/stop\"}}{{/crossLink}}: 停止上传 <br>\n{{#crossLink \"bui.upload/toBase64\"}}{{/crossLink}}: 把路径转换成base64位图片地址 <br>\n{{#crossLink \"bui.upload/widget\"}}{{/crossLink}}: 获取依赖的控件 <br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url] [ 上传的地址",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "headers] [ 头部参数, 原生不支持",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "data] [ 要上传的对象, data初始化的时候有值会直接上传, 使用 h5 的formdata 上传",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "fileKey] [ 默认: file , 后端需要接收这个字段进行保存",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout] [ 触发timeout的时间默认60000",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mediaType] [ 1.4.7新增, 文件的类型, 原生只支持图片上传,webapp部分机型不支持 默认: picture | allmedia  | video | audio",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "from] [ 1.4.7新增, 默认 \"\" 从相册选 | \"camera\" 相机拍照 | \"camcorder\" 录像, 需要配合 mediaType  参数",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "showProgress] [ 是否显示进度条 默认true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "native] [ 1.5.1废弃,由needNative决定 <del>默认true 由bui.isWebapp状态决定 false则强制采用web方式</del>",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needNative] [ 1.5.1新增, 是否使用原生上传, 不受bui.isWebapp状态决定 默认 false|true 通过这个切换对应的效果,可以通过全局配置 bui.config.upload",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": " {needNative:true}"
                        },
                        {
                            "name": "onProgress] [ 自定义进度条回调,接收百分比值",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onSuccess] [ 成功的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "autoClose] [ 1.5新增, 是否允许关闭进度条",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onMask] [ 1.5新增, 点击默认进度条的回调,默认停止上传并关闭显示",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [ 失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "currentName] [ 1.5.2新增,获取当前选择的文件名称,常用于配合删除",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "currentIndex] [ 1.5.2新增,获取当前选择的文件索引,常用于配合删除",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  js:\n\n           // 1. 初始化 这里如果传url初始化,则url作为公共上传地址,start不再需要传url\n           var uiUpload = bui.upload({\n               url: \"http://\"\n           });\n\n           // 2. 选择文件\n           uiUpload.add({\n               onSuccess: function(file){\n                   \n                   // 展示base64本地图片\n                   // this.toBase64({\n                   //     onSuccess: function (url) {\n                   //         document.querySelector('img').src = url;\n\n                   //     }\n                   // });\n                   // 3. 上传文件 选择以后直接上传到服务器\n                   // uiUpload.start({\n                   //     onSuccess:function(data){\n                   //         // 成功\n                   //     },\n                   //     onFail: function(res,status){\n                   //         // 失败 status = \"timeout\" || \"error\" || \"abort\", \"parsererror\"\n                   //     }\n                   // });\n               }\n           })\n\n           // 3. 也可以选择后再单独上传\n           uiUpload.start({\n               data: null\n           })\n"
            ]
        },
        "bui.accordion": {
            "name": "bui.accordion",
            "shortname": "bui.accordion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>折叠菜单</h2>\n    <p>折叠菜单初始化时尽量使用ID单独初始化,它不止可以用于dl,dt 这样的结构,还可以用在panel以及自定义的结构中,更多例子参考modules/accordion_panel.html</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.accordion.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n    {{#crossLink \"bui.accordion/show\"}}{{/crossLink}}: 展开第几个 <br>\n    {{#crossLink \"bui.accordion/hide\"}}{{/crossLink}}: 隐藏第几个 <br>\n    {{#crossLink \"bui.accordion/showFirst\"}}{{/crossLink}}: 所有折叠菜单显示第一个<br>\n    {{#crossLink \"bui.accordion/showAll\"}}{{/crossLink}}: 所有折叠菜单全部展开 <br>\n    {{#crossLink \"bui.accordion/hideAll\"}}{{/crossLink}}: 所有折叠菜单全部隐藏 <br>\n    {{#crossLink \"bui.accordion/option\"}}{{/crossLink}}: 获取设置参数 <br>\n    {{#crossLink \"bui.accordion/widget\"}}{{/crossLink}}: 获取依赖的控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.accordion.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-accordion_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "handle] [点击的区域",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "height] [父层高度,0则自适应",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "target] [要显示隐藏的目标",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "targetHeight] [目标自适应高度还是限制高度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "single] [ false(显示多个) || true(一次只折叠一个)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "stopPropagation] [ 1.5.6新增 默认:false不阻止冒泡, true 阻止冒泡,比方有链接的时候",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "lock] [ 1.5.6新增,锁定点击 默认:false可以点击 | true 不能点击",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  html:\n\n           <dl id=\"accordion\">\n               <dt class=\"bui-btn\">折叠菜单</dt>\n               <dd>\n                   折叠菜单的内容\n               </dd>\n           </dl>\n\n  js:\n\n           // 初始化\n           var uiAccordion = bui.accordion({\n               id: \"#accordion\"\n             });\n\n           // 展开第一个\n           uiAccordion.showFirst();\n"
            ]
        },
        "bui.actionsheet": {
            "name": "bui.actionsheet",
            "shortname": "bui.actionsheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>弹出菜单</h2>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.actionsheet.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.actionsheet/hide\"}}{{/crossLink}}: 隐藏二级菜单 <br>\n{{#crossLink \"bui.actionsheet/show\"}}{{/crossLink}}: 显示二级菜单 <br>\n{{#crossLink \"bui.actionsheet/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.actionsheet/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.actionsheet.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-actionsheet_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "buttons",
                            "description": "[ 有多少个按钮,是一个数组,例如:[{ name:\"分享到微博\",value:\"weibo\" }],还可以有className,自定义每个按钮的样式 ]",
                            "type": "Array"
                        },
                        {
                            "name": "trigger] [ 触发按钮的id",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "template] [ 1.5.2新增, 默认null, 按钮模板不满意,可以通过此方法返回新的模板,第一个参数为button的数据",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "handle] [ 点击上面的按钮",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position] [ 位置 bottom || top",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "appendTo] [ 1.4.3新增 默认:\"body\",添加到哪里去,主要配合单页使用",
                            "description": "",
                            "type": "String|object",
                            "optional": true
                        },
                        {
                            "name": "width] [ 0 为自适应",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mask] [ 是否显示遮罩",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "opacity] [ 遮罩的透明度 默认:0.3",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "cancelText] [ 取消的文本, 为空则不显示",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  html:\n\n           <div id=\"btnOpen\" class=\"bui-btn\">actionsheet</div>\n\n  js:\n\n           // 初始化\n           var uiActionsheet = bui.actionsheet({\n               trigger: \"#btnOpen\",\n               buttons: [{ name:\"分享到微博\",value:\"weibo\" },{ name:\"分享到微信\",value:\"weixin\" }],\n               callback: function (e) {\n\n                   var val = $(e.target).attr(\"value\");\n\n                   console.log(val);\n                   if( val == \"cancel\"){\n                       this.hide();\n                   }\n               }\n           })\n\n           // 自定义模板初始化\n           var uiActionsheet = bui.actionsheet({\n               trigger: \"#btnOpen\",\n               buttons: [{ name: \"分享到微博\", value: \"weibo\" }, { name: \"分享到微信\", value: \"weixin\" }],\n               callback: function(e) {\n\n                   var val = $(e.target).attr(\"value\");\n\n                   console.log(val);\n                   if (val == \"cancel\") {\n                       this.hide();\n                   }\n               },\n               template: function(data) {\n\n                   var html = '';\n                   if (data && data.length) {\n                       // this.config.id 为对话框生成的唯一id\n                       html += '<div id=\"' + this.config.id + '\" class=\"bui-actionsheet\">';\n                       html += '    <ul class=\"bui-list\">';\n                       html += '        <li class=\"bui-btn\" value=\"按钮的值\">按钮名</li>';\n                       html += '    </ul>';\n                       html += '    <div class=\"bui-btn\" value=\"cancel\">' + this.config.cancelText + '</div>';\n                       html += '</div>';\n                   }\n\n                   return html;\n               }\n           })\n\n"
            ]
        },
        "bui.alert": {
            "name": "bui.alert",
            "shortname": "bui.alert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.alert.js",
            "line": 10,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>提醒框</h2>\n     <p>可以提醒json, 更多参数请参考 {{#crossLink \"bui.dialog\"}}{{/crossLink}}</p>\n     <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.alert.html\" target=\"_blank\">demo</a></h3>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.alert.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-alert_low.gif\" alt=\"控件预览\"/></a></div>\n </div>",
            "extends": "bui.dialog",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "[提醒的文本 ]",
                    "type": "String"
                },
                {
                    "name": "callback] [点击回调  this 指点击的按钮",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n           bui.alert(\"提醒对话框\")\n"
            ]
        },
        "bui.btn": {
            "name": "bui.btn",
            "shortname": "bui.btn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.btn.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>绑定按钮跳转</h2>\n    <p>一个页面只需要静态绑定一次,在最外层的ID,找到页面所有要跳转的按钮,获取页面参数请查看 {{#crossLink \"bui.getPageParams\"}}{{/crossLink}}</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.btn.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.btn/load\"}}{{/crossLink}}: 页面跳转,支持单个页面跟容器内的多个按钮 <br>\n{{#crossLink \"bui.btn/submit\"}}{{/crossLink}}: 提交数据<br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.btn.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-btn_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[页面id]",
                            "type": "String"
                        },
                        {
                            "name": "handle] [监听的按钮",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "beforeCallback] [ 1.5.4新增, 点击前执行,如果返回fasle, 则不执行跳转或者提交事件",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n\n html:\n\n      <div id=\"page\">\n          <div class=\"bui-btn\" href=\"btn.html\">首页</div>\n          <div class=\"bui-btn\" href=\"btn.html?id=222\">新闻</div>\n      </div>\n js:\n\n  var uiBtn = bui.btn({\n           id:\"#page\",\n           handle: \".bui-btn\"  // 绑定多个样式名 \".bui-btn,.submit\"\n       })\n\n       // 所以按钮有href时点击会跳转\n       uiBtn.load();\n"
            ]
        },
        "bui.confirm": {
            "name": "bui.confirm",
            "shortname": "bui.confirm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.confirm.js",
            "line": 10,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>确定提醒框</h2>\n    <p>常见的提醒方式都可以在场景里面看到</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.confirm.html\" target=\"_blank\">demo</a></h3>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.confirm.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-confirm_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "extends": "bui.dialog",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "[提醒的文本 ]",
                    "type": "String"
                },
                {
                    "name": "callback] [点击回调,点击的按钮通过回调的 e.target",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n   方法1, 确认提醒:\n\n           bui.confirm(\"提醒内容\",function(e){\n               var text = $(e.target).text();\n               if( text == \"确定\" ){\n                 //do something\n               }\n               this.close();\n           });\n   方法2 可以修改更多参数:\n\n           bui.confirm({\n               content:\"确定会删除信息,不可还原\",\n               title:\"修改了标题\",\n               buttons:[\"取消\",\"确定\"],\n               callback:function(e){\n                   var text = $(e.target).text();\n                   if( text == \"确定\"){\n                       // do something\n                   }\n                   this.close();\n               }\n           })\n"
            ]
        },
        "bui.dialog": {
            "name": "bui.dialog",
            "shortname": "bui.dialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>对话框</h2>\n    <p>对话框同样是一个只关注交互的一个控件,可以从不同方向弹出,并且支持全屏,交互里面的内容是什么,完全由你定义, 可以是文本,也可以是控件, 完全可以由你定义, 像 提醒框 | 确认框 | 上拉菜单 | 选择列表菜单 | 日期等,都是基于dialog.</p>\n    <p>注意: 当页面有{{#crossLink \"bui.listview\"}}{{/crossLink}} 控件时,侧滑出来的按钮如果要触发弹窗,会导致点击弹窗按钮第一次无效,需要设置弹窗的buttons的样式名为 bui-click </p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.dialog.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.dialog/isOpen\"}}{{/crossLink}}: 是否打开状态 <br>\n{{#crossLink \"bui.dialog/open\"}}{{/crossLink}}: 打开弹出窗 <br>\n{{#crossLink \"bui.dialog/close\"}}{{/crossLink}}: 关闭弹出窗 <br>\n{{#crossLink \"bui.dialog/remove\"}}{{/crossLink}}: 移除弹出窗 <br>\n{{#crossLink \"bui.dialog/create\"}}{{/crossLink}}: 动态创建弹出窗<br>\n{{#crossLink \"bui.dialog/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.dialog/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.dialog.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-dialog_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id] [ render:true 不需要传对话框的id | render:false 为静态绑定, 不传id只是引用,不初始化",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "className] [ 增加自定义的对话框样式,防止修改",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "effect] [对话框的打开效果,修改position会有默认的效果, 要修改具体可以查看 {{#crossLink \"bui.toggle\"}}{{/crossLink}} 有哪些效果",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position] [ 对话框的位置 默认 center | left | right | top | bottom | custom (1.5.6新增,定位通过样式去定义)",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "width] [ 对话框的宽度, 只在 position:center | left | right 有效",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "height] [ 对话框的高度, 只在 position:center | top | bottom 有效",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fullscreen] [ 全屏显示对话框",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "style] [ 1.5.6新增 全屏以后的上下左右距离, 默认: null 不做处理 || { left: \"10%\", top: \"20%\"},",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "useBox] [1.5.6新增, 是否使用弹性布局，默认 false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "scroll] [ true | false 是否计算最大高度,配合height参数,超出可以滚动",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "mask] [是否显示遮罩，默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "opacity] [ 遮罩的透明度, 默认 0.6",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "zoom] [ 保持比例缩放 默认 false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "zIndex] [ 1.5.0新增 默认:100 以上,如果是嵌套的dialog,则需要分好层级, mask层级会自动减1",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调, this 指点击的按钮",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeOpen] [ 1.5.2新增 打开前触发,return false 则不允许打开",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeClose] [ 1.5.2新增 关闭前触发,return false 则不允许打开",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onMask] [ 点击遮罩的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onClose] [ 对话框关闭的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "render] [ 是否动态填充,动态填充以下参数才会有效",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "dialogid] [ 1.6.2新增 render:true 可以传指定对话框的id",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "title] [ render:true 对话框的标题才会显示",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "content] [ render:true 对话框的内容",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "close] [ render:true 显示关闭文本",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "closeText] [ render:true 才能把图标改为文本并且可以更改图标",
                            "description": "",
                            "type": "String|html",
                            "optional": true
                        },
                        {
                            "name": "autoClose] [ true点击按钮会自动关闭,如果false需要手动关闭 调用自身的close()方法",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "buttons] [ render:true 底部的按钮 格式为:[\"确定\",\"取消\"] || [{name:\"确定\",className:\"primary-reverse\"}]",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "appendTo] [ render:true 才有效 1.4.3新增 默认:\"body\",添加到哪里去,主要配合单页使用",
                            "description": "",
                            "type": "String|object",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n html:\n\n           //对话框的标准结构\n           <div id=\"dialog\" class=\"bui-dialog\" style=\"display:none;\">\n               <div class=\"bui-dialog-head\">对话框标题</div>\n               <div class=\"bui-dialog-main\">对话框的内容</div>\n           </div>\n js:\n\n       var uiDialog = bui.dialog({\n             id: \"#dialog\"\n           });\n"
            ]
        },
        "bui.dropdown": {
            "name": "bui.dropdown",
            "shortname": "bui.dropdown",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>下拉菜单</h2>\n     <p>下拉的菜单默认是相对于页面宽度的,当你需要相对按钮宽度时,relative改为false;下拉菜单可以选中不修改值,一般在点击的时候触发,也可以控制小三角的显示,具体可以查看demo.</p>\n     <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.dropdown.html\" target=\"_blank\">demo</a></h3>\n     <h3>方法说明:</h3>\n {{#crossLink \"bui.dropdown/active\"}}{{/crossLink}}: 初始化显示第几个二级菜单的值 <br>\n {{#crossLink \"bui.dropdown/value\"}}{{/crossLink}}: 不传参则获取,传参则设置 <br>\n {{#crossLink \"bui.dropdown/text\"}}{{/crossLink}}: 不传参则获取文本,传参则设置文本 <br>\n {{#crossLink \"bui.dropdown/hide\"}}{{/crossLink}}: 隐藏二级菜单 <br>\n {{#crossLink \"bui.dropdown/show\"}}{{/crossLink}}: 显示二级菜单 <br>\n {{#crossLink \"bui.dropdown/hideAll\"}}{{/crossLink}}: 隐藏所有二级菜单 <br>\n {{#crossLink \"bui.dropdown/option\"}}{{/crossLink}}: 获取设置参数 <br>\n {{#crossLink \"bui.dropdown/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.dropdown.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-dropdown-scenes_low.gif\" alt=\"控件预览\"/></a></div>\n </div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "handle] [一级菜单的按钮",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handleChildren] [文本值的位置",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data] [1.5新增, [{name:\"\",value:\"\"}]",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "value] [1.5新增, 初始化第一个值",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "target] [二级菜单,默认是按钮的下一个",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "targetHandle] [二级菜单的按钮,点击触发callback",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "width] [ 二级菜单的宽度,一级自适应宽度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "showArrow] [ 是否显示箭头",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "showActive] [ 是否显示选中的高亮效果",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "relative] [ true相对于屏幕两边 false相对于父层",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "change] [ true修改文本, false只是做选择操作,可以通过change属性定义",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoClose] [ 1.4.5新增,点击二级菜单的时候自动关闭, 默认:true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "stopPropagation] [ 1.4.5新增,点击二级菜单的时候自动关闭, 默认:true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "position] [ 显示的位置 bottom | top | left | right 也可以通过position属性设置,权限会更高",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 1.5.4新增 只有数据改变才会触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调,第一个参数是自己的引用",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n  html:\n           <div id=\"dropdown\" class=\"bui-dropdown\">\n                <div class=\"bui-btn\">\n                    下拉菜单\n                </div>\n            </div>\n  js:\n           // 初始化\n            var uiDropdown = bui.dropdown({\n                id: \"#dropdown\",\n                data: [{name:\"分享\",value:\"share\"}],\n            })\n\n           // 自定义模板初始化\n            var uiDropdown = bui.dropdown({\n                id: \"#dropdown\",\n                data: [{name:\"分享\",value:\"share\"}],\n                template: function (data) {\n                    var html = '';\n                    html += '<ul class=\"bui-list\">'\n                    data && data.forEach(function(el, index) {\n                        html += '<li class=\"bui-btn\" value=\"' + el.value + '\">' + el.name + '</li>';\n                    })\n                    html += '</ul>'\n                   return html;\n                }\n            })\n\n"
            ]
        },
        "bui.floor": {
            "name": "bui.floor",
            "shortname": "bui.floor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.floor.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>楼层控件</h2>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.floor.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-floor_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "since": "1.5.6",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件的dom]",
                            "type": "String"
                        },
                        {
                            "name": "menu] [点击操控的菜单在哪里",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handle] [菜单的循环元素是哪个,默认是.bui-btn",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "floorItem] [内容的循环元素是哪个,默认是.bui-floor-item",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "area",
                            "description": "[默认:0.5  当滚动内容到一半的距离的时候,就会跳转菜单的激活效果, 0.1则接近顶部 ]",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "[默认:\"inherit\"(由外部样式定义) | \"auto\"(自动计算) | 300(计算以后传入) ]",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "example": [
                "\n\n\n  // 示例1: 静态结构初始化, 固定结构, li里面的内容自定义\n  html:\n\n                // 菜单可以分离\n                <ul id=\"floorNav\" class=\"bui-nav\">\n                    <li class=\"bui-btn active\">表单</li>\n                    <li class=\"bui-btn\">正文</li>\n                    <li class=\"bui-btn\">附件(2)</li>\n                </ul>\n                <div id=\"floor\" class=\"bui-floor\">\n                    <div class=\"bui-floor-main\">\n                       <!-- 关联 bui-floor-item 选择器 -->\n                       <div class=\"bui-panel bui-floor-item\">\n                           <div class=\"bui-panel-head\">表单</div>\n                           <div class=\"bui-panel-main\">表单内容</div>\n                       </div>\n                       <div class=\"bui-panel bui-floor-item\">\n                           <div class=\"bui-panel-head\">正文</div>\n                           <div class=\"bui-panel-main\">正文内容</div>\n                       </div>\n                       <div class=\"bui-panel bui-floor-item\">\n                           <div class=\"bui-panel-head\">附件</div>\n                           <div class=\"bui-panel-main\">附件内容</div>\n                       </div>\n                    </div>\n                    <div class=\"bui-floor-foot\"></div>\n                </div>\n               \n               // 初始化\n               var uiFloor = bui.floor({\n                   id: \"#floor\",\n                   menu: \"#floorNav\",          // id两个单词必须驼峰氏写法,不能中横杠\n                   floorItem: \".bui-floor-item\",  // 默认,可不填\n               })\n\n"
            ]
        },
        "bui.hint": {
            "name": "bui.hint",
            "shortname": "bui.hint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.hint.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>自动消失提示框</h2>\n     <p>默认从底部弹出,4秒后消失,可以自行修改,也可以改成手动关闭的方式.</p>\n     <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.hint.html\" target=\"_blank\">demo</a></h3>\n     <h3>方法说明:</h3>\n  {{#crossLink \"bui.hint/hide\"}}{{/crossLink}}: 隐藏 <br>\n  {{#crossLink \"bui.hint/show\"}}{{/crossLink}}: 显示 <br>\n  {{#crossLink \"bui.hint/isShow\"}}{{/crossLink}}: 当前状态 <br>\n  {{#crossLink \"bui.hint/remove\"}}{{/crossLink}}: 移除 <br>\n  {{#crossLink \"bui.hint/option\"}}{{/crossLink}}: 获取设置参数 <br>\n  {{#crossLink \"bui.hint/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.hint.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-hint_low.gif\" alt=\"控件预览\"/></a></div>\n </div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "appendTo",
                            "description": "[ 在某个容器内 例如:#page ]",
                            "type": "String"
                        },
                        {
                            "name": "width",
                            "description": "[ 1.5.4新增, 宽度, 默认: 0, 支持百分比 ]",
                            "type": "Number|string"
                        },
                        {
                            "name": "height",
                            "description": "[ 1.5.4新增, 高度, 默认: 0, 高度不支持百分比 ]",
                            "type": "Number"
                        },
                        {
                            "name": "content",
                            "description": "[ 提醒的内容,没有内容只是引用,不执行 ]",
                            "type": "String"
                        },
                        {
                            "name": "skin",
                            "description": "[ 1.5.0新增, 默认:\"\" | warning | primary | success | danger ]",
                            "type": "String"
                        },
                        {
                            "name": "effect",
                            "description": "[ 动画效果,参考toggle ]",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "[ 多少秒后消失 单位:ms ]",
                            "type": "Number"
                        },
                        {
                            "name": "autoTrigger",
                            "description": "[ 1.5.5新增, 是否自动触发显示默认true | false ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoClose",
                            "description": "[ 是否自动关闭 默认true | false ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "showClose",
                            "description": "[ 是否显示关闭图标 默认false | true ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "position",
                            "description": "[ bottom | top ]",
                            "type": "String"
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onClose",
                            "description": "[ 关闭的时候执行 ]",
                            "type": "Function"
                        },
                        {
                            "name": "onHided",
                            "description": "[ 1.6.2 新增 关闭后执行 ]",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "example": [
                "\n       方法1: 快速提醒\n           bui.hint(\"确定会删除信息,不可还原\");\n  方法2: 可以修改更多参数\n          bui.hint({\n                appendTo: \"\",\n                content: \"\",\n                timeout: 2000,\n                autoClose: false,      //不开启倒计时\n                position: \"bottom\", // bottom || top\n                onClose: null\n            })\n  方法2: 居中提醒示例\n       bui.hint({\n            content:\"<i class='icon-check'></i><br />欢迎使用BUI\",\n            position:\"center\" ,\n            effect:\"fadeInDown\"\n        });\n\n"
            ]
        },
        "bui.input": {
            "name": "bui.input",
            "shortname": "bui.input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.input.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>输入框交互</h2>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.input.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n    {{#crossLink \"bui.input/value\"}}{{/crossLink}}: 获取值 <br>\n  </div>\n  <div class=\"span4\"></div>\n</div>",
            "is_constructor": 1,
            "since": "1.5.0",
            "params": [
                {
                    "name": "option",
                    "description": "[description]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[事件的父级]",
                            "type": "String"
                        },
                        {
                            "name": "target] [目标是input",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 1.5.6新增 改变以后触发,无需修改event的参数",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "event] [类型，默认“input” || \"change\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "iconClass] [1.5.6改为支持多图标样式名,默认:\".icon-remove\", 多个格式应该为: \".newfont.newfont-remove\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "showIcon] [是否显示图标,会影响到callback回调, 默认: true(显示图标)|false(隐藏图标)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "showLength] [是否显示长度,结合maxLength参数, 默认: false(隐藏长度)|true(显示长度)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "maxLength] [输入的长度, 0不限制 ,默认:0",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "onInput] [输入的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBlur] [离开的回调, 必须返回 true 的时候, value方法才能拿到值. 如果 return fasle, 则value 方法拿不到值,用于校验",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFocus] [聚焦的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [点击图标的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\nhtml:\n\n       <div class=\"bui-input password-input\">\n           <input id=\"password\" type=\"password\" placeholder=\"密码\">\n       </div>\n\n      js:\n\n       var uiInput = bui.input({\n           id: \".password-input\",\n           callback: function (e) {\n               // 点击删除按钮清空\n               $(\"#password\").val('');\n               $(e.target).hide();\n           }\n       })\n\n"
            ]
        },
        "bui.levelselect": {
            "name": "bui.levelselect",
            "shortname": "bui.levelselect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>级联选择</h2>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.levelselect.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.select/show\"}}{{/crossLink}}: 选中第几个数据 <br>\n{{#crossLink \"bui.select/hide\"}}{{/crossLink}}: 获取或者设置值 <br>\n{{#crossLink \"bui.select/value\"}}{{/crossLink}}: 获取或者设置文本 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.levelselect.html\" target=\"_blank\"></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data] [渲染的二维数据",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "template] [ 1.5.2新增, 默认null, 模板不满意,可以通过此方法返回新的模板,第一个参数为data的数据",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "appendTo] [渲染到哪里去",
                            "description": "",
                            "type": "String|object",
                            "optional": true
                        },
                        {
                            "name": "trigger] [触发弹出框的按钮样式名,层级有多少,这个样式就有多少个",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "field] [1.4.5新增 默认,{ name: \"n\", data: [\"c\",\"a\"] }",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "field.name] [ 数据的文本字段",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "field.data] [ 下一级数组的所在字段,支持多个不同字段",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "title] [弹出层的标题",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "placeholder] [占位符: 默认:\"请选择\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "value] [初始化选中的文本 例如:[\"广东\",\"广州市\",\"天河区\"]",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "popup] [ 是否弹出, 为true 下面效果才会有效",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoClose] [ 点击最后一个是否关闭",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "height] [ 弹出的高度默认300",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mask] [ true | false 是否显示遮罩",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "showValue] [ true | false 是否在弹出层显示选中值",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "fullscreen] [ false | true 是否全屏",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "effect] [出现的效果,更多参考{{#crossLink \"bui.toggle\"}}{{/crossLink}}",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position] [ 显示的位置 top | bottom | center",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 1.5.6新增后面2个参数, 每次点击的回调,有3个参数, e (dom本身), currentData (当前层的数据), nextData( 下一层的数据)",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "appendTo] [ 默认:\"\"",
                            "description": "",
                            "type": "String|object",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n       html:\n       <div class=\"bui-box\">\n           <!-- .selected-val 跟你层级个数保持一致 -->\n           <div class=\"selected-val\"></div>\n           <div class=\"selected-val\"></div>\n           <div class=\"selected-val\"></div>\n       </div>\n\njs:\n       // http://www.easybui.com/demo/json/citys.js\n\n       // 普通初始化\n       var citySelect = bui.levelselect({\n           data: citys,\n           title: \"所在地区\",\n           trigger: \".selected-val\",\n           level: 3,\n           field:{\n               name: \"n\",\n               data: [\"c\",\"a\"],\n           }\n       })\n\n       // 设置值\n       var citySelect2 = bui.levelselect({\n           data: citys,\n           title: \"所在地区\",\n           trigger: \".selected-vals\",\n           level: 3,\n           field:{\n               name: \"n\",\n               data: [\"c\",\"a\"],\n           },\n           value: [\"广东\",\"广州市\",\"天河区\"]\n       })\n\n       // 3. 自定义模板\n       var citySelect2 = bui.levelselect({\n           data: citys,\n           title: \"所在地区\",\n           trigger: \".selected-vals\",\n           level: 3,\n           template: function(data) {\n               var html = '';\n               html += '<div class=\"bui-list bui-list-select\">';\n               data.forEach(function(item, i) {\n                   var name = typeof item === \"string\" ? item : item.n;\n                   html += `\n                   <div class=\"bui-btn bui-box bui-btn-line\">\n                       <div class=\"span1\">${ name}</div>\n                       <input value=\"${name}\" text=\"${name}\" index=\"${i}\" type=\"radio\" class=\"bui-choose\">\n                   </div>`\n               })\n               html += '</div>';\n\n               return html;\n           }\n       })\n\n"
            ]
        },
        "bui.list": {
            "name": "bui.list",
            "shortname": "bui.list",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.list.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>列表自动分页加载及刷新</h2>\n     <p>注意field的配置,其中的field:{data:\"data\"} 为请求以后返回的数组所在字段, 对比示例的json理解. 如果结果是数组, 无需配置</p>\n     <p>list = scroll + pullrefresh 把scroll的数据请求逻辑封装,只需要传id,url,data,模板的生成器,field(把数据映射),如果需要你的页面的逻辑比较复杂,建议参考 <a href=\"../../index.html#pages/ui_controls/bui.scroll.html\" target=\"_blank\">bui.scroll</a> </p>\n     <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.list.html\" target=\"_blank\">demo</a></h3>\n     <h3>方法说明:</h3>\n {{#crossLink \"bui.list/refresh\"}}{{/crossLink}}: 手动刷新数据 <br>\n {{#crossLink \"bui.list/option\"}}{{/crossLink}}: 获取设置参数 <br>\n {{#crossLink \"bui.list/widget\"}}{{/crossLink}}: 获取依赖的scroll控件,然后使用scroll的方法 <br>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.list_news.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-list_low.gif\" alt=\"控件预览\"/></a></div>\n </div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "[数据请求地址]",
                            "type": "String"
                        },
                        {
                            "name": "data] [数据请求许可参数, 分页及分页大小在field 配置, 默认请求的分页是: \"page\",\"pageSize\", 这里只能是对象, 如果需要JSON.stringify 转换接口才能正确接收, 可以增加一个 needJsonString: true 参数, 会进行内部转换",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "method] [\"GET\" || \"POST\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "headers] [通过header传输的参数  {}",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "dataType] [默认 json | jsonp | script | xml | html | text",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "contentType] [get默认 'text/html;charset",
                            "description": "'",
                            "type": "String",
                            "optional": true,
                            "optdefault": "UTF-8', 如果需要由$.ajax处理, 可以传 \"\" | post默认: 'application/x-www-form-urlencoded'(表单,接口跨域需要设置这个) | 'multipart/form-data'(表单里有file文件) | 'application/json'(后端要用@requestbody接收) 前端传过去的参数要用 JSON.stringify 转换下"
                        },
                        {
                            "name": "timeout] [默认:20000",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "headers] [ {}",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "localData] [1.4.5新增,本地数据,格式保持跟接口返回数据一致,如果有本地数据,不再请求",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "field] [ 请求及返回的真实字段, 例如: 请求的分页字段为 \"pagination\", 大小字段名为: \"psize\" , 返回的数据为 {\"result\":[]}, 则filed",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": " { page:\"pagination\",size:\"psize\",data:\"result\" }"
                        },
                        {
                            "name": "field.page] [ 默认: \"page\", 分页的字段名, 如果分页的字段名不是\"page\",需要更改",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "field.size] [ 默认: \"pageSize\", 每页多少条的字段名, 如果条数的字段名不是\"pageSize\",需要更改,但不能为\"length\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "field.data] [ 默认: \"\", 返回的字段的数组在哪个字段, 例如, 返回的数据为 {\"result\":[]}, 则filed",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": " {data:\"result\"} , 返回的数据有层级,则使用对象字符串, 例如 {\"result\":{ data: [] }} 则 filed "
                        },
                        {
                            "name": "page] [映射的请求的数据页数, 默认:1",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pageSize] [映射的请求每页多少条, 默认:10",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "children] [列表的选择器,默认: \".bui-list\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handle] [列表的循环子元素,默认: \".bui-btn\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "direction] [1.5.6新增 滚动的方向,默认 y || x ;",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handleMove] [ 1.6.3 默认 \"main\" || \"head\", 下拉的时候一起拖动的位置, 数据量较多建议选择head",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "stopHandle] [1.4.2新增,样式名,默认为空,支持多个样式名,以逗号间隔. 当这个值等于下拉刷新里面的某个样式,不触发下拉刷新,一般用于事件冲突,比方 input[type",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "range] 无法滑动的时候"
                        },
                        {
                            "name": "height] [列表的高度,0 自适应",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "cacheHeight] [ 1.6.2新增, 默认 true | false 使用缓存的高度计算,false 则动态获取页面高度计算",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "urlrule] [1.6.2新增, 默认false | true (替换url的内容) 例如: 网易新闻的url规则 http://url.com/data-(page)-(size).json 替换成 http://url.com/data-1-10.json",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "relative] [请求的路径是否使用相对模块路径,默认: false(相对项目路径) | true(相对模块路径)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "commandRefresh] [刷新的操作,跟jquery操作dom一样, 默认是\"html\"|\"append\"|\"prepend\"|",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "commandLoad] [加载的操作,跟jquery操作dom一样, 默认是\"append\"|\"prepend\"|",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "needJsonString] [1.4.6新增,默认 false|true. true时会尝试把数据转换为string. 这个主要配合list控件的特殊请求使用,正常都是一个对象, 如果为true,后台一般以@requestBody 接收,postman的body 是raw 的形式",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoNext",
                            "description": "[ 默认true 当高度不足时,会继续请求下一页,直到高度出现滚动条 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoScroll",
                            "description": "[ 默认true 滚动到底部触发, false 自己监听 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoUpdatePage",
                            "description": "[ 1.5.3 新增, 默认true 自动更新分页, 如果不是,则需要自己手动调用一次 uiList.updatePage()]",
                            "type": "Boolean"
                        },
                        {
                            "name": "refresh",
                            "description": "[ 允许下拉刷新, 默认true | false  ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "scroll] [1.5.6新增 默认true(允许滚动加载) | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "template] [ 请求到数据以后生成的模板,需要返回html字符串",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeRefresh] [ 1.5.2新增, 刷新前执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "proxy] [1.5.5新增, 内部修改接口为相对路径,值为:代理的二级目录,例如: 接口地址 http://easybui.com/api/getUser?id",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "123  配置 proxy: \"/api\" 这样接口请求就变成 api/getUser?id"
                        },
                        {
                            "name": "onRefresh] [ 刷新数据以后的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeLoad] [ 1.5.2新增, 加载前执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onLoad] [ 第1次及加载以及滚动加载以后执行,在数据渲染后",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [ 失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击每个handle的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "refreshTips.start",
                            "description": "[ 开始加载的文本提醒,\"刷新中..\" ]",
                            "type": "String"
                        },
                        {
                            "name": "refreshTips.release",
                            "description": "[ 下拉的文本提醒,\"松开刷新\" ]",
                            "type": "String"
                        },
                        {
                            "name": "refreshTips.end",
                            "description": "[ 下拉高度不足提醒,\"下拉刷新\" ]",
                            "type": "String"
                        },
                        {
                            "name": "refreshTips.fail",
                            "description": "[ 下拉加载失败提醒,\"点击加载\" ]",
                            "type": "String"
                        },
                        {
                            "name": "refreshTips.success",
                            "description": "[ 成功提醒,\"刷新成功\" ]",
                            "type": "String"
                        },
                        {
                            "name": "scrollTips",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "start",
                                    "description": "[ 开始加载的文本提醒,\"努力加载中..\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "end",
                                    "description": "[ 上拉加载的提醒,\"上拉加载更多\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "fail",
                                    "description": "[ 上拉加载失败提醒,\"点击重新加载\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "nodata",
                                    "description": "[ 没有数据的提醒,\"没有更多内容\" ]",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n  html:\n     \n            <div id=\"scrollList\" class=\"bui-scroll\">\n                <div class=\"bui-scroll-head\"></div>\n                <div class=\"bui-scroll-main\">\n                    <ul class=\"bui-list\">\n                    </ul>\n                </div>\n                <div class=\"bui-scroll-foot\"></div>\n            </div>\n     \n   js:\n     \n          // 假设: userlist.json 返回的数据格式为: { status:200, list:[] }, 配置 field: {data:\"list\"}\n           // 初始化\n            var uiList = bui.list({\n                id: \"#scrollList\",\n                url: \"http://www.easybui.com/demo/json/shop.json\",\n                pageSize:5,\n                data: {},\n                // 如果返回的数组字段不在data,通过field重新定义\n                field: {\n                    page: \"page\",\n                    size: \"pageSize\",\n                    data: \"data\"\n                },\n                template: function (data) {\n                    var html = \"\";\n                    data.map(function(el, index) {\n                       html +=`<li class=\"bui-btn bui-box\">\n                            <div class=\"bui-thumbnail\"><img src=\"${el.image}\" alt=\"\"></div>\n                            <div class=\"span1\">\n                                <h3 class=\"item-title\">${el.name}</h3>\n                                <p class=\"item-text\">${el.address}</p>\n                                <p class=\"item-text\">${el.distance}公里</p>\n                            </div>\n                            <span class=\"price\"><i>￥</i>${el.price}</span>\n                        </li>`\n                    });\n                   return html;\n                }\n\n"
            ]
        },
        "bui.listview": {
            "name": "bui.listview",
            "shortname": "bui.listview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.listview.js",
            "line": 7,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>侧滑列表</h2>\n     <p>支持动态渲染以及静态渲染, 两种的区别就在于,动态渲染初始化简单, 静态渲染灵活,支持自定义按钮样式,并且支持左右侧滑.</p>\n     <p>可以同时有左边跟右边菜单,菜单的个数也可以不一样多,留意示例的几种不同效果</p>\n     <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.listview.html\" target=\"_blank\">demo</a></h3>\n     <h3>方法说明:</h3>\n {{#crossLink \"bui.listview/active\"}}{{/crossLink}}: 返回当前激活的对象 <br>\n {{#crossLink \"bui.listview/open\"}}{{/crossLink}}: 打开某一个 <br>\n {{#crossLink \"bui.listview/close\"}}{{/crossLink}}: 关闭所有 <br>\n {{#crossLink \"bui.listview/lock\"}}{{/crossLink}}: 不允许滑动 <br>\n {{#crossLink \"bui.listview/unlock\"}}{{/crossLink}}: 允许滑动 <br>\n {{#crossLink \"bui.listview/option\"}}{{/crossLink}}: 获取设置参数 <br>\n {{#crossLink \"bui.listview/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.listview.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-listview_low.gif\" alt=\"控件预览\"/></a></div>\n </div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "data] [点击触发侧滑的按钮 例如:[{ \"text\": \"修改\", \"classname\":\"btn-blue\"}]",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "data.text] [菜单的文本",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data.classname] [菜单的样式",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "template] [ 1.5.2新增, 默认null, 模板不满意,可以通过此方法返回新的模板,第一个参数为data的数据",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "handle] [触发的区域,默认是.bui-btn",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "width] [ listview的宽度,默认:0, 0 为自适应屏幕宽度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height] [ listview的高度,默认:0, 0 为自适应内容高度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "menuWidth] [菜单总宽度,默认:100",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "menuHeight] [ 菜单的高度 默认:0 自适应内容高度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "position] [ 菜单侧滑的方向 right | left",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "zoom] [ since 1.3.0 是否采用缩放宽高的方式 默认 false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "mask] [ 遮罩 true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "distance] [ 默认80, 拖拽大于distance才会生效,配合delay可以防止listview又有上下其它事件",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n   html:\n    \n       // 示例结构1: 动态渲染\n       \n            <ul id=\"listview\" class=\"bui-listview\">\n                  <li>\n                      <div class=\"bui-btn\">\n                          菜单\n                      </div>\n                  </li>\n              </ul>\n       // 示例结构2: 禁止渲染\n        \n            <ul id=\"listview\" class=\"bui-listview\">\n              <!-- 设置status属性可以避免渲染菜单 -->\n              <li status=\"1\">\n                <div class=\"bui-btn bui-box\">\n                  <div class=\"span1\">不渲染</div>\n                  <i class=\"icon-listright\"></i>\n                </div>\n              </li>\n            </ul>\n       // 示例结构3: 静态渲染,可以允许左右都有按钮, 并且在动态加载的列表的时候, 应该只需要初始化一次\n           <ul id=\"listview\" class=\"bui-listview\">\n              <li status=\"1\">\n                <div class=\"bui-btn bui-box\" href=\"pages/ui_controls/bui.listview.html\" param='{\"id\":\"123\"}'>\n                  <div class=\"span1\">静态渲染-左右菜单</div>\n                  <span class=\"bui-badges\">荐</span>\n                  <i class=\"icon-listright\"></i>\n                </div>\n                <div class=\"bui-listview-menu swipeleft\" data-moving=\"240\">\n                    <div class=\"bui-btn primary\">置顶</div>\n                    <div class=\"bui-btn primary\">修改</div>\n                    <div class=\"bui-btn danger\">删除</div>\n                </div>\n                <div class=\"bui-listview-menu swiperight\">\n                    <div class=\"bui-btn primary\">修改</div>\n                    <div class=\"bui-btn danger\">删除</div>\n                </div>\n              </li>\n            </ul>\n  js:\n\n          // 初始化\n          var uiListview = bui.listview({\n                  id: \"#listview\",\n                  data: [{ \"text\": \"修改\", \"classname\":\"btn-blue\"},\n                          { \"text\": \"删除\", \"classname\":\"btn-red\"}],\n                  callback: function (e) {\n                    var index = $(e.target).text();\n                        if( index == \"修改\" ){\n                            //do something\n                        }\n                        this.close();\n                  }\n              });\n         \n          // 自定义模板初始化\n          var uiListview = bui.listview({\n                  id: \"#listview\",\n                  data: [{ \"text\": \"修改\", \"classname\":\"btn-blue\"},\n                          { \"text\": \"删除\", \"classname\":\"btn-red\"}],\n                  callback: function (e) {\n                    var index = $(e.target).text();\n                        if( index == \"修改\" ){\n                            //do something\n                        }\n                        this.close();\n                  },\n                  template: function(data) {\n                      var html = '';\n                      html += '<div class=\"bui-listview-menu swipeleft\">';\n                      data && data.forEach(function(el, i) {\n                          html += '<div class=\"bui-btn danger\">' + el.text + '</div>';\n                      })\n                      html += '</div>';\n                      return html;\n                  }\n              });\n          \n\n"
            ]
        },
        "bui.loading": {
            "name": "bui.loading",
            "shortname": "bui.loading",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.loading.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>进度条</h2>\n    <p>有appendTo的时候是在id下的操作,没有的是在body下的,可以控制是否显示文本,或者自动关闭,甚至你还可以自定义你的进度条模板</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.loading.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.loading/show\"}}{{/crossLink}}: 显示加载,如果存在则显示,如果不存在则创建 <br>\n{{#crossLink \"bui.loading/hide\"}}{{/crossLink}}: 隐藏加载,如果存在则隐藏,不存在则没有操作 <br>\n{{#crossLink \"bui.loading/pause\"}}{{/crossLink}}: 暂停滚动 <br>\n{{#crossLink \"bui.loading/text\"}}{{/crossLink}}: 修改文本 <br>\n{{#crossLink \"bui.loading/showRing\"}}{{/crossLink}}: 显示圈圈 <br>\n{{#crossLink \"bui.loading/hideRing\"}}{{/crossLink}}: 隐藏圈圈 <br>\n{{#crossLink \"bui.loading/start\"}}{{/crossLink}}: 显示加载,重新创建 <br>\n{{#crossLink \"bui.loading/stop\"}}{{/crossLink}}: 移除加载 <br>\n{{#crossLink \"bui.loading/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.loading/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.loading.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-loading_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "appendTo",
                            "description": "[ appendTo是进度条生成的位置ID,默认在body标签下 ]",
                            "type": "String"
                        },
                        {
                            "name": "width",
                            "description": "[ 宽度 ]",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "[ 高度 ]",
                            "type": "Number"
                        },
                        {
                            "name": "text",
                            "description": "[ 加载的文本 ]",
                            "type": "String"
                        },
                        {
                            "name": "autoTrigger",
                            "description": "[ 是否自动触发 默认 true | false ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "onlyText",
                            "description": "[ 是否只显示文本 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoClose",
                            "description": "[ 默认true | false 是否点击自动关闭 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "display",
                            "description": "[ inline ]",
                            "type": "String"
                        },
                        {
                            "name": "timeout]   [ since1.3.0 是否开启定时关闭 默认0,大于零则开启定时关闭",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "zIndex]   [ since1.3.0 默认\"\"的时候为130",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "[ 回调 ]",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "example": [
                "\n\n\n     // 效果1:\n           var uiLoading = bui.loading();\n           //开启进度条\n           //uiLoading.show();\n           //关闭进度条\n           //uiLoading.hide();\n\n           // 效果2:\n           var uiLoading = bui.loading({\n               appendTo:\"#loading\",\n               display: \"block\",\n               width: 30,\n               height: 30,\n               opacity: 0,\n               callback: function (argument) {\n                   console.log(\"clickloading\")\n               }\n           });\n"
            ]
        },
        "bui.mask": {
            "name": "bui.mask",
            "shortname": "bui.mask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.mask.js",
            "line": 36,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>Mask遮罩控件</h2>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.mask.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.mask/remove\"}}{{/crossLink}}: 移除遮罩 <br>\n{{#crossLink \"bui.mask/show\"}}{{/crossLink}}: 显示遮罩,如果不存在则创建再显示 <br>\n{{#crossLink \"bui.mask/hide\"}}{{/crossLink}}: 隐藏遮罩,如果不存在则不操作 <br>\n{{#crossLink \"bui.mask/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.mask/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.mask.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-mask_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id]  [ 遮罩的id, 用于跟其它控件绑定, 默认可以不传",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "appendTo]  [ 遮罩生成的位置,默认在body标签下",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "className]  [ 1.5.6新增, 自定义样式名,用于区分多个遮罩的样式处理",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "opacity]  [ 透明度,小数点",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "autoTrigger]  [ 是否自动触发 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "background]  [ 背景颜色",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback]  [ 回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  方法1:\n\n           // 遮罩初始化\n           var uiMask = bui.mask();\n\n               // 调用 show 方法\n               uiMask.show();\n\n"
            ]
        },
        "bui.number": {
            "name": "bui.number",
            "shortname": "bui.number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.number.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>数字增减条</h2>\n    <p>支持静态初始化,常用于购物车</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.number.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.number/prev\"}}{{/crossLink}}: 执行减少操作 <br>\n{{#crossLink \"bui.number/next\"}}{{/crossLink}}: 执行增加操作 <br>\n{{#crossLink \"bui.number/value\"}}{{/crossLink}}: 不传参则获取,传参则设置 <br>\n{{#crossLink \"bui.number/disabled\"}}{{/crossLink}}: 禁止输入修改 <br>\n{{#crossLink \"bui.number/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.number/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.number.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-number_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parentId] [ 1.5.3新增, 默认\".bui-page\", 这样可以一次性初始化页面的所有number,只需初始化一次.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "id] [控件id, 不传则全部初始化,可以通过查找input的值设置.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "min] [最小值, 属性的 data-min 会优先",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "max] [最大值, 属性的 data-max 会优先, 默认:100",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "step] [一次增加多少",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "value] [初始值",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "name] [某一组的名称",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "disabled] [ 是否可以输入修改 false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "render] [ 是否动态填充, true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onInput] [ 1.4.3新增 输入数值的时候的实时校验处理",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 1.5新增 改变的时候触发,初始值的时候不触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  // 例子1: 动态渲染\n  html:\n\n           <div id=\"number\" class=\"bui-number\"></div>\n\n  js:\n\n           // 初始化\n           var uiNumber = bui.number({\n                           id:'#number'\n               });\n               //获取值\n               uiNumber.value();\n\n  // 例子2: 静态渲染, 把结构写在模板里一起渲染, 用于一组number的渲染. 这种情况在跟列表模板配合使用的时候,尤其有用, 只需初始化一次.\n  html:\n\n           <div id=\"number1\" class=\"bui-number\">\n               <div class=\"bui-number-prev\"><i class=\"icon-minus\"></i></div>\n               <input type=\"text\" name=\"\" value=\"1\" max=\"\" min=\"\">\n               <div class=\"bui-number-next\"><i class=\"icon-plus\"></i></div>\n           </div>\n\n  js:\n\n           // 初始化, 如果有多个页面有这个控件, id选择器可以通过当前页查找: id:\".page-cart .bui-number\"\n           var uiNumber = bui.number({\n                   render: false\n               });\n\n           // 取值 uiNumber.values();\n\n"
            ]
        },
        "bui.pickerdate": {
            "name": "bui.pickerdate",
            "shortname": "bui.pickerdate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 7,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>日期选择器</h2>\n    <p>日期必须以2015/8/10 这种格式传才能确保在IOS上正常, 支持动态渲染以及静态渲染, 两种的区别就在于,动态渲染初始化简单, 静态渲染灵活,支持自定义按钮样式,并且支持左右侧滑.</p>\n    <p>可以同时有左边跟右边菜单,菜单的个数也可以不一样多,留意示例的几种不同效果</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.pickerdate.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.pickerdate/value\"}}{{/crossLink}}: 设置日期 <br>\n{{#crossLink \"bui.pickerdate/min\"}}{{/crossLink}}: 设置最小日期 <br>\n{{#crossLink \"bui.pickerdate/max\"}}{{/crossLink}}: 设置最大日期 <br>\n{{#crossLink \"bui.pickerdate/reset\"}}{{/crossLink}}: 重新渲染 <br>\n{{#crossLink \"bui.pickerdate/onChange\"}}{{/crossLink}}: 日期变更事件回调<br>\n{{#crossLink \"bui.pickerdate/formatValue\"}}{{/crossLink}}: 数据格式化方法 <br>\n{{#crossLink \"bui.pickerdate/cols\"}}{{/crossLink}}: 设置分栏<br>\n{{#crossLink \"bui.pickerdate/widget\"}}{{/crossLink}}: since1.3.0 获取依赖 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.pickerdate.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-pickerdate_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[ 日期生成的容器, 同时需要设置 popup:false ]",
                            "type": "String"
                        },
                        {
                            "name": "handleParent] [ 1.6.2新增, 如果这组日期是动态创建的dom, 可以设置已知的父级容器",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "handle] [ 触发弹窗的选择器, 1.5.3支持样式选择器,多个日期,只需要初始化一个",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "bindValue] [ 1.5.3 新增, 默认:false|true, 修改的值会自动绑定到 handle, 不再需要自己去绑定",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "popup] [ 是否弹出窗口 默认 true || false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "mask] [ 是否显示遮罩 默认 true || false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "zIndex] [ 层级 默认 110",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "buttons] [ since 1.3.0 如果buttons是一个数组,则底部会增加相应的按钮 格式为 [\"确定\",\"取消\"] || [{name:\"确定\",className:\"primary\"}]",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "value] [ 初始化第一个日期,日期格式 2015/8/10 9:00",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "min] [ 最小日期,日期格式 2015/8/10 9:00, 不能传 new Date()",
                            "description": "",
                            "type": "String|Date",
                            "optional": true
                        },
                        {
                            "name": "max] [ 最大日期,日期格式 2015/8/10 9:00, 不能传 new Date()",
                            "description": "",
                            "type": "String|Date",
                            "optional": true
                        },
                        {
                            "name": "formatValue] [ since 1.3.0 显示的日期格式, 默认: yyyy-MM-dd hh:mm:ss",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "cols] [ 分栏",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "cols.year",
                            "description": "[ 不需要某栏,设置为 \"none\" 格式: { values: [],displayValues:[] } ]",
                            "type": "Object|\"none\""
                        },
                        {
                            "name": "cols.month",
                            "description": "[ 不需要某栏,设置为 \"none\" 格式: { values: [],displayValues:[] } ]",
                            "type": "Object|\"none\""
                        },
                        {
                            "name": "cols.date",
                            "description": "[ 不需要某栏,设置为 \"none\" 格式: { values: [],displayValues:[] } ]",
                            "type": "Object|\"none\""
                        },
                        {
                            "name": "cols.hour",
                            "description": "[ 不需要某栏,设置为 \"none\" 格式: { values: [],displayValues:[] } ]",
                            "type": "Object|\"none\""
                        },
                        {
                            "name": "cols.minute",
                            "description": "[ 不需要某栏,设置为 \"none\" 格式: { values: [],displayValues:[] } ]",
                            "type": "Object|\"none\""
                        },
                        {
                            "name": "cols.second",
                            "description": "[ 不需要某栏,设置为 \"none\" 格式: { values: [],displayValues:[] } ]",
                            "type": "Object|\"none\""
                        },
                        {
                            "name": "appendTo] [ 1.4.3新增 默认:\"body\",添加到哪里去,主要配合单页使用",
                            "description": "",
                            "type": "String|object",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "rotateEffect] [ 是否开启3D效果,默认:false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击确定的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n           // 1. 简单初始化\n           //1.5.3 新增 bindValue, 设置 true, 会自动把值绑定到指定的handle.\n\n           var uiPickerdate = bui.pickerdate({\n               handle:\"#datepicker_input\",\n               bindValue: true,\n               onChange: function(value) {\n                   console.log(value);\n               }\n           });\n\n       // 2. 分离式初始化: 需要自己指定value设置到哪里.\n           var input = $(\"#datepicker_input\");\n           var uiPickerdate = bui.pickerdate({\n               handle:\"#datepicker_input\",\n               onChange: function(value) {\n                   input.val(value);\n               }\n           });\n\n"
            ]
        },
        "bui.prompt": {
            "name": "bui.prompt",
            "shortname": "bui.prompt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.prompt.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>输入对话框,可以通过实例后的value方法获取输入的值</h2>\n    <p>可以使用</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.prompt.html\" target=\"_blank\">demo</a></h3>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.prompt.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-prompt_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "extends": "bui.dialog",
            "since": "1.3.6",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "[输入的文本提醒 ]",
                    "type": "String|object",
                    "props": [
                        {
                            "name": "placeholder",
                            "description": "[输入框的文本 ]",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "[输入的文本提醒 ]",
                            "type": "String"
                        },
                        {
                            "name": "row",
                            "description": "[几行, 默认1行 ]",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "[ 默认 text ]",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "[ 初始值 ]",
                            "type": "String"
                        },
                        {
                            "name": "width",
                            "description": "[ 默认:580 ]",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "[ 默认:400 ]",
                            "type": "Number"
                        },
                        {
                            "name": "onChange",
                            "description": "[改变的时候触发 ]",
                            "type": "Function"
                        },
                        {
                            "name": "callback",
                            "description": "[点击确定的时候触发 ]",
                            "type": "Function"
                        }
                    ]
                },
                {
                    "name": "callback] [ 如果第1个参数是对象, 则第2个参数应该在第1个参数的对象callback字段, 点击回调  event.target 指点击的按钮",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n   方法1, 简单用法, 确认提醒:\n       \n          var uiPrompt = bui.prompt(\"请输入您的名字\",function(e){\n              var text = $(e.target).text();\n              if( text == \"取消\"){\n                  this.close();\n              }else{\n                  if( this.value() ){\n                      // 获取输入的值\n                      bui.hint(\"您好,\"+this.value());\n                      this.close();\n                  }else{\n                      bui.hint(\"名字不能为空\");\n                  }\n              }\n          })\n   方法2 利用onChange做表单验证: \n\n         bui.prompt({\n           content:\"请输入手机号码\",\n           callback: function(e){ \n               var text = $(e.target).text(); \n               console.log(this.value())\n               if(text == \"确定\" && checkMobile(this.value())){ \n                   this.close();\n               }\n           },\n           onChange: function (e) {\n               // 校验\n               if( !checkMobile(e.target.value) ){\n                   e.target.value = '';\n               }\n           }\n       })\n\n       \n\n       // 校验是否是手机号码\n       function checkMobile(str) {\n         var re = /^1\\d{10}$/\n         if (re.test(str)) {\n           return true;\n         } else {\n           return false;\n         }\n       }\n"
            ]
        },
        "bui.pullrefresh": {
            "name": "bui.pullrefresh",
            "shortname": "bui.pullrefresh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n   <div class=\"span8\">\n     <h2>下拉刷新控件</h2>\n     <p>可以自由定义下拉事件 </p>\n     <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.pullrefresh.html\" target=\"_blank\">demo</a></h3>\n     <h3>方法说明:</h3>\n  {{#crossLink \"bui.pullrefresh/reverse\"}}{{/crossLink}}: 还原位置,下拉请求完数据以后,需要还原位置 <br>\n  {{#crossLink \"bui.pullrefresh/fail\"}}{{/crossLink}}: 请求失败以后,可以变为点击加载 <br>\n  {{#crossLink \"bui.pullrefresh/refresh\"}}{{/crossLink}}: 手动刷新数据 <br>\n  {{#crossLink \"bui.pullrefresh/option\"}}{{/crossLink}}: 获取设置参数 <br>\n  {{#crossLink \"bui.pullrefresh/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  <h5>内容交互</h5>\n  {{#crossLink \"bui.pullrefresh/lock\"}}{{/crossLink}}: 锁住滑动,一般用于控件冲突 <br>\n  {{#crossLink \"bui.pullrefresh/unlock\"}}{{/crossLink}}: 解锁滑动,一般用于控件冲突 <br>\n  {{#crossLink \"bui.pullrefresh/setHeight\"}}{{/crossLink}}: 设置内容滚动高度 <br>\n   </div>\n   <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.list_news.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-list_low.gif\" alt=\"控件预览\"/></a></div>\n </div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "[ 控件的ID,需要满足固定的结构 ]",
                            "type": "String"
                        },
                        {
                            "name": "autoLoad",
                            "description": "[ 是否第一次先执行加载 true | false ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "lastUpdated",
                            "description": "[ 是否显示更新的时间提醒 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "distance",
                            "description": "[ 默认90,下拉的距离超过才会触发事件 ]",
                            "type": "Number"
                        },
                        {
                            "name": "handleMove",
                            "description": "[ 1.6.3 默认 \"main\" || \"head\", 下拉的时候一起拖动的位置, 数据量较多建议选择head ]",
                            "type": "String"
                        },
                        {
                            "name": "maxDistance",
                            "description": "[ 1.4.2新增 默认0,下拉的距离超过最大值自动触发事件并返回 ]",
                            "type": "Number"
                        },
                        {
                            "name": "stopHandle",
                            "description": "[ 1.4.2新增,样式名,默认为空,支持多个样式名,以逗号间隔. 当这个值等于下拉刷新里面的某个样式,不触发下拉刷新,一般用于事件冲突,比方 input[type=range] 无法滑动的时候 ]",
                            "type": "String"
                        },
                        {
                            "name": "stopPropagation",
                            "description": "[ 1.5.5新增, 默认 false | true 阻止触发外部滑动 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "cacheHeight",
                            "description": "[ 1.6.2新增, 默认 true | false 使用缓存的高度计算,false 则动态获取页面高度计算 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "onRefresh",
                            "description": "[ 上拉以后执行 ]",
                            "type": "Function"
                        },
                        {
                            "name": "onBeforeRefresh] [ 1.5.2新增, 刷新前执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "refreshTips",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "start",
                                    "description": "[ 开始加载的文本提醒 ]",
                                    "type": "String"
                                },
                                {
                                    "name": "release",
                                    "description": "[ 下拉的文本提醒 ]",
                                    "type": "String"
                                },
                                {
                                    "name": "end",
                                    "description": "[ 下拉高度不足提醒 ]",
                                    "type": "String"
                                },
                                {
                                    "name": "fail",
                                    "description": "[ 下拉加载失败提醒 ]",
                                    "type": "String"
                                },
                                {
                                    "name": "success",
                                    "description": "[ 成功提醒 ]",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n\n    html:\n           <div id=\"scroll\" class=\"bui-scroll\">\n                <div class=\"bui-scroll-head\"></div>\n                <div class=\"bui-scroll-main\">\n                    <ul class=\"bui-list\">\n                        <li class=\"bui-btn\">这里是循环的内容</li>\n                    </ul>\n                </div>\n                <div class=\"bui-scroll-foot\"></div>\n            </div>\n    js:\n           // 初始化\n            var uiPullRefresh = bui.pullrefresh({\n                id: \"#scroll\",\n                onRefresh: getData\n            })\n           //数据请求示例\n            var start = 1;\n            var pagesize = 4;\n            function getData (start,pagesize) {\n                var _self = this;\n                bui.ajax({\n                    url: \"http://localhost/mysite/yumeng/index.php/API/Usercenter/getUserList\",\n                    data: {\n                        pageindex:start,\n                        pagesize:pagesize\n                    }\n                }).done(function(res) {\n                   console.log(res);\n                   //请求成功以后还原位置\n                    uiPullRefresh.reverse();\n               }).fail(function (res) {\n                    //请求失败以后改为点击加载\n                    uiPullRefresh.fail();\n               })\n            }\n"
            ]
        },
        "bui.rating": {
            "name": "bui.rating",
            "shortname": "bui.rating",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.rating.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>星级评分</h2>\n    <p>支持一颗星,支持半颗星, 调用show方法的时候,星星可以是按百分比显示. </p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.rating.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.rating/show\"}}{{/crossLink}}: 展示评分的星星值,支持百分比 <br>\n{{#crossLink \"bui.rating/value\"}}{{/crossLink}}: 不传参则获取,传参则设置 <br>\n{{#crossLink \"bui.rating/disabled\"}}{{/crossLink}}: 更改为展示星星 <br>\n{{#crossLink \"bui.rating/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.rating/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.rating.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-rating_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "handle] [点击的区域,属于循环的那部分",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "half] [是否支持半颗星",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "stars] [显示多少颗星星",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "value] [初始化多少颗星星",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "show] [展示多少颗星星比如 3.6 最后一颗星星会转换成60%",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "disabled] [是否只读",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "render] [ true | false 默认true,这样无需填写复杂的结构",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 1.6.0 每次改变才触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  html:\n\n           <div id=\"rating\" class=\"bui-rating\"></div>\n     \n  js: \n  \n           // 初始化\n           var uiRating = bui.rating({\n                       id:'#rating'\n                   });\n           //获取值\n           uiRating.value(); \n"
            ]
        },
        "bui.scroll": {
            "name": "bui.scroll",
            "shortname": "bui.scroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 10,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>滚动控件</h2>\n    <p>上拉加载,下拉刷新</p>\n    <p>可以自由定义上拉事件,下拉事件,如果无特殊要求,推荐使用 {{#crossLink \"bui.list\"}}{{/crossLink}} </p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.scroll.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n {{#crossLink \"bui.scroll/refresh\"}}{{/crossLink}}: 触发下拉的方法 <br>\n {{#crossLink \"bui.scroll/reverse\"}}{{/crossLink}}: 还原位置,下拉请求完数据以后,需要还原位置 <br>\n {{#crossLink \"bui.scroll/load\"}}{{/crossLink}}: 触发加载某一页数据 <br>\n {{#crossLink \"bui.scroll/nextPage\"}}{{/crossLink}}: 触发加载下一页数据 <br>\n {{#crossLink \"bui.scroll/prevPage\"}}{{/crossLink}}: 触发加载上一页数据 <br>\n {{#crossLink \"bui.scroll/filter\"}}{{/crossLink}}: 过滤数据 <br>\n {{#crossLink \"bui.scroll/fail\"}}{{/crossLink}}: 请求失败以后,可以变为点击加载 <br>\n {{#crossLink \"bui.scroll/updatePage\"}}{{/crossLink}}: 更新分页及缓存 <br>\n {{#crossLink \"bui.scroll/isRefresh\"}}{{/crossLink}}: 获取当前是刷新状态还是加载 <br>\n <h5>内容交互方法</h5>\n {{#crossLink \"bui.scroll/lock\"}}{{/crossLink}}: 不允许滚动加载 <br>\n {{#crossLink \"bui.scroll/unlock\"}}{{/crossLink}}: 允许滚动加载 <br>\n {{#crossLink \"bui.scroll/setHeight\"}}{{/crossLink}}: 设置内容滚动高度 <br>\n {{#crossLink \"bui.scroll/to\"}}{{/crossLink}}: 滚动条跳转到第几个元素 <br>\n {{#crossLink \"bui.scroll/toBottom\"}}{{/crossLink}}: 跳到底部 <br>\n {{#crossLink \"bui.scroll/scrollTop\"}}{{/crossLink}}: 滚动多少px <br>\n <h5>公共方法</h5>\n {{#crossLink \"bui.scroll/option\"}}{{/crossLink}}: 获取设置参数 <br>\n {{#crossLink \"bui.scroll/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.list_news.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-list_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "[ 控件的ID,需要满足固定的结构 ]",
                            "type": "String"
                        },
                        {
                            "name": "children",
                            "description": "[ 列表的样式不能为空, 找到要循环遍历的元素的父层 例如 .bui-list ]",
                            "type": "String"
                        },
                        {
                            "name": "handle",
                            "description": "[ 默认li, 找到要循环遍历的元素  ]",
                            "type": "String"
                        },
                        {
                            "name": "lastUpdated",
                            "description": "[ 下拉的文本提醒是否显示时间 ]",
                            "type": "Bollean"
                        },
                        {
                            "name": "distance",
                            "description": "[ 下拉的距离大于这个数才会触发 ]",
                            "type": "Number"
                        },
                        {
                            "name": "maxDistance",
                            "description": "[ 1.4.2新增 默认0,下拉的距离超过最大值自动触发返回 ]",
                            "type": "Number"
                        },
                        {
                            "name": "stopHandle",
                            "description": "[ 1.4.2新增,样式名,默认为空,支持多个样式名,以逗号间隔. 当这个值等于下拉刷新里面的某个样式,不触发下拉刷新,一般用于事件冲突,比方 input[type=range] 无法滑动的时候 ]",
                            "type": "String"
                        },
                        {
                            "name": "height",
                            "description": "[ 为0时,自适应高度 ]",
                            "type": "Number"
                        },
                        {
                            "name": "page",
                            "description": "[ 请求的页数,默认为1 ]",
                            "type": "Number"
                        },
                        {
                            "name": "pageSize",
                            "description": "[ 每页的大小,默认为10 ]",
                            "type": "Number"
                        },
                        {
                            "name": "autoRefresh",
                            "description": "[ 默认false 自动刷新 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoNext",
                            "description": "[ 默认true 当高度不足时,会继续请求下一页,直到高度出现滚动条 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "cacheHeight",
                            "description": "[ 1.6.2新增, 默认 true | false 使用缓存的高度计算,false 则动态获取页面高度计算 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "refresh",
                            "description": "[ 允许下拉刷新, 默认true | false  ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "handleMove",
                            "description": "[ 1.6.3 默认 \"main\" || \"head\", 下拉的时候一起拖动的位置, 数据量较多建议选择head ]",
                            "type": "String"
                        },
                        {
                            "name": "direction] [1.5.6新增 滚动的方向,默认 y || x ;",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "refreshPage] [1.5.6新增 刷新的时候是否把分页page重置为1;",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "scroll",
                            "description": "[ 1.5.6新增 默认true(绑定滚动事件) | false  ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoScroll",
                            "description": "[ 默认true 滚动到底部触发, false 自己监听 ]",
                            "type": "Boolean"
                        },
                        {
                            "name": "onBeforeRefresh] [ 1.5.2新增, 刷新前执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeLoad] [ 1.5.2新增, 加载前执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onRefresh",
                            "description": "[ 下拉以后执行 ]",
                            "type": "Function"
                        },
                        {
                            "name": "onLoad",
                            "description": "[ 滚动加载后执行回调,在数据渲染后 ]",
                            "type": "Function"
                        },
                        {
                            "name": "onScrolling",
                            "description": "[ 滚动时触发 ]",
                            "type": "Function"
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "refreshTips",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "start",
                                    "description": "[ 开始加载的文本提醒,\"刷新中..\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "release",
                                    "description": "[ 下拉的文本提醒,\"松开刷新\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "end",
                                    "description": "[ 下拉高度不足提醒,\"下拉刷新\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "fail",
                                    "description": "[ 下拉加载失败提醒,\"点击加载\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "success",
                                    "description": "[ 成功提醒,\"刷新成功\" ]",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "scrollTips",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "start",
                                    "description": "[ 开始加载的文本提醒,\"努力加载中..\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "end",
                                    "description": "[ 上拉加载的提醒,\"上拉加载更多\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "fail",
                                    "description": "[ 上拉加载失败提醒,\"点击重新加载\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "last",
                                    "description": "[ 最后一页的提醒,\"没有更多内容\" ]",
                                    "type": "String"
                                },
                                {
                                    "name": "nodata",
                                    "description": "[ 没有数据的提醒,\"没有更多内容\" ]",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n\n\n    html:\n\n           <div id=\"scroll\" class=\"bui-scroll\">\n               <div class=\"bui-scroll-head\"></div>\n               <div class=\"bui-scroll-main\">\n                   <ul id=\"scrollList\" class=\"bui-list\">\n                       <li class=\"bui-btn\">这里是循环的内容</li>\n                   </ul>\n               </div>\n               <div class=\"bui-scroll-foot\"></div>\n           </div>\n\n    js:\n\n           // 初始化\n           var uiScroll = bui.scroll({\n               id: \"#scroll\",\n               children: \".bui-list\",\n               page:1,\n               pageSize:10,\n               onRefresh: refresh,\n               onLoad: getData\n           })\n\n           //刷新数据\n           function refresh () {\n\n               page = 1;\n               pagesize = 10;\n               //请求数据\n               getData(page,pagesize,\"html\");\n           }\n\n           //滚动加载下一页\n           function getData (page,pagesize,command) {\n               command = command || \"append\";\n\n               bui.ajax({\n                   url: \"http://localhost/mysite/yumeng/index.php/API/Usercenter/getUserList\",\n                   data: {\n                       pageindex:page,\n                       pagesize:pagesize\n                   }\n               }).done(function(res) {\n\n                   var data = JSON.parse(res);//有可能需要转换,视接口而定\n\n                   //生成html\n                   var html = \"\";\n                   //数据渲染\n\n                   //渲染数据\n                   $(\"#scrollList\")[command](html);\n\n                   //更新分页信息\n                   uiScroll.updatePage(start,res.data);\n                   //还原位置\n                   uiScroll.reverse();\n\n               }).fail(function (res) {\n\n                   // 可以点击重新加载\n                   uiScroll.fail(start,pagesize,res);\n               })\n           }\n"
            ]
        },
        "bui.searchbar": {
            "name": "bui.searchbar",
            "shortname": "bui.searchbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>搜索条</h2>\n    <p>输入时会延迟执行.示例是 searchbar 跟 list 一起使用的场景.</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.searchbar.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.searchbar/search\"}}{{/crossLink}}: 单独调用搜索方法 <br>\n{{#crossLink \"bui.searchbar/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.searchbar/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.searchbar.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-searchbar_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "handle] [点击的搜索按钮",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onInput] [ 实时搜索的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 1.5.4新增, 搜索改变的时候触发,在失去焦点后",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onRemove] [ 移除关键词以后的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  html:\n\n           <div id=\"searchbar\" class=\"bui-searchbar\">\n               <div class=\"bui-input\">\n                   <i class=\"icon-search\"></i>\n                   <input type=\"text\" value=\"\" placeholder=\"搜索\"/>\n               </div>\n           </div>\n     \n  js: \n  \n           // 初始化\n           var uiSearchbar = bui.searchbar({ \n               id: \"#searchbar\",\n               callback: function(e,keyword) {\n                   // 点击以后做什么事情\n               }\n             });\n     \n           \n"
            ]
        },
        "bui.select": {
            "name": "bui.select",
            "shortname": "bui.select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.select.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>选择列表</h2>\n    <p>选择列表同样也支持动态渲染,及静态渲染,一个是简单,一个是自由,支持单选和多选,可以自己定义checkbox的样式以及位置.</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.select.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.select/value\"}}{{/crossLink}}: 获取或者设置值 <br>\n{{#crossLink \"bui.select/values\"}}{{/crossLink}}: 1.5新增,获取键值对数组 <br>\n{{#crossLink \"bui.select/text\"}}{{/crossLink}}: 获取或者设置文本 <br>\n{{#crossLink \"bui.select/active\"}}{{/crossLink}}: 选中第几个数据 <br>\n{{#crossLink \"bui.select/show\"}}{{/crossLink}}: 显示 <br>\n{{#crossLink \"bui.select/hide\"}}{{/crossLink}}: 隐藏 <br>\n{{#crossLink \"bui.select/selectAll\"}}{{/crossLink}}: 全选 <br>\n{{#crossLink \"bui.select/selectNone\"}}{{/crossLink}}: 全不选 <br>\n{{#crossLink \"bui.select/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.select/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.select.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-select_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id] [ 数据渲染在某个容器下, popup如果是true, 则不一定需要这个id.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data] [默认:[], 二级菜单的数据,静态绑定无需传数据,name,value 如果不是这2个字段,可以通过field字段配置.",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "data.name] [显示的文本",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data.value] [文本的值,相当于option的value",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "className] [自定义checkbox的值",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "name] [ 1.4.5新增 radio,checkbox 上的name 值, 默认为空,会自动生成",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "field] [1.4.5新增 默认,{name:\"name\",value:\"value\"}",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "field.name] [ 数据的文本字段",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "field.value] [ 数据的值字段",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "title] [弹出层的标题",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "placeholder] [等待的脚本",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handle] [ 默认: \".bui-list .bui-btn\" 会从id 查找, 如果是自定义模板,则需要注意下索引变更,比方分组标题,不要bui-btn,或者这里改个样式,指定可以选择的是哪个样式.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "height] [ 默认0",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "width] [ 默认0",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "change] [ 弹出选择的时候,是否修改对应的值, 默认 true ,如false需要自己用dom修改",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "popup] [ 是否弹出, popup: true, 则需要 trigger参数, popup:false 则需要id参数",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "trigger] [触发select框的按钮,有trigger,不需要有id参数, trigger也不是必须,可以自己控制实例的展示隐藏",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "triggerChildren] [选中后值的位置",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "autoClose] [ 默认false | true 点击以后自动关闭 checkbox 需要手动隐藏",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "mask] [ true | false 是否显示遮罩",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "toggle] [ 1.4.5新增 单选的时候,是否可以点击取消选择, 默认 false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "fullscreen] [ false | true 是否全屏",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "zIndex] [ 默认 110",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "needSearch] [ 1.5.6新增 默认false | true 是否需要搜索,针对弹窗的数据比较多",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "value] [ 1.4.5新增 初始化选中的文本 例如: [\"广东\"]",
                            "description": "",
                            "type": "String|array",
                            "optional": true
                        },
                        {
                            "name": "effect] [出现的效果,更多参考{{#crossLink \"bui.toggle\"}}{{/crossLink}}",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "type] [ 选择的类型 radio | checkbox | select",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "direction] [ type出现的位置 left | right | center",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position] [ 显示的位置 top | bottom | center",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "templateTitle] [ 必须 return \"<div class",
                            "description": "",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "\"bui-dialog-title\"></div>\""
                        },
                        {
                            "name": "template] [ 1.4.6新增 自定义模板, 注意, 这个1.5.2的自定义模板,需要一个完整的结构,1.5.2以前,是只需要内容的自定义而已",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onChange] [ 点击checkbox | radio 的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 初始化以后的回调,在值设置以后",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "buttons] [ 底部的按钮 格式为:[\"确定\",\"取消\"] || [{name:\"确定\",className:\"primary-reverse\"}]",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击确定按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeOpen] [ 1.5.2新增 popup:true 的时候,打开前触发, return false 则不能打开",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callbackHandle] [ classname 用于定义触发callback, 默认为底部的按钮 .bui-dialog-foot .bui-btn",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "appendTo] [ 1.4.3新增 默认:\"\", 添加到哪里去,主要配合单页使用",
                            "description": "",
                            "type": "String|object",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n 例子1: 动态绑定\n\n  html:\n\n           <div id=\"select\" class=\"bui-select\">请选择</div>\n\n  js:\n\n           // 动态绑定初始化\n           var uiSelect = bui.select({\n               trigger: \"#select\",\n               type:\"checkbox\",\n               data: [{\n                   \"name\":\"广东\",\n                   \"value\":\"11\"\n               },{\"name\":\"广西\",\n                   \"value\":\"22\"\n               },{\n                   \"name\":\"上海\",\n                   \"value\":\"33\"\n               },{\"name\":\"北京\",\n                   \"value\":\"44\"\n               },{\n                   \"name\":\"深圳\",\n                   \"value\":\"55\"\n               },{\"name\":\"南京\",\n                   \"value\":\"66\"\n               }]\n           })\n\n 例子2: 自定义模板分组\n\n  html:\n\n           <div id=\"select\" class=\"bui-select\">请选择</div>\n\n  js:\n\n           var uiSelect = bui.select({\n               trigger: \"#select\",\n               title: \"请选择区域\",\n               type: \"checkbox\",\n               data: [{\n                   \"name\": \"南方\",\n                   \"type\": \"group\"\n               }, {\n                   \"name\": \"广州\",\n                   \"value\": \"11\"\n               }, {\n                   \"name\": \"深圳\",\n                   \"value\": \"22\"\n               }, {\n                   \"name\": \"东莞\",\n                   \"value\": \"55\"\n               }, {\n                   \"name\": \"北方\",\n                   \"type\": \"group\"\n               }, {\n                   \"name\": \"北京\",\n                   \"value\": \"44\"\n               }, {\n                   \"name\": \"上海\",\n                   \"value\": \"33\"\n               }, {\n                   \"name\": \"郑州\",\n                   \"value\": \"66\"\n               }],\n               value: [\"广州\", \"上海\"],\n               //如果需要点击再进行操作,增加按钮\n               buttons: [{ name: \"重置\", className: \"\" }, { name: \"确定\", className: \"primary-reverse\" }],\n               callback: function(e) {\n\n                   var text = $(e.target).text();\n                   if (text == \"重置\") {\n                       uiSelect.selectNone();\n                   } else {\n                       uiSelect.hide();\n                   }\n               },\n               template: function(data) {\n                   var html = '';\n                   // 1.5.2 需要加这行, 1.5.2 以前,这行是不需要的, 正常不需要自己自定义模板. \n                   html += '<div class=\"bui-list bui-list-select\">';\n                   data.forEach(function(item, i) {\n                       if (item.type) {\n                           html += `<div class=\"bui-btn bui-btn-title\">${item.name}</div>`\n                       } else {\n                           html += `<div class=\"bui-btn bui-btn-line bui-box\">\n                                       <i class=\"icon-face\"></i>\n                                       <div class=\"span1\">${item.name}</div>\n                                       <input type=\"checkbox\" name=\"test\" class=\"bui-choose\" value=\"${item.value}\" text=\"${item.name}\">\n                                   </div>`\n                       }\n                   })\n                   html += '</div>';\n\n                   return html;\n               }\n           })\n\n\n例子3: 静态绑定--全屏选择列表分组示例\n\n html:\n\n       <div id=\"select\" class=\"bui-select bui-box\">\n           <div class=\"span1\">请选择区域</div>\n           <i class=\"icon-listright\"></i>\n       </div>\n\n       <!-- select 静态弹出自定义框 放在body层-->\n       <div id=\"select-dialog\" class=\"bui-dialog\" style=\"display:none;\">\n         <div class=\"bui-dialog-head bui-box-align-middle\">\n           <div class=\"span1\">请选择区域</div>\n           <div id=\"close\" class=\"bui-btn primary round\">确定</div>\n         </div>\n         <div class=\"bui-dialog-main\">\n           <div class=\"bui-list\">\n             <div class=\"bui-btn-title\">\n               南方\n             </div>\n             <div class=\"bui-btn bui-btn-line bui-box\">\n               <i class=\"icon-face\"></i>\n               <div class=\"span1\">广东</div>\n               <input type=\"checkbox\" class=\"bui-choose\" value=\"11\" text=\"广东\">\n             </div>\n             <div class=\"bui-btn bui-btn-line bui-box\">\n               <i class=\"icon-face\"></i>\n               <div class=\"span1\">广西</div>\n               <input type=\"checkbox\" class=\"bui-choose\" value=\"22\" text=\"广西\">\n             </div>\n           </div>\n         </div>\n       </div>\n\njs:\n\n       var uiSelect2 = bui.select({\n               id:\"#select-dialog\",\n               trigger:\"#select\",\n               type:\"checkbox\",\n               effect: \"fadeInRight\",\n               position: \"left\",\n               fullscreen: true,\n               buttons: []\n           });\n\n       // 绑定关闭\n       $(\"#close\").on(\"click\",function (argument) {\n           uiSelect2.hide();\n       });\n\n"
            ]
        },
        "bui.sidebar": {
            "name": "bui.sidebar",
            "shortname": "bui.sidebar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 9,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>侧滑栏</h2>\n    <p>侧滑栏,也叫抽屉菜单, bui.sidebar滑动出来的内容是什么,完全由你自己自定义,你也可以控制菜单在左边还是右边,也可以同时左右都有.</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.sidebar.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.sidebar/isActive\"}}{{/crossLink}}: 当前是否激活 <br>\n{{#crossLink \"bui.sidebar/open\"}}{{/crossLink}}: 打开侧滑栏 <br>\n{{#crossLink \"bui.sidebar/close\"}}{{/crossLink}}: 关闭侧滑栏 <br>\n{{#crossLink \"bui.sidebar/lock\"}}{{/crossLink}}: 不允许滑动<br>\n{{#crossLink \"bui.sidebar/unlock\"}}{{/crossLink}}: 允许滑动 <br>\n{{#crossLink \"bui.sidebar/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.sidebar/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.sidebar.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-sidebar_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "trigger] [点击触发侧滑的按钮",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handle] [滑动区域,默认: \".bui-page\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "handleMove] [是否允许操作区域滑动,默认: true|false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "swipeleft] [往左滑出来的菜单, 默认: \".swipeleft\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swiperight] [往右滑出来的菜单, 默认: \".swiperight\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "width] [默认宽度280",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height] [ 菜单的高度 0为自适应",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "handleMove] [ handle是否移动 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "opacity] [ 遮罩透明度 默认 0.1",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "zoom] [ 保持比例缩放 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "distance] [ 默认40, 拖拽大于distance才会生效,配合delay可以防止slide又有上下其它事件",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n  html:\n\n           <div id=\"sidebar\" class=\"bui-sidebar-wrap\">\n             <div class=\"bui-sidebar swiperight\">\n               <!-- 侧滑菜单 -->\n             </div>\n             <div id=\"page\" class=\"bui-page\">\n               <a id=\"menu\" class=\"bui-btn\"><i class=\"icon-menu\"></i></a>\n               <!-- 正文内容 -->\n             </div>\n           </div>\n\n  js:\n\n           // 初始化\n           var uiSidebar = bui.sidebar({\n                 id: \"#sidebar\",\n                 trigger: \"#menu\"\n               })\n\n"
            ]
        },
        "bui.slide": {
            "name": "bui.slide",
            "shortname": "bui.slide",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.slide.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>滑动控件</h2>\n    <p>滑动控件比较灵活,对参数要了解得更多一点,可以用来制作: <a href=\"../../index.html#pages/ui_controls/bui.slide.html\" target=\"_blank\">焦点图</a>,<a href=\"../../index.html#pages/ui_controls/bui.slide_tab.html\" target=\"_blank\">TAB选项卡</a>,全屏相册,上下滑屏,过滤筛选,层级选择器,滚动公告,等等</p>\n    <p><strong>1.4,新增自动加载远程地址参数,配合href使用</strong></p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.slide.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.slide/start\"}}{{/crossLink}}: 自动播放<br>\n{{#crossLink \"bui.slide/stop\"}}{{/crossLink}}: 停止自动播放 <br>\n{{#crossLink \"bui.slide/lock\"}}{{/crossLink}}: 不允许滑动 <br>\n{{#crossLink \"bui.slide/unlock\"}}{{/crossLink}}: 允许滑动 <br>\n{{#crossLink \"bui.slide/prev\"}}{{/crossLink}}: 是否存在,返回index <br>\n{{#crossLink \"bui.slide/next\"}}{{/crossLink}}: 是否存在,返回boolean <br>\n{{#crossLink \"bui.slide/to\"}}{{/crossLink}}: 跳转到指定的 某一个slide <br>\n{{#crossLink \"bui.slide/load\"}}{{/crossLink}}: 加载远程地址模板 <br>\n{{#crossLink \"bui.slide/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.slide/widget\"}}{{/crossLink}}: 获取依赖控件 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.slide.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-slide_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "menu] [ 默认\".bui-slide-head > ul\" (循环元素的父级), 如果控制菜单要独立,可以使用id选择器",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "children] [ 默认\".bui-slide-main > ul\" (循环元素的父级), 如果控制内容要独立,可以使用id选择器, slide嵌套必须使用id",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "relative] [ 1.5.6新增, 默认false (相对屏幕宽度) | true (相对id父级的宽度)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "stopHandle] [ 1.4.2新增,样式名,默认为空,支持多个样式名,以逗号间隔. 当这个值等于slide里面的某个样式,不触发滑动,一般用于事件冲突,比方 input[type",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "range] 无法滑动的时候"
                        },
                        {
                            "name": "width] [0 为默认屏幕宽度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height] [0 为默认屏幕高度,会计算剩余的高度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "index] [ 默认:0 ,第一次加载第几个",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "data] [ 1.5.2新增, 默认: null || [{id:\"\",title:\"\",url:\"\",iframe:false,image:\"img.png\",background:\"img.png\",page:false,close:true,synchistory:false}] , image 或者 background 只需要一个,其它字段都不是必须, 1.6.2新增 page加载的方式,可以解决加载外部地址无法返回的问题",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "direction] [ 水平滑动还是纵向滑动 默认: x | y",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "alignClassName] [ since 1.3.4 默认是\"\",全屏默认是:\"bui-box-center\", 每个li的盒子对齐样式名,主要用于全屏时的内容对齐,自带几种对齐方式 左:bui-box-align-left 水平中:bui-box-align-right 右:bui-box-align-center 上:bui-box-align-top 垂直中:bui-box-align-middle 下:bui-box-align-bottom",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "alignPage] [ since 1.6.2 默认是\"center\" | left | right",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swipe] [ 是否允许侧滑,默认允许 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "animate] [ 点击菜单跳转到某个位置是否采用动画 默认: true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "scroll] [ 是否允许垂直滚动 false | true , 如果单独需要滚动 可以给滑动的li的属性加上 data-scroll",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "fullscreen] [ 是否全屏 默认:false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autopage] [ 是否自动分页 默认:false | true; true时自动生成 bui-slide-head结构",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoplay] [ 是否自动播放 默认:false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoheight] [ 1.4.3新增, 自动高度,由内容撑开 默认:false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "zoom] [ 保持比例缩放 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "loop] [ 1.5新增,循环 默认 false | true, 如果为true, index是加1的值",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "transition] [ transform效果持续时间",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "interval] [ 自动运行间隔",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "visibleNum] [ 1.4.5新增, 可视个数,默认为1",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scrollNum] [ 1.4.5新增, 一次滚动个数,默认为1",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "template] [ 1.5新增, 需要return 正确的结构,便于数据请求处理动态模板",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "bufferEffect] [ 1.3.0 新增的参数, 在第1页跟最后1页是否还可以继续拖动, 默认允许: true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "distance] [ 默认40, 拖拽大于distance才会生效,配合delay可以防止slide又有上下其它事件",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击的回调 1.3.0 以后不再推荐,自行绑定就可",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeTo] [ 1.5.4新增 跳转前触发, return fasle 则不能跳转过去; 可以拿到 跳转的目标索引 e.currentIndex, 以及当前索引 e.prevIndex",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "autoload] [ 1.4新增 默认: false | true 远程加载菜单按钮上的 href 地址, 如果点击的按钮有disabled属性或者样式,则不跳转",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  // 示例1: 静态结构初始化, 固定结构, li里面的内容自定义\n  html:\n\n             <div id=\"slide\" class=\"bui-slide\">\n               <div class=\"bui-slide-main\">\n                 <ul>\n                   <li>\n                     <!-- 从这里开始,可以自定义 start -->\n                     <img src=\"../images/slideshow.png\" alt=\"\">\n                     <!-- 从这里开始,可以自定义 end -->\n                   </li>\n                   <li style=\"display:none\">\n                     <!-- 第2个内容, 先设置样式不可见,避免渲染闪跳 -->\n                     <img src=\"../images/slideshow2.png\" alt=\"\">\n                   </li>\n                 </ul>\n               </div>\n             </div>\n\n  js:\n\n             // 初始化\n             var uiSlide = bui.slide({\n                         id:\"#slide\",\n                         height:160,\n                         autopage:true\n                       })\n\n         // 示例2: 1.5.2 新增动态渲染: 有data,无template参数时,采用默认模板渲染数据\n         html:\n\n         <div id=\"slide\" class=\"bui-slide\"></div>\n\n         js:\n         // 先初始化\n         var uiSlide = bui.slide({\n            id:\"#slide\",\n            height:380,\n            autopage:true,\n            data: []\n          })\n\n         // 请求成功以后修改值\n          bui.ajax({\n              url: \"http://www.easybui.com/demo/json/shop.json\",\n              data: {},//接口请求的参数\n              // 可选参数\n              method: \"GET\"\n          }).then(function(result){\n             var data = [{\n               image: \"images/banner01.png\"\n             }]\n              // 修改动态值\n              uiSlide.option(\"data\",data)\n          });\n\n          示例3: 1.5.2 有自定义模板时, template,里需要自己加好静态的结构\n\n          html:\n\n          <div id=\"slideNote\" class=\"bui-slide bui-slide-notice\"></div>\n\n          js:\n          // 通知公告, 初始化\n          var uiSlide = bui.slide({\n              id:\"#slideNote\",\n              height:100,\n              autoplay: true,\n              loop: true,\n              direction: \"y\",\n              data: [{\n                title: \"2017年11月1日 河南分省党支部第18期党课\",\n                url: \"pages/ui/article.html\"\n              },{\n                title: \"2017年11月1日 河南分省党支部第19期党课\",\n                url: \"pages/ui/article.html\"\n              }],\n              template: function (data) {\n                // 有数据有模板时,需要自己全部渲染结构\n                var html = \"\";\n                html +=`<div class=\"bui-slide-main\"><ul>`\n                data.forEach(function (item,i) {\n                  html +=`<li href=\"${item.url}\">\n                      <div class=\"notice-item\">\n                          <div class=\"span1\">${item.title||\"\"}</div>\n                      </div>\n                  </li>`\n                })\n                html +=`</ul></div>`\n\n                return html;\n              },\n          })\n\n\n\n"
            ]
        },
        "bui.stepbar": {
            "name": "bui.stepbar",
            "shortname": "bui.stepbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 9,
            "description": "<h3>步骤条 beta</h3>\n<a href=\"../../index.html#pages/ui_controls/bui.stepbar.html\" target=\"_blank\">demo</a> <br>\n{{#crossLink \"bui.stepbar/value\"}}{{/crossLink}}: 设置第几步,跟获取当前在第几步 <br>\n{{#crossLink \"bui.stepbar/prev\"}}{{/crossLink}}: 上一步 <br>\n{{#crossLink \"bui.stepbar/next\"}}{{/crossLink}}: 下一步 <br>\n{{#crossLink \"bui.stepbar/option\"}}{{/crossLink}}: 获取设置参数 <br>\n{{#crossLink \"bui.stepbar/widget\"}}{{/crossLink}}: 获取依赖控件 <br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "[ 步骤的内容 例如:[{ title:\"\",subtitle:\"\",content:\"\"}] ]",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "title",
                                    "description": "[ 步骤的标题  ]",
                                    "type": "String"
                                },
                                {
                                    "name": "subtitle] [ 步骤的子标题",
                                    "description": "",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "className] [ 1.5.4新增 步骤的自定义样式名，例如：\"step01\"",
                                    "description": "",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "content] [ 步骤的内容",
                                    "description": "",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "template] [ 1.5.2新增, 默认null, 模板不满意,可以通过此方法返回新的模板,第一个参数为data的数据",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "hasNumber] [1.5.0新增, 默认false(原点中间无数字)|true(原点中间有数字)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "lineCenter] [1.5.0新增, 默认false(圆点在线两端)|true(圆点在线中心)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "handle] [点击的区域,属于循环的那部分",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "click] [允许点击时候修改对应的激活状态",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "value] [1.5.6新增, 初始化在第几步",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击按钮的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  html:\n\n           <div id=\"step\" class=\"bui-stepbar\"></div>\n     \n  js: \n  \n           //初始化控件\n           var uiStepbar = bui.stepbar({\n               id: \"#step\",\n               data: [{\n                   title: \"预立项申请\",\n                   subtitle: \"2016-04-2 10:30\",\n                   content: \"成功创建申请,已经提交至XX部门经理审批,请耐心等待\"\n               },{\n                   title: \"立项审批\",\n                   subtitle: \"2016-04-21 10:30\",\n                   content: \"审批完成,资料递交中\"\n               }]\n           });\n\n           //激活第2步\n           uiStepbar.value(1);\n\n       \n       //2. 自定义模板初始化\n       var uiStepbar = bui.stepbar({\n           id: \"#step\",\n           data: [{\n               title: \"预立项申请\",\n               subtitle: \"2016-04-2 10:30\",\n               content: \"成功创建申请,已经提交至XX部门经理审批,请耐心等待\"\n           },{\n               title: \"立项审批\",\n               subtitle: \"2016-04-21 10:30\",\n               content: \"审批完成,资料递交中\"\n           }],\n           template: function(data) {\n               var html = '';\n               data && data.forEach(function(item,i) {\n                   html += `<div class=\"bui-stepbar-cell\">\n                               <span class=\"bui-stepbar-dot\"></span>\n                               <div class=\"bui-stepbar-text\">\n                                   <h3>${item.title}</h3>\n                                   <p class=\"bui-stepbar-time\">${item.subtitle}</p>\n                                   <p class=\"bui-stepbar-desc\">${item.content}</p>\n                               </div>\n                           </div>`\n               })\n               return html;\n           }\n       });\n\n"
            ]
        },
        "bui.swipe": {
            "name": "bui.swipe",
            "shortname": "bui.swipe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>swipe滑动控件</h2>\n    <p>滑动控件,支持4个方向的滑动, sidebar 跟 listview 都基于swipe控件制作</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.swipe.html\" target=\"_blank\">demo</a></h3>\n    <h3>方法说明:</h3>\n{{#crossLink \"bui.swipe/active\"}}{{/crossLink}}: 获取当前打开的对象 <br>\n{{#crossLink \"bui.swipe/isActive\"}}{{/crossLink}}: 是否打开状态 <br>\n{{#crossLink \"bui.swipe/open\"}}{{/crossLink}}: 打开哪个方向的 <br>\n{{#crossLink \"bui.swipe/close\"}}{{/crossLink}}: 关闭 <br>\n{{#crossLink \"bui.swipe/lock\"}}{{/crossLink}}: 不允许滑动 <br>\n{{#crossLink \"bui.swipe/unlock\"}}{{/crossLink}}: 允许滑动 <br>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.swipe.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-swipe_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "is_constructor": 1,
            "since": "1.3.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "handle] [触发的区域,配合swipe可以滑动触发",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swiperight] [触发右滑的目标",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swipeleft] [触发左滑的目标",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swipeup] [触发上滑的目标",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swipedown] [触发下滑的目标",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "direction] [ x | y | xy",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "width] [ id的宽度, 默认0 即 屏幕宽度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height] [id的高度, 默认0 即 屏幕高度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "movingDistance] [ handle 移动的距离,默认位移280",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "initDistance] [ handle 初始化的距离,默认0",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "alwaysTrigger] [ 1.3.4增加 默认false; 不管滑动的距离有没有达标,总是触发open或者close事件",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "hasChild] [ swipe下面有多个swipe的时候为true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "handleMove] [ handle是否需要移动 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "targetMove] [ target是否需要移动 默认 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "zoom] [ 是否缩放 默认 false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "distance] [ 默认40, 拖拽大于distance才会生效,配合delay可以防止slide又有上下其它事件",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "transition] [ 默认300, 滑动动画的过渡时长",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n\n\n       html:\n\n        <div id=\"sidebarWrap\" class=\"wrap\">\n          <div class=\"swipeleft\">往左滑动出现的内容</div>\n          <div class=\"bui-page\">滑动区域</div>\n        </div>\n\n       js:\n       var uiSwipe = bui.swipe({\n                 id: \"#sidebarWrap\",\n                 handle: \".bui-page\",\n                 movingDistance: 200,\n                 direction: \"xy\",\n             });\n\n"
            ]
        },
        "bui.tab": {
            "name": "bui.tab",
            "shortname": "bui.tab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.tab.js",
            "line": 8,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span8\">\n    <h2>Tab控件</h2>\n    <p>Tab控件基于bui.slide制作,tab的方法及事件请参考 bui.slide </p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.tab.html\" target=\"_blank\">demo</a></h3>\n  </div>\n  <div class=\"span4\"><a href=\"../../index.html#pages/ui_controls/bui.tab.html\" target=\"_blank\"><img src=\"http://www.easybui.com/static/images/controls/bui-tab_low.gif\" alt=\"控件预览\"/></a></div>\n</div>",
            "since": "1.5.0",
            "extends": "bui.slide",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "[控件id]",
                            "type": "String"
                        },
                        {
                            "name": "menu] [ 默认\".bui-tab-head ul\" (循环元素的父级), 如果控制菜单要独立,可以使用id选择器",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "children] [ 默认\".bui-tab-main ul\" (循环元素的父级), 如果控制内容要独立,可以使用id选择器, tab嵌套必须使用id",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position] [ 1.6.2 新增 菜单的位置, 只有data有值才会有效 position: \"top\", top bottom left right",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "iconPosition] [ 1.6.2 新增 菜单图标的位置, 只有data有值才会有效 图标的位置, 默认 \"left\" | \"top\" | \"right\" | \"bottom\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "iconBadge] [ 1.6.2 新增 菜单图标红点的位置, 只有data有值才会有效 , 默认 true | false , addBadge方法添加的红点的位置,默认在图标,false则在按钮容器",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "sideWidth] [ 1.6.2 新增 控制菜单的宽度, 只有data有值且position:\"left\"的时候才会有效 默认 0, 以样式的宽度为主",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "navscroll] [ 1.6.2 新增 导航是否滚动, 只有data有值才会有效, 默认 false (平分宽度) | true (固定宽度,超出滚动)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "loadall] [ 1.6.2 新增 是否一次性加载所有选项卡里的组件, 只有data有值才会有效, 默认 false (按需加载) | true (一次性加载)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "loaded] [ 1.6.2 新增 组件编译以后执行, 只有data有值才会有效, 默认 null",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "relative] [ 1.5.6新增, 默认false (相对屏幕宽度) | true (相对id父级的宽度)",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "stopHandle] [ 1.4.2新增,样式名,默认为空,支持多个样式名,以逗号间隔. 当这个值等于tab里面的某个样式,不触发滑动,一般用于事件冲突,比方 input[type",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "range] 无法滑动的时候"
                        },
                        {
                            "name": "width] [0 为默认屏幕宽度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height] [0 为默认屏幕高度,会计算剩余的高度",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "index] [ 默认:0 ,第一次加载第几个",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "direction] [ 水平滑动还是纵向滑动 默认: x | y",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "alignClassName] [ since 1.3.4 默认是\"\",全屏默认是:\"bui-box-center\", 每个li的盒子对齐样式名,主要用于全屏时的内容对齐,自带几种对齐方式 左:bui-box-align-left 水平中:bui-box-align-right 右:bui-box-align-center 上:bui-box-align-top 垂直中:bui-box-align-middle 下:bui-box-align-bottom",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "swipe] [ 是否允许侧滑,默认允许 true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "animate] [ 点击菜单跳转到某个位置是否采用动画 默认: true | false",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "scroll] [ 是否允许垂直滚动 false | true , 如果单独需要滚动 可以给滑动的li的属性加上 data-scroll",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "autoheight] [ 1.4.3新增, 自动高度,由内容撑开 默认:false | true",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "visibleNum] [ 1.4.5新增, 可视个数,默认为1",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scrollNum] [ 1.4.5新增, 一次滚动个数,默认为1",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "distance] [ 默认40, 拖拽大于distance才会生效,配合delay可以防止tab又有上下其它事件",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "callback] [ 点击的回调 1.3.0 以后不再推荐,自行绑定就可",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "autoload] [ 1.4新增 默认: false | true 远程加载菜单按钮上的 href 地址, 如果点击的按钮有disabled属性或者样式,则不跳转",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "onBeforeTo] [ 1.5.4新增 跳转前触发, return fasle 则不能跳转过去; 可以拿到 跳转的目标索引 e.currentIndex, 以及当前索引 e.prevIndex",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onBeforeInit] [ 1.5.1新增 初始化前触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onInited] [ 1.5.1新增 初始化以后触发",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[option.data] [1.6.2 新增, 动态数据配置tab选项 [{ \n                             id: \"tab0\",  // 每个tab选项卡里面的 component id, 默认建议以某个值+数字拼接, 数字按索引值来\n              icon: \"icon-home\",  // 图标的样式名\n              className: \"btn-menu1\",  // 按钮的样式名, 自定义对齐方式等\n             image: \"\",       // 图片路径\n             title: \"新闻\",   // 菜单名称\n             everytime: false,   // 是否点击的时候重新编译, 默认false\n             name: \"pages/components/list/index\", // 菜单对应加载的模块名\n             param: { type: \"news\" }  // 传参数给该模块\n           }]\n]",
                    "description": "",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\n\n  // 示例1: 静态结构初始化, 固定结构, li里面的内容自定义\n  html:\n\n              <div id=\"uiTab\" class=\"bui-tab\">\n                <!-- 菜单结构 -->\n                <div class=\"bui-tab-head\">\n                  <ul>\n                    <li>Tab1</li>\n                  </ul>\n                </div>\n                <!-- 内容结构 -->\n                <div class=\"bui-tab-main\">\n                  <ul>\n                    <li>\n                      <!-- 从这里开始,可以自定义 start -->\n                      <img src=\"../images/slideshow.png\" alt=\"\">\n                      <!-- 从这里开始,可以自定义 end -->\n                    </li>\n                    <li style=\"display:none\">\n                      <!-- 第2个内容, 先设置样式不可见,避免渲染闪跳 -->\n                      <img src=\"../images/slideshow2.png\" alt=\"\">\n                    </li>\n                  </ul>\n                </div>\n              </div>\n\n  js:\n\n              // 初始化\n              var uitab = bui.tab({\n                        id:\"#uiTab\"\n                      })\n\n          // 示例2: 1.5.2 新增动态渲染:\n          html:\n\n          <div id=\"uiTab\" class=\"bui-tab\"></div>\n\n          js:\n          // 先初始化\n          var uiTab = bui.tab({\n                id:\"#uiTab\",\n                template: function (data) {\n                  var html =\"\";\n                  // 渲染菜单结构\n                  html +=`<div class=\"bui-tab-head\"><ul id=\"nav\" class=\"bui-nav\">`\n                     data.forEach(function (item,i) {\n                       html +=`<li class=\"bui-btn\">${item.title}</li>`\n                     })\n        \t\t\t\t  html +=`</ul></div>`\n                  // 渲染内容结构\n                  html +=`<div class=\"bui-tab-main\"><ul>`\n                    data.forEach(function (item,i) {\n                      html +=`<li><img src=\"${item.image}\" alt=\"\"></li>`\n                    })\n                  html +=`</ul></div>`\n                  return html;\n                }\n            });\n\n          // 请求成功以后修改值\n           bui.ajax({\n               url: \"http://www.easybui.com/demo/json/shop.json\",\n               data: {},//接口请求的参数\n               // 可选参数\n               method: \"GET\"\n           }).then(function(result){\n             // 模拟数据\n              var data = [{\n                image: \"images/banner01.png\"\n              }]\n               // 修改动态值\n               uitab.option(\"data\",data)\n           });\n\n           // 示例2: 1.5.4 支持跳转前拦截:\n          html:\n\n          <div id=\"uiTab\" class=\"bui-tab\"></div>\n\n          js:\n          // 示例未登录状态\n          var hasLogin = false;\n          // 初始化\n          var uiTab = bui.tab({\n                id:\"#uiTab\",\n                onBeforeTo: function(e) {\n                  // 跳转的目标索引\n                   console.log(\"currentIndex\", e.currentIndex)\n                  // 跳转前的索引\n                   console.log(\"prevIndex\", e.prevIndex)\n                   // 跳转到索引为1的时候,如果登录状态没有,则进行拦截\n                   // if (e.currentIndex == 1 && !hasLogin ) {\n                   //     bui.alert(\"您还没有登录呢\")\n                   //     return false;\n                   // }\n               }\n            });\n\n         1.6.2新增更简单的方式, 动态渲染\n\n         var uiTab = bui.tab({\n             id: \"#uiTab\",\n             // position: \"left\", // 修改菜单位置\n             // iconPosition: \"right\", // 修改图标位置\n             // sideWidth: 80, // 修改左边菜单的宽度\n             data: [{\n                     id: \"tab0\",\n                     // icon: \"icon-home\",\n                     title: \"新闻\",\n                     name: \"pages/components/list/index\",\n                     param: { type: \"news\" }\n                 }, {\n                     id: \"tab1\",\n                     icon: \"icon-home\",\n                     // image: \"images/applogo.png\",\n                     title: \"图片\",\n                     name: \"pages/components/list/index\",\n                     param: { type: \"photo\" },\n                     everytime: true\n                 },\n                 {\n                     id: \"tab2\",\n                     icon: \"icon-home\",\n                     title: \"视频\",\n                     name: \"pages/components/list/index\",\n                     param: { type: \"video\" }\n                 }, {\n                     id: \"tab3\",\n                     icon: \"icon-home\",\n                     title: \"课程\",\n                     name: \"pages/components/list/index\",\n                     param: { type: \"class\" }\n                 }\n             ]\n         })\n\n\n"
            ]
        },
        "bui.timer": {
            "name": "bui.timer",
            "shortname": "bui.timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "bui",
            "file": "src/scripts/ui/bui.timer.js",
            "line": 9,
            "description": "计时器,可以递减或者递增, 可以用来做秒杀, 1.5.6新增,支持不同类型设定times\n预览地址: <a href=\"../../index.html#pages/ui_controls/bui.timer.html\" target=\"_blank\">demo</a>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "[时间显示在某个id 上]",
                            "type": "String"
                        },
                        {
                            "name": "onEnd",
                            "description": "[时间到以后执行回调]",
                            "type": "Function"
                        },
                        {
                            "name": "onProcess]  [过程处理函数,参数为当前秒数",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "type]  [1.5.6新增, 定义times的类型, 默认 number(跟second类似,输出是大于60的数字) | second | minute | hour  | date | day",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "time]  [1.5.6新增, 默认:10秒 当 type",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "minute 10等于10分钟 依次类推, 当type"
                        },
                        {
                            "name": "times]  [ 废弃",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "fixZero]  [1.5.6新增, 小余10是否在前面补零, 默认 true | false",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "reduce]  [默认:true 递减 | false 递增",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ {{#crossLink \"bui.timer/start\"}}{{/crossLink}} 开始计时 | {{#crossLink \"bui.timer/stop\"}}{{/crossLink}} 停止计时 | {{#crossLink \"bui.timer/pause\"}}{{/crossLink}} 暂停 | {{#crossLink \"bui.timer/restart\"}}{{/crossLink}} 重新计时 ]",
                "type": "Object"
            },
            "example": [
                "\n       \n       // 例子1: 倒计时10秒\n       html: \n       <div id=\"time\"></div>\n       \n       js: \n       var timer = bui.timer({\n           target: \"#time\",\n           onEnd: function (argument) {\n               bui.alert(\"时间到\")\n           },\n           type: \"number\",\n           time: 10\n       })\n\n       timer.start();\n\n       // 例子2: 倒计时10分钟\n       js: \n       var timer = bui.timer({\n           target: \"#time\",\n           onEnd: function (argument) {\n               bui.alert(\"时间到\")\n           },\n           type: \"minute\",\n           time: 10\n       })\n\n       timer.start();\n\n       // 例子3:倒计时1天\n       js: \n       var timer = bui.timer({\n           target: \"#time\",\n           onEnd: function (argument) {\n               bui.alert(\"时间到\")\n           },\n           type: \"minute\",\n           time: 10\n       })\n\n       timer.start();\n\n       // 例子4: 离今晚12点还有多少时间\n       var afterDate = bui.date.after(new Date(), 1);\n       time = bui.timer({\n           target: \"#time\",\n           onEnd: function (argument) {\n               bui.alert(\"时间到\")\n           },\n           type: \"date\",\n           time: afterDate\n       });\n       time.start();\n"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 154,
            "description": "左移动画",
            "itemtype": "method",
            "name": "left",
            "params": [
                {
                    "name": "num",
                    "description": "正数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.left(100).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 185,
            "description": "右移动画",
            "itemtype": "method",
            "name": "right",
            "params": [
                {
                    "name": "num",
                    "description": "正数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.right(100).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 217,
            "description": "上移动画",
            "itemtype": "method",
            "name": "up",
            "params": [
                {
                    "name": "num",
                    "description": "正数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.up(100).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 252,
            "description": "下移动画",
            "itemtype": "method",
            "name": "down",
            "params": [
                {
                    "name": "num",
                    "description": "正数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.down(100).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 285,
            "description": "缩放动画",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "num",
                    "description": "示例: \"2\" | \"2,2\"",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.scale(\"2,2\").start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 307,
            "description": "水平缩放动画",
            "itemtype": "method",
            "name": "scaleX",
            "params": [
                {
                    "name": "num",
                    "description": "示例: 2",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.scaleX(2).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 331,
            "description": "垂直缩放动画",
            "itemtype": "method",
            "name": "scaleY",
            "params": [
                {
                    "name": "num",
                    "description": "示例: 2",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.scaleY(2).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 355,
            "description": "旋转动画",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //链式动画\n           uiAnimate.rotate(45).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 380,
            "description": "水平旋转动画",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //需要开启3d动画才会有效\n           uiAnimate.open3D().rotateX(45).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 404,
            "description": "垂直伸展动画",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //需要开启3d动画才会有效\n           uiAnimate.open3D().rotateY(45).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 428,
            "description": "扭曲动画",
            "itemtype": "method",
            "name": "skew",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.skew(\"10,10\").start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 470,
            "description": "横向扭曲",
            "itemtype": "method",
            "name": "skewX",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.skewX(20).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 492,
            "description": "纵向扭曲",
            "itemtype": "method",
            "name": "skewY",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.skewY(20).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 516,
            "description": "在做动画前更改原点,几种写法 left,top || 25%,75% || right 对旋转放大扭曲有效",
            "itemtype": "method",
            "name": "origin",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.origin(\"25%,75%\").rotate(45).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 540,
            "description": "动画的执行时间",
            "itemtype": "method",
            "name": "transition",
            "params": [
                {
                    "name": "time",
                    "description": "动画的执行时间 单位:ms",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "动画的效果 ease-in | ease-out | ease",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.transition(500).left(200).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 577,
            "description": "清除动画",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.clear().left(200).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 601,
            "description": "清除动画并返回原来位置",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "callback",
                    "description": "动画执行完触发",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.stop();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 645,
            "description": "动画链式的触发",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "动画执行完触发",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.left(200).down(200).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 705,
            "description": "返回原来位置,只对transform有效, 暂时跟stop效果一样",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //清除动画的位置\n           uiAnimate.reverse();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 762,
            "description": "transform独立动画,无需start,但要配合transition使用",
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "action",
                    "description": "要执行的动画",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "动画执行完触发",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //执行动画\n           uiAnimate.transition(500).transform(\"translateX(-200px)\";"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 794,
            "description": "开启3D透视,景深,对旋转动画有效,同时会开启GPU硬件加速",
            "itemtype": "method",
            "name": "open3D",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //需要开启3d动画才会有效\n           uiAnimate.open3D().rotateY(45).start();"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 819,
            "description": "属性动画,无需start 相对transform会比较耗性能, 配合 transition使用",
            "itemtype": "method",
            "name": "property",
            "params": [
                {
                    "name": "num",
                    "description": "度数",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                " \n          //初始化page对象\n           var uiAnimate = bui.animate(\"#page\");\n       \n           //清除动画的位置\n           uiAnimate.transition(500).property(\"width\",\"500px\");"
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 850,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //获取依赖控件 \n           var uiAnimateWidget = uiAnimate.widget();\n           \n               "
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/animate/bui.animate.js",
            "line": 865,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n           \n           \n           //获取所有参数\n            //获取所有参数\n           var option = uiAnimate.option();\n\n           //获取某个参数\n           var id = uiAnimate.option( \"id\" );\n\n           //修改一个参数\n           uiAnimate.option( \"open3D\",false );\n\n           //修改多个参数\n           uiAnimate.option( {\"open3D\":false} );\n               "
            ],
            "class": "bui.animate",
            "module": "Animate",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 60,
            "description": "监听自定义事件",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 触发的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          // 自定义search事件监听\n          emitter.on(\"search\",function(val){\n            search(val);\n          });\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 96,
            "description": "取消事件",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 触发的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n              // 取消所有search事件\n              emitter.off(\"search\");\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 138,
            "description": "只监听在第一次的时候触发,触发以后不再执行",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 触发的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          // 监听一次\n          emitter.one(\"search\",function(val){\n            search(val);\n          });\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 163,
            "description": "只监听在第一次的时候触发,触发以后不再执行",
            "itemtype": "method",
            "name": "wait",
            "since": "1.6.2",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback] [ 触发的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          // 监听一次\n          emitter.wait([\"search\",\"list\"],function(search,list){\n          //   console.log(search);\n          //   console.log(list);\n          });\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 202,
            "description": "只监听在第一次的时候触发,触发以后不再执行, 跟wait的区别在于返回的实例, wait返回了参数+实例",
            "itemtype": "method",
            "name": "waited",
            "since": "1.6.3",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback] [ 触发的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          // 监听一次\n          emitter.waited([\"search\",\"list\"],function(search,list){\n          //   console.log(search);\n          //   console.log(list);\n          });\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 244,
            "description": "触发事件",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "arguments] [ 需要传给自定义事件的参数,可以有多个",
                    "description": "",
                    "type": "String|object|number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          $(\"#id\").click(function (e) {\n            emitter.trigger(\"search\",e);\n          })\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.event.js",
            "line": 274,
            "description": "通知所有变更",
            "itemtype": "method",
            "name": "notify",
            "since": "1.5.0",
            "example": [
                "\n\n              $(\"#id\").click(function (e) {\n                emitter.notify();\n              })\n"
            ],
            "class": "bui.emitter",
            "module": "Event",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 107,
            "description": "实例的公共方法, 获取插件里面的实例,",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 获取依赖的时候",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n           \n           插件内部使用 that.widgets.loading = bui.loading(); 初始化, 实例才能通过widget方法获取得到内部依赖.\n\n           比方初始化了插件: \n           var accordion = bui.accordion();\n\n           // 实例获取依赖\n           accordion.widget(\"loading\");\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 126,
            "description": "[控件的初始化]",
            "itemtype": "method",
            "name": "init",
            "since": "1.5.3",
            "example": [
                "\n\n           //初始化生命周期,默认已经初始化1次\n           var accordion = bui.accordion();\n\n           // 执行多一次初始化\n           accordion.init();\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 168,
            "description": "插件的公共方法,重新初始化.",
            "itemtype": "method",
            "name": "reinit",
            "example": [
                "\n           \n           \n           实例:\n           var accordion = bui.accordion();\n           // 重新初始化\n           accordion.reinit();\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 191,
            "description": "插件的公共方法,销毁控件.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "callback] [ 销毁后做什么",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n           \n           插件内部使用: \n           // 插件内部要销毁的东西, 比方 定时器,事件绑定, 外部是不知道的, 所以要内部处理\n           that.beforeDestroy = function(){\n\n           }\n\n           实例的销毁:\n           var accordion = bui.accordion();\n           // 调用这个方法前, 会先执行 beforeDestroy. \n           accordion.destroy();\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 229,
            "description": "处理样式的前缀.",
            "itemtype": "method",
            "name": "prefix",
            "params": [
                {
                    "name": "str] [ 去除前缀以后的值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[ 出现问题的位置 ]",
                "type": "String"
            },
            "example": [
                "\n           \n           var className = that.prefix(\"accordion\");\n\n           // bui-accordion\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 245,
            "description": "插件内部统一的抛出日志方法.",
            "itemtype": "method",
            "name": "showLog",
            "params": [
                {
                    "name": "str] [ 日志说明, try{}catche(e){ that.showLog(e) }",
                    "description": "",
                    "type": "String|object",
                    "optional": true
                },
                {
                    "name": "where] [ 出现问题的位置",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n           \n           // 抛出异常, 在bui.accordion init 方法\n           that.showLog(\"初始化错误\",\"bui.accordion init\")\n\n           // 支持对象\n           try{}catche(e){ that.showLog(e) }\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 272,
            "description": "外部统一的修改获取参数, 修改this.config 的参数, 并且重新调用 init 方法.",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 获取依赖的时候",
                    "description": "",
                    "type": "String|object",
                    "optional": true
                },
                {
                    "name": "value] [ 获取依赖的时候",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n           \n           \n           比方初始化了插件: \n           var accordion = bui.accordion();\n\n           // 实例获取参数\n           accordion.option(\"id\");\n\n           // 修改一个参数\n           accordion.option(\"height\",500);\n\n           // 修改多个参数\n           accordion.option({\"height\":500,handle:\".bui-btn-test\"});\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 331,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\"(显示目标时) | \"hide\"(隐藏目标时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           that.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 349,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\"(显示目标时) | \"hide\"(隐藏目标时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           that.off(\"show\");\n"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.extend.js",
            "line": 363,
            "description": "触发自定义事件",
            "itemtype": "event",
            "name": "trigger",
            "params": [
                {
                    "name": "type] [ 自定义事件名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "arguments] [ 需要传给自定义事件的参数,可以有多个",
                    "description": "",
                    "type": "String|object|number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           $(\"#id\").click(function (e) {\n           that.trigger(\"show\",e);\n           })"
            ],
            "class": "bui.history",
            "module": "Core"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 29,
            "description": "获取所有历史记录",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "value] [通过模块名获取某个历史记录,或者历史记录",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "key] [默认:\"name\", 也可以传页面id",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "option [返回数组]",
                "type": "Array"
            },
            "example": [
                "\n\n 方法:\n\n           var allHistory = bui.history.get();\n           \n          方法2:\n           // 通过模块名获取某个历史记录\n           bui.history.get(\"pages/login/login\")\n\n          方法3:\n           // 通过页面id获取某个历史记录\n           bui.history.get(\"buife172-aafb-0295-180b-6bc17fbd1cfb\",\"id\")\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 60,
            "description": "获取最后的历史记录",
            "itemtype": "method",
            "name": "getLast",
            "params": [
                {
                    "name": "field] [返回最后一条记录的某个key值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "option [返回对象]",
                "type": "Object"
            },
            "example": [
                "\n\n 方法:\n\n           var lastHistory = bui.history.getLast();\n\n           方法2: 1.6.x\n           var currentDistance = bui.history.getLast(\"exports\");\n           \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 88,
            "description": "获取上一页历史记录",
            "itemtype": "method",
            "name": "getPrev",
            "since": "1.6.0",
            "params": [
                {
                    "name": "field] [返回最后一条记录的某个key值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "option [返回对象]",
                "type": "Object"
            },
            "example": [
                "\n\n 方法:\n\n           var lastHistory = bui.history.getPrev();\n\n           方法2: 1.6.x\n           var currentDistance = bui.history.getPrev(\"exports\");\n           \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 119,
            "description": "综合的获取参数方法, 如果模块会被多种方式加载, 则应该这个方法 bui.history.getParams",
            "itemtype": "method",
            "name": "getParams",
            "params": [
                {
                    "name": "type] [ 参数的类型, 如果不传则获取多种方式,依次获取, component, page, url, 也可以指定某种类型 page(弹窗加载) | component(局部加载的参数) | url(路由跳转的参数)",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n 方法1: 如果不确定该模块会被哪种方式使用, 则可以使用这种方式获取. module.id 在loader.define(function(req,ext,module){ }) 的第三个参数\n      \n      var params = bui.history.getParams(module.id);\n      \n方法2: 获取单页路由或者多页路由的跳转传参 bui.load({url:\"\",param:{}})\n      \n      var params = bui.history.getParams(\"url\");\n\n方法3: 获取以bui.page({url:\"\",param:{}}) 加载的的参数, 通过以下方式获取\n      \n      var pageParams = bui.history.getParams(\"page\");\n\n方法4: 获取以router.loadPart, loader.load , component标签 加载的的参数, 通过以下方式获取\n\n      var partParams = bui.history.getParams(\"component\");\n\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 215,
            "description": "获取编译后的组件实例",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "id",
                    "description": "[获取编译后的组件实例,如果有return, 就能拿到该对象]",
                    "type": "String"
                },
                {
                    "name": "field] [默认: exports 字段, 可以不传",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n 方法1: 获取编译后的实例\n           <component id=\"list\" name=\"pages/list/index\"></component>\n\n           var distance = bui.history.getComponent(\"list\");\n       \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 242,
            "description": "获取父组件实例, 在第一层component获取到的是页面组件",
            "itemtype": "method",
            "name": "getParentComponent",
            "since": "1.6.2",
            "example": [
                "\n\n 方法1: \n           var distance = bui.history.getParentComponent();\n       \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 261,
            "description": "获取父组件实例, 在第一层component获取到的是页面组件",
            "itemtype": "method",
            "name": "getParentParams",
            "since": "1.6.2",
            "example": [
                "\n\n 方法1: \n           var distance = bui.history.getParentParams();\n       \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 281,
            "description": "获取插入页面的实例",
            "itemtype": "method",
            "name": "getPage",
            "params": [
                {
                    "name": "id",
                    "description": "[ id 或者模块名, 不传则是最后一次打开的实例 ]",
                    "type": "String"
                },
                {
                    "name": "field] [默认: exports 字段, 可以不传",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n 方法: \n\n           var distance = bui.history.getPage(\"pages/list\");\n       \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 324,
            "description": "在模块内部获取对话框的实例",
            "itemtype": "method",
            "name": "getPageDialog",
            "params": [
                {
                    "name": "id",
                    "description": "[获取编译后的组件实例,如果有return, 就能拿到该对象]",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n 方法1: 获取编译后的实例\n\n           var distance = bui.history.getPageDialog(module.id);\n           distance.close();\n       \n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 574,
            "description": "刷新页面",
            "itemtype": "method",
            "name": "refresh",
            "example": [
                "\n\n           bui.history.refresh();\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 659,
            "description": "检测有没有当前页面历史记录",
            "itemtype": "method",
            "name": "check",
            "params": [
                {
                    "name": "页面id,或者url,或者模块id",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //  var hasLoadLogin = bui.history.check(\"pages/login/login.html\");\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 676,
            "description": "检测component标签是否已经加载",
            "itemtype": "method",
            "name": "checkComponent",
            "params": [
                {
                    "name": "id] [组件的id",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //  var hasLoad = bui.history.checkComponent(\"tab1\");\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 694,
            "description": "检测模块有没有以 page 方式加载",
            "itemtype": "method",
            "name": "checkPage",
            "since": "1.6.0 20200415",
            "params": [
                {
                    "name": "id] [组件的模块名,或者id",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //  var hasLoad = bui.history.checkPage(\"pages/login/login\");\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.history.js",
            "line": 726,
            "description": "清空历史记录",
            "itemtype": "method",
            "name": "epmty",
            "example": [
                "\n\n           //  var hasLoadLogin = bui.history.epmty();\n\n"
            ],
            "class": "bui.history",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 119,
            "description": "<p>设置或者获取模块之间的依赖关系</p>\n<p>如果define了一个自定义名称的模块,则需要在首页用map方法,声明该模块的script或callback属性</p>",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "baseUrl] [默认:\"\" 脚本资源的公共路径",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "modules] [默认:{} 模块的配置存放在modules对象中",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "modules.main] [默认:{} router路由默认定义了一个main模块",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "modules.main.moduleName",
                            "description": "[默认:\"main\" 当前模块的名称等于父级名 ]",
                            "type": "String"
                        },
                        {
                            "name": "modules.main.template",
                            "description": "[默认:\"\" 模板名称,用于路由的模板加载 ]",
                            "type": "String"
                        },
                        {
                            "name": "modules.main.script",
                            "description": "[默认:\"\" 当前模块的加载脚本 ]",
                            "type": "String"
                        },
                        {
                            "name": "modules.main.style] [默认:[] 加载模块的样式资源,也可以使用load方法单独加载",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "modules.main.depend] [默认:[] 模块的依赖名,如果define时没有声明名称,则依赖名为该脚本的路径去掉.js",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n          例子1: 获取所有模块的配置信息\n          var map = loader.map();\n\n          例子2: 声明单个模块;\n\n          loader.map({\n              moduleName: \"main\",\n              template: \"pages/main/main.html\",\n              script: \"pages/main/main.js\"\n          })\n\n          例子3: 定义多个模块,并修改路径\n          loader.map({\n            baseUrl: \"\",\n            modules: {\n              // 自定义模块名\n              \"main\": {\n                moduleName: \"main\",\n                template: \"pages/main/main.html\",\n                script: \"pages/main/main.js\"\n              }\n            }\n          })\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 216,
            "description": "定义公共全局方法",
            "itemtype": "method",
            "name": "global",
            "since": "1.6.2",
            "params": [
                {
                    "name": "callback",
                    "description": "[定义一个回调方法,返回一个对象, 或者直接使用返回对象的方式 ]",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "[只能返回一个对象]",
                "type": "Object"
            },
            "example": [
                "\n\n           1. 定义 // common.js 使用这个方法构建全局方法, 最简单也可以直接返回一个对象`loader.global({test:function(){}})`\n           loader.global(function(global){\n\n               // global: 为上次执行的依赖\n               // 返回一个对象\n               return {\n                   test: function(){\n                       console.log(\"test\");\n                   },\n                   test2: function(){\n                       console.log(\"test2\");\n                   }\n               }\n           })\n\n           // 2. 推荐: 局部调用\n           loader.define(function(require,export,module,global){\n               global.test();\n\n           })\n\n           1.6.3 全局调用: \n           loader.global().test();"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 261,
            "description": "<p>获取模块</p>",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "[通过模块名称,获取模块信息]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Object"
            },
            "example": [
                "\n\n           var main = loader.get(\"main\")"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 276,
            "description": "<p>设置模块</p>",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "[ 模块名 ]",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "[ 模块的路径 {template:\"\",script:\"\"}]",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n           // 修改首页为登录页, 需要在window.router 后面\n           loader.set(\"main\",{\n               template: \"pages/login/login.html\",\n               script: \"pages/login/login.html\"\n           })"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 395,
            "description": "<p>销毁一个模块</p>",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "name] [模块的自定义名称,可以省略,自定义模块名以后,需要用map声明该模块的script属性,或者callback方法",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "depend] [模块的依赖模块,可以省略, 模块名不含.js",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "[注册回调,如果有return值, 可以抛出给其它模块调用 ]",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ 返回值用于公共使用 ]",
                "type": "Object"
            },
            "example": [
                "\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 430,
            "description": "<p>define是bui.loader实例的一个方法,用于定义模块, 1.5.3新增定义页面的生命周期</p>\n<p>一个js对应一个 define ,可以定义一个匿名的模块,或者自定义依赖的模块,用法跟requirejs类似,</p>\n<p>自定义模块名以后,需要用map声明该模块的script属性,或者callback方法</p>",
            "itemtype": "method",
            "name": "define",
            "params": [
                {
                    "name": "moduleName] [模块的自定义名称,可以省略, 如果是定义该模块的生命周期,参考例子5. 1.5.3新增.",
                    "description": "",
                    "type": "String|object",
                    "optional": true
                },
                {
                    "name": "depend] [模块的依赖模块,可以省略, 模块名不含.js",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "[注册回调,如果有return值, 可以抛出给其它模块调用 ]",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "[ 返回值用于公共使用 ]",
                "type": "Object"
            },
            "example": [
                "\n\n\n       例子1: 注册首页的回调 pages/main/main.js\n       提示: pages/main/main.js 文件, 定义了一个匿名模块,匿名模块的模块名取.js前面的路径名,确保唯一\n\n       // 最简单的匿名定义 loader.define\n       loader.define(function(require,exports,module){\n\n           // require : 相当于 loader.require, 获取依赖的模块\n           // module : 拿到当前模块信息\n\n           // 可以通过 return 把希望给其它页面调用的方法抛出来\n           return {\n\n           }\n       })\n\n       例子2: 直接定义返回的对象, 模块名同样是路径名\n       loader.define({\n         test: \"console\"\n       })\n\n       例子3: 定义模块的依赖,如果模块未定义固定名称,则路径.html前面是默认的模块名称\n       // require,exports,module 在依赖后面顺序下来,不是必须\n       // 当前模块依赖于page2\n       loader.define([\"pages/page2/page2\"],function(page2,require,exports,module){\n           // 拿到依赖的模块,取名为page2\n           console.log(page2)\n           // 可以通过 return 把希望给其它页面调用的方法抛出来\n           return {\n\n           }\n       })\n\n       例子4: 定义一个自定义名称的模块\n       // 当前模块名为 page2 , 则别的模块要依赖page2的时候,使用自定义的名称\n       loader.define(\"page2\",function(){\n           // 可以通过 return 把希望给其它页面调用的方法抛出来\n           return {\n\n           }\n       })\n\n       // 需要在index.html 路由初始化前,先声明该模块的脚本,或者回调\n       loader.map({\n           moduleName: \"page2\",\n           template: \"pages/page2/page2.html\",\n           script: \"pages/page2/page2.js\"\n       })\n\n       例子5: 1.5.3新增 定义页面的生命周期\n       loader.define({\n           moduleName: \"\",     // 是否是自定义的模块名, 没有则不要这个参数\n           depend: [],         // 是否有依赖的模块, 没有则不要这个参数\n           beforeCreate: function(){\n               // 只在第一次创建的时候执行\n               console.log(\"beforeCreate\")\n           },\n           created: function(){\n               // 只在第一次创建的时候执行\n               console.log(\"beforeCreate\")\n           },\n           beforeLoad: function(){\n               // 每次跳转前执行, 注意:这里return false 并不能阻止页面跳转及执行, 如果要阻止应该在 bui.load({beforeLoad:function(){ return false; }})\n               console.log(\"beforeCreate\")\n           },\n           loaded: function(require,export,module){\n               // 每次跳转时执行, loader.require 要加载当前模块,需要在这里抛出方法.\n               console.log(\"loaded\")\n           },\n           show: function(e){\n               \n               // 每次跳转,后退后执行\n               console.log(e.type ,\"show\")\n           },\n           hide: function(){\n               // 每次跳转,后退后执行上一个页面的hide\n               console.log(\"hide\")\n           },\n           beforeDestroy: function(){\n               // 每次后退前执行\n               console.log(\"beforeDestroy\")\n           },\n           destroyed: function(){\n               // 每次后退后执行\n               console.log(\"destroyed\")\n           }\n       })\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 788,
            "description": "<p>获取依赖的实例,异步,在同一次依赖加载里面,如果该实例已经重复初始化,不会重复执行.</p>",
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "depend",
                            "description": "[模块的依赖模块,可以是数组或者模块名 ]",
                            "type": "Array|string"
                        },
                        {
                            "name": "callback",
                            "description": "[加载模块成功以后,执行回调 ]",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ loader ]",
                "type": "Object"
            },
            "example": [
                "\n\n           例子1: 加载单个模块\n\n           loader.require(\"main\",function (main) {\n             console.log(main)\n           })\n\n           例子2: 加载多个模块\n           loader.require([\"main\",\"page2\"],function (main,page2) {\n             console.log(main)\n             console.log(page2)\n           })\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1147,
            "description": "<p>检测模块名的加载状态,加载完成,该模块会有一个export对象,就是callback的回调</p>",
            "itemtype": "method",
            "name": "checkLoad",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "modules] [ 模块名称, 如果不传,则检测所有加载的模块",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ 全部创建完成以后会返回 true ]",
                "type": "Boolean"
            },
            "example": [
                "\n\n           例子1: 检测所有模块是否都加载完毕\n\n           var bool = loader.checkLoad([\"main\"]);\n           console.log(bool)\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1204,
            "description": "<p>1.6.0 新增, 页面加载, require加载脚本, load 加载模板跟执行脚本, 每次调用都执行一次</p>",
            "itemtype": "method",
            "name": "load",
            "since": "1.6.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "[ 模板需要加载到哪个容器下 ]",
                            "type": "String|object"
                        },
                        {
                            "name": "url",
                            "description": "[ 一般是页面的路径,或者模块名 ]",
                            "type": "String"
                        },
                        {
                            "name": "param",
                            "description": "[ 传参给组件, 可以这样传 { id:\"111\"} ]",
                            "type": "Object"
                        },
                        {
                            "name": "script] [ 可选,如果模板跟模块如果是分离的,则需要指明模块的路径,建议一般使用同名规范.",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "beforeLoad] [ 加载前的回调, return false 则不执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "loaded] [ 加载成功以后的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\n           例子1: \n           html:\n           <div id=\"tab1\"></div>\n\n           js: 把模板加载进来并执行模块脚本\n           loader.load({\n               id:\"#tab1\",\n               url:\"pages/main/home.html\"\n           });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1390,
            "description": "<p>1.6.0新增, 编译页面 component标签, 默认路由跳转的时候就会编译, 一般无需手动处理</p>",
            "itemtype": "method",
            "name": "component",
            "since": "1.6.0",
            "params": [
                {
                    "name": "id",
                    "description": "[ component 本身id ]",
                    "type": "String|object"
                },
                {
                    "name": "loaded] [ 每次编译完一个commponent执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "compiled] [ 编译完同级1个或多个commponent后执行,存在嵌套则会多次执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           例子1: \n\n           html: \n           <component id=\"slide\" name=\"pages/components/slide/index\"></component>\n\n           js: \n           loader.component({\n               id:\"#slide\"\n           });\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1610,
            "description": "<p>1.6.0新增, 编译容器下的 所有component标签 一般无需使用, router(默认needComponent:true), store(默认needComponent:false), page(默认needComponent:false) </p>",
            "itemtype": "method",
            "name": "components",
            "since": "1.6.0",
            "params": [
                {
                    "name": "id",
                    "description": "[ 哪个容器下的 ]",
                    "type": "String|object"
                },
                {
                    "name": "param",
                    "description": "[ 动态传参 1.6.2新增, 同名会覆盖属性上的参数 ]",
                    "type": "Object"
                },
                {
                    "name": "beforeLoad] [ 每次模块加载前执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "loaded] [ 每次编译完一个commponent执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "compiled] [ 编译完同级1个或多个commponent后执行,存在嵌套则会多次执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           例子1: \n\n           html: \n           <div id=\"coms\">\n               <component name=\"pages/components/slide/index\"></component>\n               <component name=\"pages/components/list/index\"></component>\n           </div>\n\n           js: \n           loader.components({\n               id:\"#coms\"\n           });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1697,
            "description": "<p>加载之前延迟加载的组件</p>",
            "itemtype": "method",
            "name": "delay",
            "since": "1.6.0",
            "params": [
                {
                    "name": "id",
                    "description": "[ 哪个容器下的 ]",
                    "type": "String|object"
                },
                {
                    "name": "param] [ 动态传参 1.6.2新增, 同名会覆盖属性上的参数",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "everytime] [ 1.6.2新增 是否每次都执行, 默认 false | true",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "loaded] [ 每次编译完一个commponent执行,存在嵌套则会多次执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "compiled] [ 编译完同级1个或多个commponent后执行,存在嵌套则会多次执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           例子1: \n\n           html: \n           <component id=\"delayCom\" name=\"pages/components/slide/index\" delay=\"true\"></component>\n           \n           js: \n           loader.delay({\n               id:\"#delayCom\",\n           });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1823,
            "description": "<p>1.6.0新增, 编译容器下的 多个view标签, 一般无需使用, router(默认needView:false), store(默认needView:true), page(默认needView:false) </p>",
            "itemtype": "method",
            "name": "views",
            "since": "1.6.0",
            "params": [
                {
                    "name": "id",
                    "description": "[ 哪个容器下的 ]",
                    "type": "String|object"
                },
                {
                    "name": "loaded] [ 每次编译完一个commponent执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "compiled] [ 编译完同级1个或多个commponent后执行,存在嵌套则会多次执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           例子: \n           html: \n           <div id=\"views\"> \n               <view name=\"pages/views/slide/index\"></view>\n               <view name=\"pages/views/list/index\"></view>\n           </div>\n\n           js: \n           loader.views({\n               id:\"#views\"\n           });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 1861,
            "description": "<p>1.6.0新增, 编译页面 view标签, 把模板加载进来, 默认只编译一次,一般不需要调用, view标签主要配合 bui.store 的mixins而来, 自带解析view标签</p>",
            "itemtype": "method",
            "name": "view",
            "since": "1.6.0",
            "params": [
                {
                    "name": "id",
                    "description": "[ view标签本身 ]",
                    "type": "String|object"
                },
                {
                    "name": "loaded] [ 每次编译完commponent执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "compiled] [ 编译完同级commponent执行,存在嵌套则会多次执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           例子: \n           html: \n           <view id=\"views\" name=\"pages/views/slide/index\"></view>\n\n           js: \n           loader.view({\n               id:\"#views\"\n           });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2019,
            "description": "<p>动态加载脚本资源,或者css资源,1.5.2 新增html的加载</p>",
            "itemtype": "method",
            "name": "import",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "src] [ html,脚本或者样式路径,也可以是数组",
                            "description": "",
                            "type": "String|array",
                            "optional": true
                        },
                        {
                            "name": "successCallback] [ 加载成功以后执行,如果是数组,只在最后一个执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ 全部创建完成以后会返回 true ]",
                "type": "Boolean"
            },
            "example": [
                "\n\n           例子1: 动态加载单个样式\n\n           loader.import(\"main.css\",function(src){\n             // 创建成功以后执行回调\n           });\n\n           例子2: 动态加载单个脚本\n\n           loader.import(\"main.js\",function(src){\n             // 创建成功以后执行回调\n           });\n\n           例子3: 动态加载多个脚本\n\n           loader.import([\"js/plugins/baiduTemplate.js\",\"js/plugins/map.js\"],function(src){\n             // 创建成功以后执行回调\n           });\n\n           例子4: 1.5.2新增, 动态加载模板,回调每次都执行, 如果放在 loader.require 里面执行,则默认只初始化一次;\n\n           loader.import(\"pages/ui/list.html\",function(res){\n             // 拿到模板信息\n             $(\"#id\").html(res);\n           });\n\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2120,
            "description": "<p>按先后顺序同步处理加载资源</p>",
            "itemtype": "method",
            "name": "importSync",
            "since": "1.6.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url] [ 数组才有先后顺序, 多次调用 importSync 无法确定哪个先加载.",
                            "description": "",
                            "type": "String|array",
                            "optional": true
                        },
                        {
                            "name": "successCallback] [ 请求成功以后执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "failCallback] [ 请求失败以后执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ promise ]",
                "type": "Object"
            },
            "example": [
                "\n\n           例子1: \n\n           loader.importHtml([\"pages/ui/list.html\",\"pages/ui/list1.html\"],function(res){\n             // 拿到模板信息\n             $(\"#id\").html(res[0]);\n             $(\"#id2\").html(res[1]);\n           });\n\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2187,
            "description": "<p>动态加载html</p>",
            "itemtype": "method",
            "name": "importHtml",
            "since": "1.6.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url] [ html地址",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "successCallback] [ 请求成功以后执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "failCallback] [ 请求失败以后执行",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ promise ]",
                "type": "Object"
            },
            "example": [
                "\n\n           例子1: \n\n           loader.importHtml(\"pages/ui/list.html\",function(res){\n             // 拿到模板信息\n             $(\"#id\").html(res);\n           });\n\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2380,
            "description": "<p>动态加载带id的css, 可以用来更换皮肤</p>",
            "itemtype": "method",
            "name": "importCss",
            "since": "1.6.2",
            "params": [
                {
                    "name": "url] [ link的地址",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id] [ 创建的id",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id] [ 创建的id",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[ promise ]",
                "type": "Object"
            },
            "example": [
                "\n\n           例子1: \n           // 引入新皮肤\n           loader.importCss(\"css/bui-skin.css\",\"deepskin\");\n           // 删除新皮肤\n           $(\"#deepskin\").remove();\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2479,
            "description": "为模块绑定事件,比方依赖的模块是异步的,这个时候可以监听该数据请求结束以后再执行.",
            "itemtype": "event",
            "name": "on",
            "since": "1.5.3",
            "params": [
                {
                    "name": "type] [关闭订阅事件 例如: success",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             loader.on(\"success\",function () {\n                 // 点击的菜单\n                 console.log(this);\n             });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2510,
            "description": "只绑定一次事件",
            "itemtype": "event",
            "name": "one",
            "since": "1.6.2",
            "params": [
                {
                    "name": "type] [关闭订阅事件 例如: success",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             loader.one(\"success\",function () {\n                 // 点击的菜单\n                 console.log(this);\n             });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2532,
            "description": "在父层获取子组件的处理, 等待多个模块完成后触发一次",
            "itemtype": "event",
            "name": "wait",
            "since": "1.6.2",
            "params": [
                {
                    "name": "type] [组件的id",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             <component id=\"list\" name=\"pages/components/list\"></component>\n\n             // 等等list编译完成触发\n             loader.wait([\"list\"],function (list) {\n                 // list 组件的实例\n                 console.log(list.exports);\n             });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2557,
            "description": "在父层获取子组件的处理, 等待多个模块完成后触发一次",
            "itemtype": "event",
            "name": "waited",
            "since": "1.6.2",
            "params": [
                {
                    "name": "type] [组件的id",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             <component id=\"list\" name=\"pages/components/list\"></component>\n\n             // 等等list编译完成触发\n             loader.waited([\"list\"],function (list) {\n                 // list 组件的实例\n                 console.log(list);\n             });\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2600,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.5.3",
            "params": [
                {
                    "name": "type] [关闭订阅事件 例如: success",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           loader.off(\"success\");\n\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.loader.js",
            "line": 2626,
            "description": "触发自定义事件, 名称不能跟component 的id相同. componet id 内部会自动触发",
            "itemtype": "event",
            "name": "trigger",
            "since": "1.5.3",
            "params": [
                {
                    "name": "type] [自定义事件, 例如: \"success\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "args] [传过去的参数,可以有多个",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           loader.trigger(\"aaa\")\n"
            ],
            "class": "bui.loader",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 233,
            "description": "重新编译执行, 默认打开第一次已经编译过了, 无需继续编译",
            "itemtype": "method",
            "name": "compile",
            "chainable": 1,
            "example": [
                "\n\n               // 切换\n               uiPage.compile();\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 261,
            "description": "重新加载",
            "itemtype": "method",
            "name": "reload",
            "params": [
                {
                    "name": "option] [跟 初始化一样的参数, 也可以单独传参数就好",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n               // 重新加载\n               uiPage.reload();\n               \n               // 重新加载并传参\n               uiPage.reload({\n                   param: {\n                       keyword: \"new word\"\n                   }\n               });\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 328,
            "description": "切换展示, 打开就关闭,关闭就打开",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "onOpen] [打开后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onClose] [关闭后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n               // 切换\n               uiPage.toggle();\n               \n               // 切换加回调\n               uiPage.toggle(function(){\n                   // 打开执行\n               },function(){\n                   // 关闭执行\n               });\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 357,
            "description": "打开的状态",
            "itemtype": "method",
            "name": "isOpen",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\n               // 切换\n               var status = uiPage.isOpen();\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 371,
            "description": "关闭",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "callback] [关闭后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n               // 关闭\n               uiPage.close();\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 411,
            "description": "移除对话框",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "callback] [关闭后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n               // 关闭\n               uiPage.remove();\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.page.js",
            "line": 429,
            "description": "打开",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "callback] [打开后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n               // 打开\n               uiPage.open();\n               \n"
            ],
            "class": "bui.page",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 273,
            "description": "路由的历史记录对象(废弃), 1.6.x 以后使用 bui.history.xxx 替代 router.history",
            "itemtype": "method",
            "name": "history",
            "since": "1.4.2",
            "static": 1,
            "return": {
                "description": "[option]\n         {object.get} [获取历史记录]\n         {object.getLast} [获取最后一个历史记录]\n         {object.check} [ 1.5.4新增, 检测有没有当前页面的历史记录]",
                "type": "Object"
            },
            "example": [
                "\n\n           var _history = router.history.get();\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 528,
            "description": "路由初始化,用于实例化以后的配置参数修改,参数同上",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          // 路由初始化, 默认会加载main模块\n           router.init({\n               id: \"#bui-router\"\n           })\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 626,
            "description": "[重新设置路由宽高 ]",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.1",
            "example": [
                "\n\n           // 重新设置路由宽高\n           router.resize();\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 1035,
            "description": "[预加载页面及资源,webapp预加载有助于网络较慢时,或者网络不通时,点击无法跳转响应等问题. ]",
            "itemtype": "method",
            "name": "preload",
            "since": "1.4.2",
            "params": [
                {
                    "name": "option",
                    "description": "[description]",
                    "type": "Object|array",
                    "props": [
                        {
                            "name": "url",
                            "description": "[缓存的模板地址,会自动缓存模板对应的脚本文件]",
                            "type": "String"
                        },
                        {
                            "name": "style] [非必须,缓存样式文件",
                            "description": "",
                            "type": "String|array",
                            "optional": true
                        },
                        {
                            "name": "script] [非必须,缓存脚本文件,跟模板同名以外的脚本",
                            "description": "",
                            "type": "String|array",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ 返回一个 Deferred 对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n           // 预加载一个页面\n           router.preload({ url: \"pages/page2/page2.html \" });\n\n           // 预加载多个页面\n           router.preload([{\n               url: \"pages/about/index.html\"\n             },{\n               url: \"pages/router/index.html\"\n           }]).then(function () {\n               // 全部加载以后执行\n           })\n\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 1151,
            "description": "页面跳转, 也支持定义好的模块跳转, 保持跟 bui.load一致",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "[页面跳转的地址,支持两种跳转方式, 一种是直接输入跳转的完整地址,一种是通过map方法注册页面key值,都要保持唯一]",
                            "type": "String"
                        },
                        {
                            "name": "param",
                            "description": "[传过去新页面的参数]",
                            "type": "Object"
                        },
                        {
                            "name": "replace",
                            "description": "[是否是替换当前页面]",
                            "type": "Boolean"
                        },
                        {
                            "name": "autoInit",
                            "description": "[1.5.2 默认是true, 自动计算 main 的高度, 如果跳转的页面有list,或者tab, 就可以不需要自动初始化]",
                            "type": "Boolean"
                        },
                        {
                            "name": "iframe",
                            "description": "[1.4.2新增支持iframe加载外部html]",
                            "type": "Boolean"
                        },
                        {
                            "name": "callback",
                            "description": "[1.4.6新增, 跳转后的回调]",
                            "type": "Boolean"
                        },
                        {
                            "name": "beforeLoad] [1.5.1默认: null 跳转前触发, 如果全局有,默认使用全局判断, 返回true 则忽略全局判断.",
                            "description": "",
                            "type": "Function||boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n         // 方法: 模块名为: pages/page2/page2\n\n           router.load({ url: \"pages/page2/page2.html\", param: {} });\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 1992,
            "description": "局部加载, 1.5.6以后推荐使用 loader.load ,可以单页多页使用",
            "itemtype": "method",
            "name": "loadPart",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "[ 加载的容器 ]",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "[ 加载的地址,可以是一个模块 ]",
                            "type": "String"
                        },
                        {
                            "name": "param] [ 传递给该模块的参数",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "[ 新增1.4.2 返回一个 Deferred 对象 ]",
                "type": "Object"
            },
            "chainable": 1,
            "example": [
                "\n\n 方法1: 加载某个模块到页面的id=part2, 模块名为: pages/page2/page2\n\n           router.loadPart({ id:\"#part2\", url: \"pages/page2/page2.html \"});\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2098,
            "description": "页面返回,支持回调,跟返回多层",
            "itemtype": "method",
            "name": "back",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "index] [默认:-1, 后退1层 ,负数,如果后退的层级大于历史记录,则退回到首页",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "name] [ 1.4.1新增 指定模块名称,该模块如果未存在,则后退一层",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "beforeBack] [1.5.1默认: null 每次后退前触发, 如果返回 false 则不后退, 不返回或者返回true 都会后退.",
                            "description": "",
                            "type": "Function||boolean",
                            "optional": true
                        },
                        {
                            "name": "callback] [后退以后执行回调,回调里可以拿到后退模块的return值",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           方法1:\n\n           router.back();\n\n           方法2: 后退上2页\n\n           router.back({ index: -2 });\n\n           方法3: 后退以后刷新\n\n           router.back({\n             callback: function() {\n               router.refresh();\n             }\n           });\n\n           方法4: 后退以后执行当前模块的方法\n\n           router.back({\n             callback: function(mod) {\n               mod.init();\n             }\n           });\n\n           方法5: 全局监听后退事件\n           router.on(\"back\",function (e) {\n               // 如果回退到首页则刷新页面\n                 loader.require([\"main\"],function(main){\n                   // 刷新main\n                   main.init()\n                 })\n           })\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2329,
            "description": "页面返回,支持回调,跟返回多层",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "销毁某个页面",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           方法1:\n\n           router.destroy(\"page\");\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2436,
            "description": "刷新当前页",
            "itemtype": "method",
            "name": "refresh",
            "example": [
                "\n\n           // 方法:\n           router.refresh();\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2461,
            "description": "替换当前页面,为新页面",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "[加载的地址]",
                            "type": "String"
                        },
                        {
                            "name": "param] [传参",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n\n           router.replace({\n               url: \"pages/page3/page3.html\"\n           });\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2490,
            "description": "获取页面的参数,可以直接使用 bui.getPageParams() 方法获取",
            "itemtype": "method",
            "name": "getPageParams",
            "return": {
                "description": "option [返回对象]",
                "type": "Object"
            },
            "example": [
                "\n\n 方法:\n\n           var params = router.getPageParams();\n\n\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2511,
            "description": "[获取当前页面下的局部模块参数]",
            "itemtype": "method",
            "name": "getPartParams",
            "params": [
                {
                    "name": "id] [loadPart 局部加载的id, 1.5.2 可以不传,默认取最后一次执行的模块参数",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "since": "1.4.2",
            "return": {
                "description": "[返回得到的参数]",
                "type": "[object]"
            },
            "example": [
                "\n\n           loader.define(function(require,exports,module) {\n\n               var params = router.getPartParams();\n\n           })\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2537,
            "description": "默认检查模块是否已经加载过,防止事件重复绑定",
            "itemtype": "method",
            "name": "isLoad",
            "params": [
                {
                    "name": "pid] [检查某个模块是否已经加载过",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\n           var isLoad = router.isLoad(\"main\");\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2677,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n           var option = router.option();\n\n           //获取某个参数\n           var effect = router.option( \"effect\" );\n\n           //修改一个参数\n           router.option( \"effect\",\"cover\" );\n\n           //修改多个参数\n           router.option( {\"effect\":\"cover\"} );\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2703,
            "description": "为控件绑定事件,以下事件均为全局事件.\n全局事件建议写在index.js监听, 如果写在当前模块里面监听,当路由的参数cache=false时,需要先off掉,否则会有加载两次的,如果cache=true,相同模板只执行1次,则不需要off",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [事件类型: \"init\" | \"refresh\"(刷新后触发) | \"loadfail\"(加载页面失败触发) | \"beforeload\"<del>\"loadbefore\"</del>(页面加载之前) | \"load\"(模块加载成功后触发,相同模板只加载一次) | \"back\"(后退以后触发) | \"beforeback\" <del>\"backbefore\"</del>(后退前触发) | \"complete\"(页面完成时触发,load的时候就会触发) | \"pageshow\" 页面显示的时候 |\"pagehide\" 页面切换的时候  | \"resize\" 改变窗口的时候 | 1.5.3 新增监听某个页面显示的时候触发 \"pageshow-main\" main为首页模块名,其它页面默认是路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             router.on(\"refresh\",function () {\n                 // 点击的菜单\n                 console.log(this);\n             });\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2725,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [事件类型: \"init\" | \"refresh\"(刷新后触发) | \"loadfail\"(加载页面失败触发) | \"beforeload\"<del>\"loadbefore\"</del>(页面加载之前) | \"load\"(模块加载成功后触发,相同模板只加载一次) | \"loadpart\"(局部加载模块触发,相同模板只加载一次) | \"back\"(后退以后触发) | \"beforeback\" <del>\"backbefore\"</del>(后退前触发) | \"complete\"(页面完成时触发,load的时候就会触发) | \"pageshow\" 页面显示的时候 |\"pagehide\" 页面切换的时候 | \"resize\" 改变窗口的时候 | 1.5.3 新增监听某个页面显示的时候触发 \"pageshow-main\" main为首页模块名,其它页面默认是路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 监听事件以后执行",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           router.off(\"refresh\");\n\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2751,
            "description": "获取最后一个历史记录的模块信息,可以用于检测当前在某个模块下",
            "itemtype": "method",
            "name": "currentModule",
            "since": "1.4.2",
            "return": {
                "description": "[{ pid: }]",
                "type": "Object"
            },
            "example": [
                "\n           var currentModule = router.currentModule();\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2766,
            "description": "<del>获取当前页面下的DOM对象, 常用于当前模块事件绑定,\n防止重复加载相同模块,导致事件重复绑定, 也适用于控件的重复,</del> 1.5以后，直接使用 router.$ 替换 $ 选择器就可以了",
            "itemtype": "method",
            "name": "currentPage",
            "since": "1.4.2",
            "return": {
                "description": "[DOM对象]",
                "type": "Object"
            },
            "example": [
                "\n\n           var currentPage = router.currentPage();\n\n           // 绑定当前区域的按钮\n           $(currentPage).on(\"click\",\".btn\",function (e) {\n             console.log(this);\n           })\n\n           // 当前区域的控件初始化\n           var currentAccordion = $(\".bui-accordion\",currentPage);\n           var uiAccordion = bui.accordion({\n               id: currentAccordion\n           });\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2795,
            "description": "单页里面的选择器,只选择当前页面的元素",
            "itemtype": "method",
            "name": "$",
            "since": "1.4.5",
            "return": {
                "description": "[$对象]",
                "type": "Object"
            },
            "example": [
                "\n\n           // 比方当前页的事件绑定\n           router.$(\"#id\").on(\"click\",function (argument) {\n\n           })\n\n           // 比方第三方vue所在的页面需要重复加载\n           var vue = new Vue({\n               el: router.$(\"#id\")[0]\n           })\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.router.js",
            "line": 2825,
            "description": "单页里面如果需要设置footer显示隐藏,会导致初始化高度不准确,需要手动设置",
            "itemtype": "method",
            "name": "initScroll",
            "since": "1.4.3",
            "return": {
                "description": "[路由本身]",
                "type": "Object"
            },
            "example": [
                "\n\n           var currentPage = router.currentPage();\n\n           // 例如, 按钮点击的时候,需要显示底部隐藏\n           $(\".btn\").on(\"click\",function (e) {\n\n             // 获取当前页的底部\n             $(\"footer\",currentPage).hide();\n\n             // 执行一次滚动初始化\n             router.initScroll();\n\n           })\n"
            ],
            "class": "bui.router",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 624,
            "description": "[$el 返回当前 el选项的$dom, 可以直接使用jquery的操作方式]",
            "itemtype": "attribute",
            "name": "$el",
            "since": "1.5.4",
            "example": [
                "\n\n           //\n           console.log( bs.$el )"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 634,
            "description": "[$parent 返回当前 el选项的父层$dom, 可以直接使用jquery的操作方式]",
            "itemtype": "attribute",
            "name": "$parent",
            "since": "1.5.4",
            "example": [
                "\n\n           //\n           console.log( bs.$parent )"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 644,
            "description": "[$children 返回当前 el选项的缓存子集, 子集新增删除这个值还是不会改变]",
            "itemtype": "attribute",
            "name": "$children",
            "since": "1.5.4",
            "example": [
                "\n\n           //\n           console.log( bs.$children )"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 654,
            "description": "[$options 传进去的参数]",
            "itemtype": "attribute",
            "name": "$options",
            "since": "1.5.4",
            "example": [
                "\n\n           //\n           console.log( bs.$options )"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 664,
            "description": "[$refs 获取dom，在方法内可以操作dom ]",
            "itemtype": "attribute",
            "name": "$refs",
            "since": "1.5.4",
            "example": [
                "\n\n           // 页面的dom\n           <div class=\"bui-page\">\n               <main>\n                   <div ref=\"test\">通过$refs获取</div>\n               </main>\n           </div>\n           var bs = bui.store({\n               methods:{\n                   init: functioin(){\n                       console.log(this.$refs.test.innerText)\n                   }\n               }\n           })\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 687,
            "description": "[ 监听模板的数据字段,在dom每次更新以后都会处理回调,多次调用会有多个处理的\"nexttick\"回调 ]",
            "itemtype": "method",
            "name": "nextTick",
            "params": [
                {
                    "name": "callback",
                    "description": "[ 回调, 数据更新以后的在这个回调里面的方法再进行执行 ]",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 监听a变量变更的时候,触发回调\n           bs.nextTick(function () {\n               // 执行控件的初始化\n           })"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 711,
            "description": "[只在某个keyname的数据更新,触发dom更新以后再处理回调,并且只监听一次,调用一次 ]",
            "itemtype": "method",
            "name": "oneTick",
            "params": [
                {
                    "name": "keyname",
                    "description": "[ 监听某个值更新的时候触发一次 ]",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "[ 回调, 数据更新以后的在这个回调里面的方法再进行执行 ]",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 监听a变量变更的时候,触发回调, 当模板上有多个size数据的时候, 会触发多次.\n           bs.oneTick(\"size\",function () {\n               // 执行控件的初始化\n           })\n\n           // 相同键值 size ,以第一个为主, 以下函数不会执行.\n           bs.oneTick(\"size\",function () {\n               // 执行控件的初始化\n           })"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 754,
            "description": "[ watch方法跟选项的watch 表现一致,数据更新的时候执行, 还没到dom更新,这个主要是为了分离式监听]",
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "keyname",
                    "description": "[ 这个的值是 data 选项里面的值, 监听该值改变的时候, 触发这里的回调. ]",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "[ 回调, 回调里面的参数可以拿到新值跟上一个值 ]",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 监听a变量变更的时候,触发回调\n           var unwatcha = bs.watch(\"a\",function (newVal,oldVal) {\n               console.log(newVal);\n               console.log(oldVal);\n           })\n\n           1.6.2 新增 取消指定监听\n           unwatcha();\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 907,
            "description": "[compile 解析模板里面的数据选择器, 一般是 needCompile: false 才需要手动调用, 或者是TAB异步加载的公共数据]",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "el",
                    "description": "[选择器]",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 重新解析\n           bs.compile(\".bui-page\")"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 918,
            "description": "[$mount 跟 compile方法一致，这里多一个保持vue的写法，解析模板里面的数据选择器, 一般是 needCompile: false 才需要手动调用, 或者是TAB异步加载的公共数据]",
            "itemtype": "method",
            "name": "$mount",
            "params": [
                {
                    "name": "el",
                    "description": "[选择器]",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 重新解析\n           bs.$mount(\".bui-page\")"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 1045,
            "description": "[解析模板里面的{{}}, 通过这种方式的设置,值不会动态变更]",
            "itemtype": "method",
            "name": "compileHtml",
            "params": [
                {
                    "name": "el",
                    "description": "[选择器]",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 解析模板里面的{{}}\n           var html = bs.compileHtml(\"<div title=\"{{app.name}}\">{{app.name}}</div>\");\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3008,
            "description": "获取数据",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name] [ 取哪个键值的数据,不传则取全部",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          var page = bs.get(\"size\");\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3031,
            "description": "把两个不同的 bui.store 创建的实例里面data相同字段关联起来, 一般用于把父组件的参数同步给子组件",
            "itemtype": "method",
            "name": "connect",
            "since": "1.6.2",
            "params": [
                {
                    "name": "name",
                    "description": "[ store 的实例 ]",
                    "type": "Object"
                },
                {
                    "name": "field] [ 指定关联哪个字段 , 可以支持 \"xxx.xxxx\" 指定对象里面的字段",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "targetField] [ 指定目标name的哪个关联字段, 默认不需要,根据field相同字段即可, 如果为 \"\" 空字符串,则关联到该对象data上",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "bool] [ 默认true, 自动同步数据一次",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // html\n           <h3>关联1: 关联相同字段</h3>\n           <input b-model=\"page.attrs.test\" placeholder=\"\" type=\"text\">\n           <div class=\"scope1\">\n               <input b-model=\"page1.attrs.test\" placeholder=\"\" type=\"text\">\n           </div>\n           <h3>关联2: 关联到不同字段</h3>\n           <input b-model=\"page.attrs.test\" placeholder=\"\" type=\"text\">\n           <div class=\"scope1\">\n               <input b-model=\"page1.props.test\" placeholder=\"\" type=\"text\">\n           </div>\n           <h3>关联3: 关联到根路径</h3>\n           <input b-model=\"page.attrs.test\" placeholder=\"\" type=\"text\">\n           <div class=\"scope1\">\n               <input b-model=\"page1.test\" placeholder=\"\" type=\"text\">\n           </div>\n\n          // 可以在路由init以后,作为整个应用的联动数据处理\n           var bs = bui.store({\n               scope: \"page\", // 用于区分公共数据及当前数据的唯一值\n               data: {\n                   attrs: {\n                       \"test\": \"123\",\n                   }\n               },\n               methods: {},\n               watch: {},\n               computed: {},\n               templates: {},\n               mounted: function() {\n\n               }\n           })\n\n\n           var bs2 = bui.store({\n               el: \".scope1\",\n               scope: \"page1\", // 用于区分公共数据及当前数据的唯一值\n               data: {\n                   attrs: {\n                       test: \"111\"\n                   },\n                   props: {\n                       test: \"111\"\n                   },\n                   test: \"111\"\n               },\n               methods: {},\n               watch: {},\n               computed: {},\n               templates: {},\n               mounted: function() {\n\n               }\n           })\n\n\n           // 关联1: 关联多个相同字段\n           bs.connect(bs2);\n\n           // 关联2: 关联到不同字段\n           // bs.connect(bs2, \"attrs\", \"props\");\n\n           // 关联3: 关联到根路径\n           // bs.connect(bs2, \"attrs\", \"\");\n\n           \n           // 关联4: 关联指定字段\n           // bs.connect(bs2, \"attrs.test\");\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3246,
            "description": "取消两个实例之间的关联字段.",
            "itemtype": "method",
            "name": "disconnect",
            "since": "1.6.2",
            "params": [
                {
                    "name": "field] [ 指定关联哪个字段 , 可以支持 \"xxx.xxxx\" 指定对象里面的字段",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          var bs = bui.store({\n              el:\"\",\n              scope:\"\",\n              data: {\n                  test: \"2222\"\n              }\n          })\n          // 取消关联test字段, 不传则是取消所有关联的相同字段. 下次改变就不会触发bs2.test变更.\n          bs.disconect(\"test\");\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3282,
            "description": "保存数据,并会触发 通过 bs.on 监听的事件.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name] [ 存储数据在哪个键值,对象则存储多个",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value] [ 存值",
                    "description": "",
                    "type": "String|object|array",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          方法1:\n          var page = bs.set(\"size\",1);\n          // { size: 1}\n\n          会触发以下dom的变更\n          <b b-text=\"page.size\"></b>\n\n          方法2: 指定字段层级\n          var page = bs.set(\"size.num\",1);\n          // { size: { name: 1 }}\n\n          会触发以下dom的变更\n          <b b-text=\"page.size.num\"></b>\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3446,
            "description": "删除数据.并触发事件",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "name] [ 存储数据在哪个键值,对象则存储多个",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          方法1:\n          var page = bs.delete(\"size\");\n          // { size: 1}\n\n          方法2: 指定字段层级\n          var page = bs.delete(\"size.num\");\n\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3487,
            "description": "监听数据的修改, on事件监听必须在 set 数据修改之前.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name] [ 数据的字段为事件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 数据修改以后的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          // 监听 size 改变的时候触发\n           bs.on(\"size\",function(val){\n             console.log(val)  // 2\n           })\n\n           // 监听 size 下 name 改变的时候触发\n           bs.on(\"size.num\",function(val){\n             console.log(val)  // 3\n           })\n\n           // 修改 size 数据\n           bs.set(\"size\",2);\n\n           // 修改 size.num 数据\n           bs.set(\"size.num\",3);\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3525,
            "description": "监听数据的修改, 只监听一次, one事件监听必须在 set 数据修改之前.",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "name] [ 数据的字段为事件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 数据修改以后的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          // 监听 page 改变的时候触发\n           bs.one(\"page\",function(val){\n             console.log(val)  // 2\n           })\n\n           // 监听 page 下 name 改变的时候触发\n           bs.one(\"page.name\",function(val){\n             console.log(val)  // 3\n           })\n\n           // 修改 page 数据\n           bs.set(\"page\",2);\n\n           // 修改 page.name 数据\n           bs.set(\"page.name\",3);\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3563,
            "description": "取消监听某个数据",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name] [ 数据的字段为事件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 回调名,需跟原本绑定的为同一个方法才能取消",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n          var log = function(val){\n             console.log(val)  // 2\n           }\n           // 监听 page 改变的时候触发\n           bs.on(\"size\",log)\n\n           // 取消\n           bs.off(\"page\",log)\n\n           // 修改 page 数据\n           bs.set(\"page\",2);\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3597,
            "description": "手动触发",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name] [ 数据的字段为事件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          // 触发 2 为传过去的参数\n          bs.trigger(\"page\",\"2\")\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3624,
            "description": "清除键值的访问",
            "itemtype": "method",
            "name": "clearKey",
            "since": "1.5.2",
            "chainable": 1,
            "example": [
                "\n\n          bs.clearKey()\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.store.js",
            "line": 3647,
            "description": "销毁实例，不再支持双向绑定",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.5.4",
            "chainable": 1,
            "example": [
                "\n\n          bs.destroy()\n\n"
            ],
            "class": "bui.store",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 148,
            "description": "当前元素的显示状态",
            "itemtype": "method",
            "name": "isShow",
            "since": "1.3.5",
            "example": [
                "\n\n          var uiToggle = bui.toggle(\"#page\");\n              uiToggle.isShow();"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 160,
            "description": "显示动画",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "callback] [1.5.1 回调",
                    "description": "",
                    "type": "Function|string",
                    "optional": true
                },
                {
                    "name": "effect] [1.5.1 指定单次显示动画效果",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          var uiToggle = bui.toggle(\"#page\");\n              uiToggle.show();"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 231,
            "description": "隐藏动画",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "callback|effect] [1.5.1回调",
                    "description": "",
                    "type": "Function|string",
                    "optional": true
                },
                {
                    "name": "effect] [1.5.1 指定单次隐藏动画效果",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          var uiToggle = bui.toggle(\"#page\");\n              uiToggle.hide();"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 299,
            "description": "删除动画元素",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "example": [
                "\n\n          var uiToggle = bui.toggle(\"#page\");\n              uiToggle.remove();"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 314,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiToggle.destroy();\n"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 332,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiToggleWidget = uiToggle.widget();\n\n"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.toggle.js",
            "line": 347,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiToggle.option();\n\n           //获取某个参数\n           var id = uiToggle.option( \"id\" );\n\n           //修改一个参数\n           uiToggle.option( \"time\",10 );\n\n           //修改多个参数\n           uiToggle.option( {\"time\":10} );\n"
            ],
            "class": "bui.toggle",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.viewport.js",
            "line": 89,
            "description": "获取视口的宽度",
            "itemtype": "method",
            "name": "width",
            "example": [
                "\n\n           bui.ready(function(){\n               var width = window.viewport.width();\n           })\n"
            ],
            "class": "bui.viewport",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.viewport.js",
            "line": 103,
            "description": "获取视口的高度",
            "itemtype": "method",
            "name": "height",
            "example": [
                "\n\n           bui.ready(function(){\n               var height = window.viewport.height();\n           })\n"
            ],
            "class": "bui.viewport",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.viewport.js",
            "line": 116,
            "description": "获取的屏幕宽度分辨率",
            "itemtype": "method",
            "name": "screenWidth",
            "example": [
                "\n\n           bui.ready(function(){\n               var width = window.viewport.screenWidth();\n           })\n"
            ],
            "class": "bui.viewport",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.viewport.js",
            "line": 129,
            "description": "获取的屏幕高度分辨率",
            "itemtype": "method",
            "name": "screenHeight",
            "example": [
                "\n\n           bui.ready(function(){\n               var height = window.viewport.screenHeight();\n           })\n"
            ],
            "class": "bui.viewport",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/core/bui.viewport.js",
            "line": 142,
            "description": "获取高清屏的dpi",
            "itemtype": "method",
            "name": "ratio",
            "example": [
                "\n\n           bui.ready(function(){\n               var ratio = window.viewport.ratio();\n           })\n"
            ],
            "class": "bui.viewport",
            "module": "Core",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 21,
            "description": "返回存在的第1个位置,支持普通数组及JSON数组, 1.5.2 写法统一为数组在前, 1.5.2以前的版本是数组在后.",
            "itemtype": "method",
            "name": "index",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要检测的值]",
                    "type": "String"
                },
                {
                    "name": "key] [object的键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回的位置如果大于0,则存在]",
                "type": "Number"
            },
            "example": [
                "\n\n\n     1.5.2\n       //普通数组:\n       var arr = [\"hello\",\"bui\",\"hi\",\"bui\"];\n       var index = bui.array.index( arr, \"bui\" );\n\n       // console.log(index) //结果: 1\n\n       //JSON数组:\n       var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}];\n       var index = bui.array.index( arr, \"bui\", \"value\" );\n       // console.log(index) //结果: 1\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 73,
            "description": "比对数组是否已经存在,支持普通数组及JSON数组, 1.5.2 写法统一为数组在前, 1.5.2以前的版本是数组在后.",
            "itemtype": "method",
            "name": "compare",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要比对的值值]",
                    "type": "String"
                },
                {
                    "name": "key] [object的键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回true|false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n\n       //普通数组:\n       var arr = [\"hello\",\"bui\",\"hi\",\"bui\"];\n       var isExist = bui.array.compare( arr, \"bui\" );\n\n       // console.log(isExist) //结果: true\n\n       //JSON数组:\n       var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}];\n       var isExist = bui.array.compare( arr, \"bui\", \"value\" );\n       // console.log(isExist) //结果: true\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 121,
            "description": "会修改原数组, 删除数组的某个值或者对象,支持普通数组及JSON数组,并且1.5.1支持删除多个数据.  1.5.2 写法统一为数组在前, 1.5.2以前的版本是数组在后.",
            "itemtype": "method",
            "name": "remove",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要删除的值]",
                    "type": "String"
                },
                {
                    "name": "key] [object的键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回删除后的数组]",
                "type": "Array"
            },
            "example": [
                "\n\n       //普通数组:\n       var arr = [\"hello\",\"bui\",\"hi\",\"bui\"];\n       bui.array.remove( arr, \"bui\" );\n\n       // console.log(newArr) //结果: [\"hello\",\"hi\"]\n\n       //JSON数组:\n       var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}];\n       bui.array.remove( arr, \"bui\", \"value\" );\n       // console.log(newArr) //结果: [{ \"id\":1,value:\"hello\"}]\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 160,
            "description": "模糊筛选数组,支持普通数组及JSON数组,  1.5.2 写法统一为数组在前, 1.5.2以前的版本是数组在后.",
            "itemtype": "method",
            "name": "filter",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要查找的值]",
                    "type": "String"
                },
                {
                    "name": "key] [object的键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回筛选的元素]",
                "type": "Array"
            },
            "example": [
                "\n\n        //普通数组:\n        var arr = [\"hello\",\"bui\",\"hi\",\"easybui\"];\n        var newArr = bui.array.filter(arr,\"bui\");\n\n        // console.log(newArr) //结果: [\"bui\",\"easybui\"]\n\n        //JSON数组:\n        var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"easybui\"}];\n        var newArr = bui.array.filter( arr,\"bui\",\"value\" );\n        // console.log(newArr) //结果: [{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"easybui\"}]\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 214,
            "description": "返回数组的所有索引,支持普通数组及JSON数组,  1.5.2 写法统一为数组在前,值在后, 1.5.2以前的版本是值在前,数组在后.",
            "itemtype": "method",
            "name": "indexs",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要匹配的值]",
                    "type": "String"
                },
                {
                    "name": "key] [object的键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回存在的索引数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       //普通数组:\n       var arr = [\"hello\",\"bui\",\"hi\",\"bui\"];\n       var index = bui.array.indexs( arr,\"bui\" );\n\n       // console.log(index) //结果: [1,3]\n\n       //JSON数组:\n       var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}];\n       var index = bui.array.indexs( arr,\"bui\", \"value\" );\n       // console.log(index) //结果: [1]\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 262,
            "description": "去除数组的某个多余数据,支持普通数组及JSON数组,  1.5.2 写法统一为数组在前, 1.5.2以前的版本是数组在后.",
            "itemtype": "method",
            "name": "excess",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要匹配的值]",
                    "type": "String"
                },
                {
                    "name": "key] [object的键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回一个没有重复数据的数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n        //普通数组:\n        var arr = [\"hello\",\"bui\",\"hi\",\"bui\"];\n        var newArr = bui.array.excess( arr,\"bui\" );\n\n        // console.log(newArr) //结果: [\"hello\",\"bui\",\"hi\"]\n\n        //JSON数组:\n        var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"bui\"}];\n        var newArr = bui.array.excess( arr,\"bui\",\"value\" );\n        // console.log(newArr) //结果: [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}]\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 314,
            "description": "数组去重,支持普通数组及JSON数组",
            "itemtype": "method",
            "name": "uniq",
            "since": "1.5.1",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "key] [数组里,如果是object,进行去重的值在哪个键名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回一个没有重复数据的数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n        //普通数组:\n        var arr = [\"hello\",\"bui\",\"hi\",\"bui\"];\n        var newArr = bui.array.uniq( arr );\n\n        // console.log(newArr) //结果: [\"hello\",\"bui\",\"hi\"]\n\n        //JSON数组:\n        var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"bui\"}];\n        var newArr = bui.array.uniq( arr, \"value\" );\n        // console.log(newArr) //结果: [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}]\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 353,
            "description": "复制数组某一部分, 建议使用数组的 slice 方法处理",
            "itemtype": "method",
            "name": "copy",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "from] [从第几个复制,默认为0,复制整个数组则不用传",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "length] [复制多少个,不填则是到最后一个",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回一个新的数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       var arr = [\"hello\",\"bui\",\"hi\",\"easybui\"];\n       var newArr = bui.array.copy( arr, 1 );\n       var newArr2 = bui.array.copy( arr, 1,2 );\n\n       // console.log(newArr) //结果: [\"bui\",\"hi\",\"easybui\"]\n       // console.log(newArr2) //结果: [\"bui\",\"hi\"]\n\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 389,
            "description": "清空数组",
            "itemtype": "method",
            "name": "empty",
            "since": "1.5.1",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "[空数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       var arr = [\"hello\",\"bui\",\"hi\",\"easybui\"];\n       bui.array.empty( arr );\n\n       结果 arr: []\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 414,
            "description": "替换数组",
            "itemtype": "method",
            "name": "replace",
            "since": "1.5.1",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "[空数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       var arr = [\"hello\",\"hi\",\"easybui\"];\n       bui.array.replace( arr, [\"new\",\"bui\"]);\n\n       // 结果 arr: [\"new\",\"bui\"]\n\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 444,
            "description": "合并2个数组, A数组+B数组+C数组 并会触发 A数组的更新",
            "itemtype": "method",
            "name": "merge",
            "since": "1.5.1",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "arrayA",
                    "description": "[支持多个数组]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "[空数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       var arr = [\"hello\",\"hi\",\"easybui\"];\n\n       bui.array.merge( arr, [\"new\",\"bui\"]);\n\n       // 结果 arr: [\"hello\",\"hi\",\"easybui\",\"new\",\"bui\",\"easy\"]\n\n       // 支持对象合并相同字段,不同字段的则会新增\n       var arr = [{id:\"1\",name:\"test1\"},{id:\"2\",name:\"test2\"}];\n       bui.array.merge(arr,[{id:\"1\",sex:\"男\"},{id:\"3\",name:\"test3\"}],\"id\")\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 514,
            "description": "返回存在的值,支持普通数组及JSON数组,get只取第一个完全匹配的值",
            "since": "1.5.2",
            "itemtype": "method",
            "name": "get",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要查找的值]",
                    "type": "String"
                },
                {
                    "name": "key] [如果是object,需要传该值在哪个键名里",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回筛选的第一个符合的元素]",
                "type": "Array"
            },
            "example": [
                "\n\n        //普通数组:\n        var arr = [\"hello\",\"bui\",\"hi\",\"easybui\"];\n        var item = bui.array.get( arr,\"bui\" );\n\n        1.5.3 版本以后可以这样\n       var item = arr.$get(\"bui\" );\n       // 结果: bui 如果没有则是 undefined \n\n        //JSON数组:\n        var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"easybui\"}];\n        var item = bui.array.get( arr, \"bui\", \"value\" );\n        // console.log(newArr) //结果: { \"id\":2,value:\"bui\"}\n       \n       1.5.3 版本以后可以这样\n       var item = arr.$get(\"bui\", \"value\");\n       // 结果: { \"id\":2,value:\"bui\"} 如果没有则是 undefined \n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 560,
            "description": "返回存在的所有值,支持普通数组及JSON数组, filter返回多个匹配值,getAll获取完全匹配的数据",
            "since": "1.5.2",
            "itemtype": "method",
            "name": "getAll",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要查找的值]",
                    "type": "String"
                },
                {
                    "name": "key] [如果是object,需要传该值在哪个键名里",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回数组]",
                "type": "Array"
            },
            "example": [
                "\n\n        //普通数组:\n        var arr = [\"hello\",\"bui\",\"hi\",\"easybui\"];\n        var item = bui.array.getAll( arr,\"bui\" );\n\n        // console.log(item) //结果: [\"bui\"]\n\n        //JSON数组:\n        var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"bui\"}];\n        var item = bui.array.getAll( arr, \"bui\", \"value\" );\n        // console.log(newArr) //结果: [{ \"id\":2,value:\"bui\"},{ \"id\":3,value:\"bui\"}]\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 615,
            "description": "修改数组或数组对象里面的某个值,结合store触发数据变更, 有3个参数时,第2个是索引值或者数组某个值, 如果是对象,需要第4个参数",
            "itemtype": "method",
            "name": "set",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "key|value",
                    "description": "[ 数字索引值,或者是值, 如果是数字,设置索引, 如果是其它值则比对值 ]",
                    "type": "Number|string|object|array"
                },
                {
                    "name": "value] [ 修改的值",
                    "description": "",
                    "type": "Number|string|object",
                    "optional": true
                },
                {
                    "name": "keyname] [如果比对的是对象,则需要这个键值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[空数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       例子1: 修改第几个\n       var arr = [\"hello\",\"hi\",\"easybui\"];\n       bui.array.set( arr, 1, \"new hi\");\n       // [\"hello\",\"new hi\",\"easybui\"]\n       \n        1.5.3 版本以后可以这样\n       arr.$set(1, \"new hi\");\n       // arr 结果: [\"hello\",\"new hi\",\"easybui\"]\n\n       例子2: 修改值等于 hi 为新值 new hi\n       var arr = [\"hello\",\"hi\",\"easybui\"];\n       bui.array.set( arr, \"hi\", \"new hi\");\n       // [\"hello\",\"new hi\",\"easybui\"]\n\n        1.5.3 版本以后可以这样\n       arr.$set(\"hi\", \"new hi\");\n       // arr 结果: [\"hello\",\"new hi\",\"easybui\"]\n\n       例子3: 修改对象值\n       var arr = [{name:\"hello\"},{name:\"hi\"},{name:\"easybui\"}];\n       bui.array.set( arr, 1, {name:\"new hi\"} );\n       // [{name:\"hello\"},{name:\"new hi\"},{name:\"easybui\"}]\n\n        1.5.3 版本以后可以这样\n       arr.$set(1, {name:\"new hi\"});\n       // arr 结果: [{name:\"hello\"},{name:\"new hi\"},{name:\"easybui\"}]\n\n       例子4: 修改对象某个字段值, 需要传多一个唯一值的字段名\n\n       var arr = [{name:\"hello\"},{name:\"hi\"},{name:\"easybui\"}];\n       bui.array.set( arr, \"hi\", {name:\"new hi\"}, \"name\" );\n       // [{name:\"hello\"},{name:\"new hi\"},{name:\"easybui\"}]\n       \n        1.5.3 版本以后可以这样\n        // 单独修改某个值\n       arr.$set(\"hello\", \"hi bui\", \"name\");\n       // 修改整个对象,不同的key值则会一起合并过去\n       arr.$set(\"hi\", {name:\"new hi\"}, \"name\");\n       // arr 结果: [{name:\"hello\"},{name:\"new hi\"},{name:\"easybui\"}]\n\n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 708,
            "description": "修改所有相同的值",
            "itemtype": "method",
            "name": "setAll",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "key|value",
                    "description": "[ 数字索引值,或者是值, 如果是数字,设置索引, 如果是其它值则比对值 ]",
                    "type": "Number|string|object|array"
                },
                {
                    "name": "value] [ 修改的值",
                    "description": "",
                    "type": "Number|string|object",
                    "optional": true
                },
                {
                    "name": "keyname] [如果比对的是对象,则需要这个键值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[空数组]",
                "type": "Array"
            },
            "example": [
                "\n\n\n       例子1: 修改值等于 hi 为新值 new hi\n       var arr = [\"hello\",\"hi\",\"easybui\",\"hi\",\"hi\"];\n       bui.array.setAll( arr, \"hi\", \"new hi\");\n       // [\"hello\",\"new hi\",\"easybui\",\"new hi\",\"new hi\"]\n\n\n       例子2: 修改对象某个字段值, 需要传多一个唯一值的字段名\n       var arr = [{name:\"hello\"},{name:\"hi\"},{name:\"hi\"},{name:\"easybui\"}];\n       bui.array.setAll( arr, \"hi\", \"new hi\", \"name\" );\n       // [{name:\"hello\"},{name:\"new hi\"},{name:\"new hi\"},{name:\"easybui\"}]\n       \n\n       例子3: 替换对象\n       var arr = [{name:\"hello\"},{name:\"hi\"},{name:\"hi\"},{name:\"easybui\"}];\n       bui.array.setAll( arr, \"hi\", {name:\"new hi\",\"id\":123}, \"name\" );\n       // [{name:\"hello\"},{name: \"new hi\", id: 123},{name: \"new hi\", id: 123},{name:\"easybui\"}]\n       \n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 767,
            "description": "删除后返回索引, 会改变原有数组",
            "itemtype": "method",
            "name": "delete",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要删除的数据,值]",
                    "type": "String|array"
                },
                {
                    "name": "key] [object的键名,非object可以不用传",
                    "description": "",
                    "type": "String|number",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回删除前的所在位置]",
                "type": "Array"
            },
            "example": [
                "\n\n       //例子1: 删除值:\n       var arr = [\"hello\",\"bui\",\"hi\"];\n       bui.array.delete(arr , \"bui\" );\n\n\n       // 例子2: 删除值在哪个字段:\n       var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}];\n       bui.array.delete( arr, \"bui\", \"value\" );\n       \n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.array.js",
            "line": 832,
            "description": "删除第几个索引",
            "itemtype": "method",
            "name": "deleteIndex",
            "since": "1.5.6",
            "is_constructor": 1,
            "params": [
                {
                    "name": "array",
                    "description": "[数组]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "[要删除的索引]",
                    "type": "Number|array"
                }
            ],
            "return": {
                "description": "[返回删除的内容]",
                "type": "Array"
            },
            "example": [
                "\n\n       //例子1: 删除值:\n       var arr = [\"hello\",\"bui\",\"hi\"];\n       var newArr = bui.array.deleteIndex(arr , 0 );\n       // newArr 为删除的内容 [\"hello\"]\n\n\n       // 例子2: 删除值在哪个字段:\n       var arr = [{ \"id\":1,value:\"hello\"},{ \"id\":2,value:\"bui\"}];\n       var newArr = bui.array.deleteIndex( arr, 1 );\n       // newArr 为删除的内容  [{ \"id\":2,value:\"bui\"}]\n       \n"
            ],
            "class": "bui.array",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 16,
            "description": "日期格式化, 兼容IOS的日期格式转换",
            "itemtype": "method",
            "name": "format",
            "is_constructor": 1,
            "params": [
                {
                    "name": "datestr",
                    "description": "[ 日期格式或者时间戳 ]",
                    "type": "String"
                },
                {
                    "name": "pattern",
                    "description": "[ 格式: yyyy-MM-dd hh:mm:ss  分别代表 年-月-日 时:分:秒 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     \n           // 时间戳转日期\n     var date = bui.date.format(1584781609309,\"yyyy-MM-dd hh:mm:ss\");\n           // 2020-03-21 17:06:49\n           // 日期转日期\n     var date = bui.date.format(\"2020-3-20\",\"MM/dd\");\n           // 03/20\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 59,
            "description": "转日期对象",
            "itemtype": "method",
            "name": "convert",
            "is_constructor": 1,
            "params": [
                {
                    "name": "date",
                    "description": "[ 日期或者时间戳 ]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[返回Date对象]",
                "type": "Object"
            },
            "example": [
                "\n    \n     var date = bui.date.convert(1584781609309);\n // 返回Date对象\n\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 141,
            "description": "某个日期后多少天",
            "itemtype": "method",
            "name": "after",
            "is_constructor": 1,
            "params": [
                {
                    "name": "datestr",
                    "description": "[ 日期格式或者时间戳 ]",
                    "type": "String"
                },
                {
                    "name": "n",
                    "description": "[ 默认1, 正数为日期后多少天, 负数为日期之前多少天 ]",
                    "type": "Number"
                },
                {
                    "name": "pattern",
                    "description": "[ 默认: yyyy-MM-dd , 格式: yyyy-MM-dd hh:mm:ss  分别代表 年-月-日 时:分:秒 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     \n           var date = bui.date.after(\"2020-3-20\",5);\n           // 2020-3-25\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 168,
            "description": "某个时间后多少小时",
            "itemtype": "method",
            "name": "afterTime",
            "is_constructor": 1,
            "params": [
                {
                    "name": "timestr",
                    "description": "[ 时间 ]",
                    "type": "String"
                },
                {
                    "name": "n",
                    "description": "[ 正数为时间后多少分钟, 负数为时间之前多少分钟 ]",
                    "type": "Number"
                },
                {
                    "name": "pattern",
                    "description": "[ 默认: hh:mm , 格式: yyyy-MM-dd hh:mm:ss  分别代表 年-月-日 时:分:秒 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     \n           var time = bui.date.afterTime(\"15:00\",30);\n           // 15:30\n\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 198,
            "description": "差多少, 不用区分谁先谁后",
            "itemtype": "method",
            "name": "count",
            "since": "1.6.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "after",
                    "description": "[ 日期或时间,或数字 ]",
                    "type": "String"
                },
                {
                    "name": "before",
                    "description": "[ 日期或时间,或数字 ]",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "[ 默认: date | hour | number ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     \n           var time = bui.date.count(\"17:00\",\"12:00\",\"hour\");\n           {\n               day: 0\n               hour: 5\n               minute: 0\n               second: 0\n               tip: \"0天 05:00:00\"\n               value: 18000000\n           }\n\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 267,
            "description": "某个月有多少天",
            "itemtype": "method",
            "name": "countMonth",
            "since": "1.6.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "date",
                    "description": "[ 日期 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     \n           var howmanyday = bui.date.countMonth(\"2020-04\");\n           // 30天\n\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 293,
            "description": "某个日期为星期几, 或者周几",
            "itemtype": "method",
            "name": "toWeek",
            "is_constructor": 1,
            "params": [
                {
                    "name": "datestr",
                    "description": "[ 日期 例如: 2020-03-20 ]",
                    "type": "String"
                },
                {
                    "name": "n",
                    "description": "[ 默认不填返回 \"星期几\", 1为返回 \"周几\" ]",
                    "type": "Number|array"
                }
            ],
            "example": [
                "\n\n     var week = bui.date.toWeek(\"2020-3-20\");\n           // 星期六\n           var week = bui.date.toWeek(\"2020-3-20\",1);\n           // 周六\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 323,
            "description": "返回今天日期",
            "itemtype": "method",
            "name": "today",
            "since": "1.6.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "formate",
                    "description": "[ 输出的格式 默认: M-d ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n     var today = bui.date.today();\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.date.js",
            "line": 340,
            "description": "离现在多久,小于现在(秒,分钟,小时,天)前, 大于现在则返回 (秒,分钟,小时,天)后. 一般用于新闻的日期",
            "itemtype": "method",
            "name": "fromnow",
            "since": "1.6.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "date",
                    "description": "[ 标准日期 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n     var tips = bui.date.fromnow(\"2020-6-18 10:00\")\n           // \"32分钟前\"\n"
            ],
            "class": "bui.date",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 19,
            "description": "是否是window平台",
            "itemtype": "method",
            "name": "isWindow",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isWindow();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 32,
            "description": "是否是mac平台",
            "itemtype": "method",
            "name": "isMac",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isMac();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 45,
            "description": "是否是安卓手机",
            "itemtype": "method",
            "name": "isAndroid",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isAndroid();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 58,
            "description": "是否是Iphone",
            "itemtype": "method",
            "name": "isIphone",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isIphone();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 71,
            "description": "是否是Iphonex xs xr xsMax",
            "itemtype": "method",
            "name": "isIphoneX",
            "since": "1.6.2",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isIphoneX();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 93,
            "description": "是否是Iphone",
            "itemtype": "method",
            "name": "isIphoneFull",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isIphoneFull();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 114,
            "description": "是否是Ipad",
            "itemtype": "method",
            "name": "isIpad",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isIpad();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 127,
            "description": "IOS平台包括Iphone Ipad",
            "itemtype": "method",
            "name": "isIos",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isIos();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 140,
            "description": "微信浏览器",
            "itemtype": "method",
            "name": "isWeiXin",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isWeiXin();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.platform.js",
            "line": 153,
            "description": "BT应用",
            "itemtype": "method",
            "name": "isBingotouch",
            "chainable": 1,
            "return": {
                "description": "[true | false]",
                "type": "Boolean"
            },
            "example": [
                "\n\n              var bool = bui.platform.isBingotouch();\n"
            ],
            "class": "bui.platform",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.storage.js",
            "line": 92,
            "description": "以数组保存数据,如果数据是一个对象,需要传keyname,防止数据重复增加.",
            "itemtype": "method",
            "name": "set",
            "chainable": 1,
            "params": [
                {
                    "name": "key",
                    "description": "[存储的变量名]",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "[存储的数据,可以是string,也可以是一个对象]",
                    "type": "Object"
                },
                {
                    "name": "keyname] [存储的数据的比对唯一键值,不传会导致数据重复,size为1 则都会替换",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n           var storage = bui.storage();\n               //普通数组无需传字段,不传最后的值默认只存储1条数据\n               storage.set(\"username\",\"Fast\");\n               //存储对象示例\n               storage.set(\"userinfo\",{\"id\":\"n1\",\"name\":\"Fast\"},\"id\");\n"
            ],
            "class": "bui.storage",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.storage.js",
            "line": 185,
            "description": "获取存储的数组,或者某条数据",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "[存储的变量名]",
                    "type": "String"
                },
                {
                    "name": "value] [获取某一条数据,为数字时是在第几条数据,0为第一条数据",
                    "description": "",
                    "type": "String|number",
                    "optional": true
                },
                {
                    "name": "keyname",
                    "description": "[在某个字段里面]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回数组或者某条数据或者undefined",
                "type": "Array"
            },
            "example": [
                "\n\n           var storage = bui.storage();\n\n           // 获取数组\n           var data = storage.get(\"username\");\n           //console.log( data ) // [\"BUI\"]\n\n           // 获取数组里的第1条数据,才是自己存进去的内容\n           var data = storage.get(\"username\",0);\n           //console.log( data ) // BUI\n\n           // 获取数组里的某条数据在某个字段 本地存储的内容为: [{id:\"wangws\",\"name\":\"Fast\"},{id:\"oubr\",\"name\":\"BUI\"}]\n           var data = storage.get(\"username\",\"oubr\",\"id\");\n           //console.log( data ) // {id:\"oubr\",\"name\":\"BUI\"}\n"
            ],
            "class": "bui.storage",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.storage.js",
            "line": 244,
            "description": "删除字段的某条信息",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "params": [
                {
                    "name": "key",
                    "description": "[存储的变量名]",
                    "type": "String"
                },
                {
                    "name": "value] [ 要删的内容 | 索引(在第几个)",
                    "description": "",
                    "type": "String|number",
                    "optional": true
                },
                {
                    "name": "keyname] [ 字段名 | 长度(1.4新增,配合value是数字时使用)",
                    "description": "",
                    "type": "String|number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           var storage = bui.storage();\n\n               // 删除第几条数据\n               storage.remove(\"username\",0);\n\n               // 删除第1条包含之后的2条数据\n               storage.remove(\"username\",1,2);\n               // 删除某条数据\n               storage.remove(\"username\",\"Fast\");\n\n               // 删除某条数据,通过id比对, 如果存储的对象是JSON\n               storage.remove(\"userinfo\",\"n1\",\"id\");\n"
            ],
            "class": "bui.storage",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.storage.js",
            "line": 313,
            "description": "清空本地存储",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                "\n           var storage = bui.storage();\n               storage.clear();\n"
            ],
            "class": "bui.storage",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.storage.js",
            "line": 337,
            "description": "获取所有本地缓存数据",
            "itemtype": "method",
            "name": "getAll",
            "since": "1.5.5",
            "params": [
                {
                    "name": "index",
                    "description": "[number] [有prefix参数的时候,支持传索引,返回存进去之前的值, 不传则每个keyname返回一个数组]]"
                }
            ],
            "chainable": 1,
            "example": [
                "\n           var storage = bui.storage();\n           var localObj = storage.getAll();\n"
            ],
            "class": "bui.storage",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 16,
            "description": "rem的值转换成px",
            "itemtype": "method",
            "name": "remToPx",
            "is_constructor": 1,
            "params": [
                {
                    "name": "size",
                    "description": "[ rem的值 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     var size = bui.unit.remToPx(2);\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 36,
            "description": "脚本获取元素大小px的值转换成rem",
            "itemtype": "method",
            "name": "pxToRem",
            "is_constructor": 1,
            "params": [
                {
                    "name": "size",
                    "description": "[ px的值 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     var size = bui.unit.pxToRem(200);\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 55,
            "description": "原比例转换,750的元素大小px转换rem单位;",
            "itemtype": "method",
            "name": "pxToRemZoom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "size",
                    "description": "[ px的值 ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n     var size = bui.unit.pxToRemZoom(200);\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 177,
            "description": "拨打电话,单页的a 标签跳转电话无效",
            "itemtype": "method",
            "name": "tel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "num",
                    "description": "[电话号码, + 代表是国际电话号码]",
                    "type": "[number|string]"
                }
            ],
            "example": [
                "\n\n     // 拨打电话\n         bui.unit.tel(\"13800138000\")\n     // 拨打国际电话\n         bui.unit.tel(\"+13800138000\")\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 210,
            "description": "发送短信",
            "itemtype": "method",
            "name": "sms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "num",
                    "description": "[电话号码,多个号码用逗号分割]",
                    "type": "[string]"
                },
                {
                    "name": "content",
                    "description": "[发送的内容]",
                    "type": "[string]"
                }
            ],
            "example": [
                "\n\n     // 发送短信\n     bui.unit.sms(\"10086\",\"CZMM\")\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 235,
            "description": "发送邮件",
            "itemtype": "method",
            "name": "mailto",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "email",
                            "description": "[收件人,多个收件人英文逗号分开]",
                            "type": "String"
                        },
                        {
                            "name": "cc",
                            "description": "[抄送,多个收件人英文逗号分开]",
                            "type": "String"
                        },
                        {
                            "name": "subject",
                            "description": "[邮件主题]",
                            "type": "String"
                        },
                        {
                            "name": "body",
                            "description": "[邮件内容]",
                            "type": "String"
                        }
                    ]
                }
            ],
            "example": [
                "\n\n             // 收件人带主题\n   bui.unit.mailto({\n       email:\"test1@163.com\",\n       subject:\"Testing\"\n   })\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 590,
            "description": "一维数组逐层转json, 把 page.name 转换成 { page: { name: {} }}",
            "itemtype": "method",
            "name": "setKeyValue",
            "since": "1.5.0",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "[\"page.name\"]",
                    "type": "String"
                },
                {
                    "name": "value] [设置的值",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "targetObj] [要在哪个对象上设置",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "[返回对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n       // 新建一个对象\n         var data2 = bui.unit.setKeyValue(\"page.name\",\"test\");\n         console.log(data2)   // { page: { name: \"test\" }}\n       // 修改一个对象\n       var obj = { page: { name: \"\", tel: 123 }}\n           bui.unit.setKeyValue(\"page.name\",\"test\",obj);\n         console.log(data2)   // { page: { name: \"test\", tel: 123 }}\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 626,
            "description": "根据 page.name 字符串获取数据的值, 用于field配置的映射",
            "itemtype": "method",
            "name": "getKeyValue",
            "since": "1.5.0",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "[\"page.name\"]",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "[设置的值]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[返回对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n       var data = { page: { name: \"123\" }}\n         var n = bui.unit.getKeyValue(\"page.name\",data);\n         console.log(n)   // 123\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 665,
            "description": "根据 page.name 字符串获取数据的对象, 用于field配置的映射",
            "itemtype": "method",
            "name": "getKeyObj",
            "since": "1.5.0",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "[\"page.name\"]",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "[设置的值]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[返回  对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n       var data = { page: { name: \"123\" }}\n       var n = bui.unit.getKeyObj(\"page.name\",data);\n         console.log(n)   // {name:123}\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 698,
            "description": "获取对象里的每个字段连接的数组",
            "itemtype": "method",
            "name": "getKeyName",
            "since": "1.6.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "[]",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[返回  对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n       var data = { page: { name: \"123\" }}\n       var n = bui.unit.getKeyObj(\"page.name\",data);\n         console.log(n)   // {name:123}\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 730,
            "description": "根据 page.name 删除某个字段的数据",
            "itemtype": "method",
            "name": "delKey",
            "since": "1.5.0",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "[\"page.name\"]",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "[删除的字段在哪个对象]",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[返回  删除以后的对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n       var data = { page: { name: \"123\", tel: 456 }}\n           bui.unit.delKey(\"page.name\",data);\n         console.log(data)   // { page: { tel: 456 }}\n\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 763,
            "description": "利用calc百分比减高度,低版本手机不支持.",
            "itemtype": "method",
            "name": "calcHeight",
            "since": "1.5.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "[选择器,例如: \".bui-page\"]",
                    "type": "Object"
                },
                {
                    "name": "height",
                    "description": "[带单位 10px]",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n         var $main = $(\"main\");\n         var headHeight = $(\"header\").height();\n         // 设置main的高度 = 100% - headerHeight \n         bui.unit.calcHeight($main,headHeight)\n"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 818,
            "description": "由于target会有很多多余字段，所以可以提取一些store需要用的字段就可以。",
            "itemtype": "method",
            "name": "filterField",
            "since": "1.5.5",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "[要提取的目标对象]",
                    "type": "Object"
                },
                {
                    "name": "opt",
                    "description": "[ 数组时，为要提取的有哪些字段；对象时，如果没有值，则跟数组一致，如果有value,则是相互映射关系，具体查看例子3。]",
                    "type": "Object|array"
                }
            ],
            "example": [
                "\n       \n       // 例子1： a 为store的初始值，请求后拿到了b 有很多多余数据字段，而实际上只需要一个 test \nvar a = {test:\"\"};\nvar b = { name:12,test:13,sex:\"男\"};\nvar filter = bui.unit.filterField(b,a);\n// console.log(filter) // 输出 {test: 13}\n       \n       // 例子2： a 为要提取的字段，请求后拿到了b 有很多多余数据字段，而实际上只需要一个 test \nvar a = [\"test\"];\nvar b = { name:12,test:13,sex:\"男\"};\nvar filter = bui.unit.filterField(b,a);\n// console.log(filter) // 输出 {test: 13}\n       \n       // 例子3：\n       // dropdown 的数据是 name,value ，接口返回的数据没有 name, value 字段，所以需要转换。\nvar dropdownData = {name:\"title\",value:\"id\"}\nvar target = { id:12,title:\"我是标题\",sex:\"男\"};\nvar filter = bui.unit.filterField(target,dropdownData);\n// console.log(filter) // 输出 {name: \"我是标题\", value: 12}\n       \n       // 例子4：\n       // dropdown 的数据是 name,value ，接口返回的数据没有 name, value 字段，所以需要转换。\nvar dropdownData = {name:\"title\",value:\"id\"}\nvar target = [{ id:12,title:\"我是标题\",sex:\"男\"},{ id:13,title:\"我是标题2\",sex:\"男\"}];\nvar filter = bui.unit.filterField(target,dropdownData);\n// console.log(filter) // 输出  [{name: \"我是标题\", value: 12},{name: \"我是标题2\", value: 13}]"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 908,
            "description": "获取所有属性及值",
            "itemtype": "method",
            "name": "getAttributes",
            "since": "1.5.6",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "[要提取的目标对象]",
                    "type": "Object"
                }
            ],
            "example": [
                "\n       \n       // 例子1： 获取某个dom的所有属性和值\nvar attrs = bui.unit.getAttributes()"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 989,
            "description": "获取多页相对路径",
            "itemtype": "method",
            "name": "relativePath",
            "since": "1.5.6",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "[提取多页的相对路径]",
                    "type": "String"
                },
                {
                    "name": "path] [默认: \"pages\" 静态页面的根路径,所有路径都相对当前路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n       \n       // 例子： \nvar path = bui.unit.relativePath(\"pages/ui_controls/bui.list\")\n         // 在首页 index.html 打开则输出 pages/ui_controls/bui.list , 在二级页面 pages/index.html 打开, 则是ui_controls/bui.list;"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/method/bui.unit.js",
            "line": 1060,
            "description": "检测值是否在最小最大之间",
            "itemtype": "method",
            "name": "between",
            "since": "1.6.2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "val",
                    "description": "[检测的值,可以是数字,也可以是日期]",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "[最小值, 默认为0, 比对日期时, 最小值必须传]",
                    "type": "Number"
                },
                {
                    "name": "max] [最大值, 默认为今年的最后一天, 13位数的数字",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n       \n       // 例子： \nvar bool = bui.unit.between(10,0,100);\n         // 返回true\n       // 例子： \nvar bool = bui.unit.between(\"2020-5-19\",\"2020-5-1\",\"2020-5-30\");\n         // 返回true"
            ],
            "class": "bui.unit",
            "module": "Method",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/appcan/bui.native.file.js",
            "line": 460,
            "description": "本地程序打开文件",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n\n           uiFile.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.ajax",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/appcan/bui.native.file.js",
            "line": 495,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 fileselect",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //获取依赖控件\n           var uiFileSelect = uiFile.widget(\"fileselect\");\n           \n           //使用uifileselect的方法\n           uiFileSelect.add({\n               onSuccess: function(data){\n                   console.log(data);\n               }\n           });\n               "
            ],
            "class": "bui.ajax",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/bingotouch/bui.native.file.js",
            "line": 472,
            "description": "本地程序打开文件",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFile.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.checkVersion",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/bingotouch/bui.native.file.js",
            "line": 504,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 fileselect",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiFileSelect = uiFile.widget(\"fileselect\");\n\n           //使用uifileselect的方法\n           uiFileSelect.add({\n               onSuccess: function(data){\n                   console.log(data);\n               }\n           });\n"
            ],
            "class": "bui.checkVersion",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/dcloud/bui.native.file.js",
            "line": 345,
            "description": "本地程序打开文件",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFile.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.ajax",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/dcloud/bui.native.file.js",
            "line": 382,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 fileselect",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiFileSelect = uiFile.widget(\"fileselect\");\n\n           //使用uifileselect的方法\n           uiFileSelect.add({\n               onSuccess: function(data){\n                   console.log(data);\n               }\n           });\n"
            ],
            "class": "bui.ajax",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/link/bui.native.file.js",
            "line": 470,
            "description": "本地程序打开文件",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFile.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.ajax",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/link/bui.native.file.js",
            "line": 505,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 fileselect",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiFileSelect = uiFile.widget(\"fileselect\");\n\n           //使用uifileselect的方法\n           uiFileSelect.add({\n               onSuccess: function(data){\n                   console.log(data);\n               }\n           });\n"
            ],
            "class": "bui.ajax",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 165,
            "description": "开始下载",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "option] [参数同初始化一样,查看最顶部的参数",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.start({\n               url: \"http://\"\n           })\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 255,
            "description": "获取下载的文件,如果没有则重新下载",
            "itemtype": "method",
            "name": "getFile",
            "params": [
                {
                    "name": "option",
                    "description": "[参数同初始化一样]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url] [下载地址",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folderName] [保存的文件夹, 默认download文件夹,可以不用传",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onSuccess] [成功的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.getFile({\n               url: \"http://\",\n               onSuccess: function (url,file) {\n                   console.log(url);\n               }\n           })\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 299,
            "description": "删除文件",
            "itemtype": "method",
            "name": "removeFile",
            "since": "1.5.2",
            "params": [
                {
                    "name": "option",
                    "description": "[参数同初始化一样]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fileName] [删除的文件名称",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "folderName] [删除的文件名称在哪个文件夹, 默认是: \"download\", 一般无需更改",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onSuccess] [成功的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.removeFile({\n               fileName: \"customName.jpg\",\n               onSuccess: function (url,file) {\n                   console.log(url);\n               }\n           })\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 332,
            "description": "删除文件夹,默认是 \"download\"",
            "itemtype": "method",
            "name": "removeFolder",
            "since": "1.5.2",
            "params": [
                {
                    "name": "option",
                    "description": "[参数同初始化一样]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "folderName] [删除的文件名称在哪个文件夹, 默认是: \"download\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onSuccess] [成功的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.removeFolder({\n               folderName: \"customName.jpg\",\n               onSuccess: function (url,file) {\n                   console.log(url);\n               }\n           })\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 360,
            "description": "本地程序打开文件, web不支持",
            "itemtype": "method",
            "name": "open",
            "since": "1.5.2",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 388,
            "description": "停止下载",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.stop()\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 449,
            "description": "把选择的图片文件转换成base64地址,可以直接展示在页面上",
            "itemtype": "method",
            "name": "toBase64",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data] [ 通过getFile得到的文件",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "onSuccess] [成功的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFail] [失败的回调",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiDownload.toBase64({\n               data: \"file:///\", //本地图片路径\n               onSuccess: function (imgurl) {\n                   $(\"#id\").append('<img src=\"'+imgurl+'\" />')\n               }\n           });\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.download.js",
            "line": 473,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 loading",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiLoading = uiFile.widget(\"loading\");\n\n           //使用uiLoading的方法\n           uiLoading.start();\n"
            ],
            "class": "bui.download",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 183,
            "description": "获取文件夹或者创建文件夹",
            "itemtype": "method",
            "name": "getFolder",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.folderName] [ 文件夹名称, 创建子文件夹 download/image",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.create] [是否创建文件夹 默认 false | true",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n          // 创建download文件夹\n           uiFile.getFolder({\n               folderName: \"download\",\n               create: true\n           })\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 281,
            "description": "获取文件名",
            "itemtype": "method",
            "name": "getFileName",
            "params": [
                {
                    "name": "name",
                    "description": "[ url地址, 例如: file:开头,http开头  ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n           var name = uiFile.getFileName(\"file://bui.debug/bui.jpg?id=abcd\");\n           // name = bui.jpg\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 302,
            "description": "获取文件或者创建文件",
            "itemtype": "method",
            "name": "getFile",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.fileName] [ 文件名称 需要带后缀名",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.folderName] [ 文件夹名称, 创建子文件夹 download/image",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.create] [是否创建文件 默认 false | true",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFile.getFile({\n               fileName: \"bui.docx\",\n               folderName: \"download\",\n               onSuccess: function(){\n                   // this 指向 uiFile\n                   console.log(this);\n               }\n           })\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 398,
            "description": "删除文件夹及里面所有文件,谨慎使用",
            "itemtype": "method",
            "name": "removeFolder",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.folderName] [ 文件夹名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 会包含文件夹所有的文件, 谨慎使用\n           uiFile.removeFolder({\n               folderName: \"download\"\n           })\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 456,
            "description": "删除文件,谨慎使用",
            "itemtype": "method",
            "name": "removeFile",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.fileName] [ 文件名称,",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.folderName] [ 哪个文件夹下的文件",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 会包含文件夹所有的文件, 谨慎使用\n           uiFile.removeFile({\n               fileName: \"bui.docx\",\n               folderName: \"download\"\n           })\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 515,
            "description": "本地程序打开文件, web不支持",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFile.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 555,
            "description": "把选择的图片文件转换成base64地址,可以直接展示在页面上",
            "itemtype": "method",
            "name": "toBase64",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.data] [ 通过getFile得到的文件",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFile.toBase64({\n               data: \"file:///\", //本地图片路径\n               onSuccess: function (imgurl) {\n                   $(\"#id\").append('<img src=\"'+imgurl+'\" />')\n               }\n           });\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.file.js",
            "line": 579,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 fileselect",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiFileSelect = uiFile.widget(\"fileselect\");\n\n           //使用uifileselect的方法\n           uiFileSelect.add({\n               onSuccess: function(data){\n                   console.log(data);\n               }\n           });\n"
            ],
            "class": "bui.file",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 215,
            "description": "修改图片大小",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.3",
            "params": [
                {
                    "name": "option] [ 对象",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.data] [ 图片的值, 不传则拿最后选择的文件",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.quality] [ 图片质量,默认0.8",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.width] [ 图片宽度,默认800",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [ 图片高度,默认800",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.needCompress] [ 是否需要压缩, 默认: true | false",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.destinationType] [ 更改以后的图片返回什么类型, file (文件类,跟默认一致) | data (返回base64位值) | blob(返回文件流)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 成功的回调,第一个形参为拿到转换后的值",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFileSelect.resize({\n               onSuccess: function(file){\n                   // this 指向uiFileSelect\n                   // console.log(this)\n               }\n           })\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 361,
            "description": "添加文件, 参数的配置全部针对原生选择",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "option] [对象",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.needCompress] [ 1.5.3新增 是否需要压缩, 默认 false | true , true 以下的质量及宽度高度参数才会有效.",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.quality] [ 图片质量,默认0.8",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.width] [ 图片宽度,默认800",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [ 图片高度,默认800",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.mediaType] [ 文件的类型, picture | video | allmedia (needNative:true 只支持图片上传 )",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.from] [ 图片来源, 默认来自 \"picture\"(相册) | camera(相机)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.destinationType] [ file (返回路径值) | data (返回base64位值)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFileSelect.add({\n               onSuccess: function(file){\n                   // this 指向uiFileSelect\n                   // console.log(this)\n               }\n           })\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 424,
            "description": "把选择的图片文件转换成base64地址,可以直接展示在页面上",
            "itemtype": "method",
            "name": "toBase64",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.data] [ 通过文件选择的文件进行转码",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.needCompress] [ 1.5.1新增,转换成base64以后需要压缩吗 默认 false | true , 为true, mimeType 类型才有效",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.mimeType] [ 1.5.1新增,转换的图片类型 默认为原图片类型 , \"image/jpeg\" | \"image/png\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n\n           // 展示本地图片\n           uiFileSelect.toBase64({\n               onSuccess: function (imgurl) {\n                   $(\"#id\").append('<img src=\"'+imgurl+'\" />')\n               }\n           });\n\n\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 564,
            "description": "删除选择的文件, 安卓选择后的文件名自动更改为 resize.jpg",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "[ 要删除的图片名字带后缀名 ]",
                    "type": "String"
                },
                {
                    "name": "key] [ 图片名字在哪个字段, 默认是 \"name\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFileSelect.remove(\"resize.jpg\");\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 601,
            "description": "清空所有选择的文件",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n\n           uiFileSelect.clear();\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 624,
            "description": "获取所有选择的文件, 原生默认只返回最后一个选择的文件",
            "itemtype": "method",
            "name": "data",
            "example": [
                "\n\n           var data = uiFileSelect.data();\n           // 返回 [{ name: \"base64.jpg\", data: null, type: \"jpg\" }]\n           // 其中 data为要上传的文件值\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 644,
            "description": "获取最后选择的文件",
            "itemtype": "method",
            "name": "value",
            "example": [
                "\n\n           var value = uiFileSelect.value();\n           // 返回值 value为要上传的文件值, web上传跟原生上传得到的值不一样\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 662,
            "description": "获取最后选择的文件名,删除的时候",
            "itemtype": "method",
            "name": "currentName",
            "since": "1.5.2",
            "example": [
                "\n\n           var currentName = uiFileSelect.currentName();\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.fileselect.js",
            "line": 680,
            "description": "获取最后选择的文件名,删除的时候",
            "itemtype": "method",
            "name": "currentIndex",
            "since": "1.5.2",
            "example": [
                "\n\n           var currentIndex = uiFileSelect.currentIndex();\n"
            ],
            "class": "bui.fileselect",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 177,
            "description": "修改图片大小",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.3",
            "params": [
                {
                    "name": "option] [ 对象",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.data] [ 图片的值, 不传则拿最后选择的文件",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.quality] [ 图片质量,默认0.8",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.width] [图片宽度,默认800, targetWidth和targetHeight设置为undefined 则添加原图",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [图片高度,默认800, targetWidth和targetHeight设置为undefined 则添加原图",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.needCompress] [ 是否需要压缩, 默认: false | true",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.destinationType] [ file (返回路径值) | data (返回base64位值) | blob(返回文件流)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiFileSelect.resize({\n               data: uiFileSelect.data(),\n               width:100,\n               needCompress:true,\n               onSuccess: function(file){\n                   // this 指向uiFileSelect\n                   // console.log(this)\n               }\n           })\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 210,
            "description": "添加文件",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "option] [图片质量,默认0.8",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.needCompress] [ 1.5.3新增 是否需要压缩, 默认 false | true , true 以下的质量及宽度高度参数才会有效.",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.quality] [图片质量,默认0.8",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.width] [图片宽度,默认800, targetWidth和targetHeight设置为undefined 则添加原图",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [图片高度,默认800, targetWidth和targetHeight设置为undefined 则添加原图",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.mediaType] [ 文件的类型, picture | video | allmedia 原生只支持图片上传",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.from] [ 1.4.7新增, 默认 \"\" 从相册选 | \"camera\" 相机拍照 | \"camcorder\" 录像, 需要配合 mediaType  参数 原生: 默认来自 photo(相册) | camera(相机) | savephoto(来自保存的相册)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.destinationType] [ file (返回路径值) | data (返回base64位值)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.add({\n               onSuccess: function(file){\n                   // console.log(this)\n               }\n           })\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 242,
            "description": "删除某个文件,支持索引,图片名称,需要先把 currentIndex,currentName 之类的存在选择后的图片上,供删除调用, 建议拿索引去比对, 因为原生选择的图片默认都命名为 resize.jpg 所以不方便通过名称删除.",
            "itemtype": "method",
            "name": "remove",
            "since": "1.5.2",
            "params": [
                {
                    "name": "name] [图片索引|图片名称",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.remove();\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 272,
            "description": "清空所有选择的文件",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.clear();\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 286,
            "description": "把选择的图片文件转换成base64地址,可以直接展示在页面上",
            "itemtype": "method",
            "name": "toBase64",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.data] [ 通过文件选择的返回值,如果不传data,值来自于通过add添加的最后一个文件",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.needCompress] [ 1.5.1新增,转换成base64以后需要压缩吗 默认 false | true , 为true, mimeType 类型才有效",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.mimeType] [ 1.5.1新增,转换的图片类型 默认为原图片类型 \"image/jpeg\" | \"image/png\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.toBase64({\n               onSuccess: function (imgurl) {\n                   $(\"#id\").append('<img src=\"'+imgurl+'\" />')\n               }\n           });\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 309,
            "description": "获取所有选择的文件, 原生默认只返回最后一个选择的文件",
            "itemtype": "method",
            "name": "data",
            "example": [
                "\n\n           var data = uiUpload.data();\n           // 返回 [{ name: \"base64.jpg\", data: null, type: \"jpg\" }]\n           // 其中 data为要上传的文件值\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 323,
            "description": "开始上传",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "option] [参数同初始化一样,在初始化时配置,则是公共的, data不传则获取最后一次选择",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [上传的地址, 默认可以在bui.upload 初始化的时候配置就不用再传",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.headers] [ 附加在headers的参数",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.fileKey] [ 默认: file, 上传的图片后端要接收哪个字段",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.data] [ 默认不传,会上传最后一张选择的图片, 还可以添加上传的附加参数,如果需要自己指定某一张图片,可以使用 {file: uiUpload.data()}, file为默认的图片字段,需要和fileKey保持一致.",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 上传成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 上传失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.start({\n               data: null,\n               onSuccess: function (res) {\n                   // 成功\n               },\n               onFail: function (res,status) {\n                   // 失败 status = \"timeout\" || \"error\" || \"abort\", \"parsererror\"\n               }\n           })\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 406,
            "description": "批量上传",
            "itemtype": "method",
            "name": "startAll",
            "params": [
                {
                    "name": "option] [参数同初始化一样,在初始化时配置,则是公共的",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [上传的地址, 默认可以在bui.upload 初始化的时候配置就不用再传",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.headers] [ 附加在headers的参数",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.fileKey] [ 默认: file, 上传的图片后端要接收哪个字段",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.data] [ 默认不传,会上传所有图片, 还可以添加上传的附加参数,如果需要自己指定图片,可以使用 {file: uiUpload.data()}, file为默认的图片字段,值是数组,需要和fileKey保持一致.",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.needFileinfo] [ 1.5.3新增 默认:false | true . 把选择的图片的相关信息一起传给接口, name,size,type",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [ 上传成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [ 上传失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onEnd] [ 1.6.2 全部上传成功或失败都会触发",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.startAll({\n               url: \"http://\",\n               onSuccess: function (res) {\n                   // 成功\n               },\n               onFail: function (res,status) {\n                   // 失败 status = \"timeout\" || \"error\" || \"abort\", \"parsererror\"\n               }\n           })\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 501,
            "description": "停止上传",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n\n           uiUpload.stop()\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 619,
            "description": "获取最后选择的文件名,删除的时候",
            "itemtype": "method",
            "name": "currentName",
            "since": "1.5.2",
            "example": [
                "\n\n           var currentName = uiUpload.currentName();\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 633,
            "description": "获取最后选择的文件名,删除的时候",
            "itemtype": "method",
            "name": "currentIndex",
            "since": "1.5.2",
            "example": [
                "\n\n           var currentIndex = uiUpload.currentIndex();\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/web/bui.upload.js",
            "line": 647,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 loading",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiLoading = uiUpload.widget(\"loading\");\n\n           //使用uiLoading的方法\n           uiLoading.start();\n"
            ],
            "class": "bui.upload",
            "module": "Native",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/mix/workplus/bui.native.file.js",
            "line": 509,
            "description": "本地程序打开文件",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option] [",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url] [ 文件路径,一般是通过getFile得到的路径",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "option.onSuccess] [成功的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.onFail] [失败的回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n\n           uiFile.open({\n               url: \"file://\",\n               onSuccess: function(url){\n                   // 文件的地址\n                   console.log(url)\n               }\n           })\n"
            ],
            "class": "bui.accordion",
            "module": "Native"
        },
        {
            "file": "src/scripts/mix/workplus/bui.native.file.js",
            "line": 552,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 fileselect",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //获取依赖控件\n           var uiFileSelect = uiFile.widget(\"fileselect\");\n           \n           //使用uifileselect的方法\n           uiFileSelect.add({\n               onSuccess: function(data){\n                   console.log(data);\n               }\n           });\n               "
            ],
            "class": "bui.accordion",
            "module": "Native"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 116,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 226,
            "description": "阻止触发",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "since": "1.4",
            "params": [
                {
                    "name": "index] [阻止第几个,从0开始算起",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiAccordion.disabled(1);\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 249,
            "description": "允许触发",
            "itemtype": "method",
            "name": "enabled",
            "chainable": 1,
            "since": "1.4",
            "params": [
                {
                    "name": "index] [阻止第几个,从0开始算起",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiAccordion.enabled(1);\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 311,
            "description": "显示第几个面板 这个需要绑定ID单独显示",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "params": [
                {
                    "name": "index] [显示第几个,从0开始算起",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //显示第几个\n           uiAccordion.show(1);\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 335,
            "description": "关闭第几个面板 这个需要绑定ID单独显示",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "params": [
                {
                    "name": "index] [关闭第几个,从0开始算起",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //显示第几个\n           uiAccordion.hide(1);\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 359,
            "description": "所有折叠菜单显示第一个",
            "itemtype": "method",
            "name": "showFirst",
            "chainable": 1,
            "example": [
                "\n\n           //显示第几个\n           uiAccordion.showFirst();\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 389,
            "description": "显示所有隐藏的菜单",
            "itemtype": "method",
            "name": "showAll",
            "chainable": 1,
            "example": [
                "\n\n           //显示第几个\n           uiAccordion.showAll();\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 413,
            "description": "隐藏所有展开的菜单",
            "itemtype": "method",
            "name": "hideAll",
            "chainable": 1,
            "example": [
                "\n\n           //隐藏第几个\n           uiAccordion.hideAll();\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 443,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiAccordion.destroy();\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 467,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiAccordionWidget = uiAccordion.widget();\n\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 482,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n           var option = uiAccordion.option();\n\n           //获取某个参数\n           var id = uiAccordion.option( \"id\" );\n\n           //修改一个参数\n           uiAccordion.option( \"height\",200 );\n\n           //修改多个参数\n           uiAccordion.option( {\"height\":200} );\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 509,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\"(显示目标时) | \"hide\"(隐藏目标时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiAccordion.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.accordion.js",
            "line": 529,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\"(显示目标时) | \"hide\"(隐藏目标时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiAccordion.off(\"show\");\n\n"
            ],
            "class": "bui.accordion",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 154,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 256,
            "description": "隐藏菜单",
            "itemtype": "method",
            "name": "hide",
            "example": [
                "\n\n           //隐藏菜单\n           uiActionsheet.hide();\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 283,
            "description": "显示菜单",
            "itemtype": "method",
            "name": "show",
            "example": [
                "\n\n           //显示菜单\n           uiActionsheet.show();\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 310,
            "description": "阻止触发",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n           uiActionsheet.disabled();\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 327,
            "description": "允许触发",
            "itemtype": "method",
            "name": "enabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n           uiActionsheet.enabled();\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 344,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiActionsheet.destroy();\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 368,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiActionsheetWidget = uiActionsheet.widget();\n\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 383,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n           var option = uiActionsheet.option();\n\n           //获取某个参数\n           var id = uiActionsheet.option( \"trigger\" );\n\n           //修改一个参数\n           uiActionsheet.option( \"width\",200 );\n\n           //修改多个参数\n           uiActionsheet.option( {\"width\":200} );\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 423,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\"(显示菜单时) | \"hide\"(隐藏菜单时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiActionsheet.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.actionsheet.js",
            "line": 443,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\"(显示菜单时) | \"hide\"(隐藏菜单时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiActionsheet.off(\"show\");\n\n"
            ],
            "class": "bui.actionsheet",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.btn.js",
            "line": 101,
            "description": "页面跳转,跟 {{#crossLink \"bui.load\"}}{{/crossLink}} 的区别在于,通过按钮绑定跳转会增加一层防止快速点击加载2次的问题\n注意: 这个默认跳转会阻止默认事件,a, input的checkbox label的for 等等,包在btn元素里面都会失效\n页面如何接收参数请查看 {{#crossLink \"bui.getPageParams\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "load",
            "example": [
                "\n\n 示例: 绑定页面所有有href的按钮的跳转(多页一个页面只需要初始化一次,单页只需要在首页初始化一次)\n\n html:\n\n          <div id=\"page\">\n              <div class=\"bui-btn\" href=\"btn.html\">首页</div>\n              <div class=\"bui-btn\" href=\"btn.html?id=123\">新闻</div>\n          </div>\n js:\n\n           bui.btn({\n               id:\"#page\",\n               handle: \".bui-btn\"  // 绑定多个 \".bui-btn,.submit,a\"\n           }).load();\n"
            ],
            "class": "bui.btn",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.btn.js",
            "line": 207,
            "description": "绑定按钮提交数据,提交数据成功以后需要在回调里面关闭进度条",
            "itemtype": "method",
            "name": "submit",
            "params": [
                {
                    "name": "callback",
                    "description": "[提交的回调]",
                    "type": "Function"
                },
                {
                    "name": "param",
                    "description": "[ loading 的参数修改]",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n           bui.btn(\"#btn\").submit(function(loading){\n                //关闭进度条\n                loading.stop();\n            });\n"
            ],
            "class": "bui.btn",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.btn.js",
            "line": 277,
            "description": "绑定按钮提交数据,提交数据成功以后需要在回调里面关闭进度条",
            "itemtype": "method",
            "name": "click",
            "since": "1.5.4",
            "params": [
                {
                    "name": "callback",
                    "description": "[提交的回调]",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n           bui.btn(\"#btn\").click(function(e){\n                //关闭进度条\n                loading.stop();\n            });\n"
            ],
            "class": "bui.btn",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.btn.js",
            "line": 325,
            "description": "取消事件",
            "itemtype": "method",
            "name": "off",
            "example": [
                "\n\n           uiBtn.off();\n"
            ],
            "class": "bui.btn",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 165,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 337,
            "description": "打开对话框",
            "itemtype": "method",
            "name": "open",
            "chainable": 1,
            "params": [
                {
                    "name": "callback] [回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiDialog.open();\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 467,
            "description": "检测窗口是否打开",
            "itemtype": "method",
            "name": "isOpen",
            "example": [
                "\n\n           var status = uiDialog.isOpen();\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 479,
            "description": "关闭对话框",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "params": [
                {
                    "name": "callback] [回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiDialog.close();\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 550,
            "description": "移除对话框",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "example": [
                "\n\n           uiDialog.remove();\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 651,
            "description": "动态增加对话框",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "option",
                    "description": "[参考{{#crossLink \"bui.dialog\"}}{{/crossLink}} 的参数]",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           // 1.5.0 支持公共参数, 1.4.8 参数需要在create 里面\n           var dialog = bui.dialog();\n           // 先创建再打开\n           var dialogobj = dialog.create({ title:\"标题\", content:\"提醒内容\"})\n\n               dialogobj.open();\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 685,
            "description": "切换显示, 默认点一次打开,点2次关闭",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "onOpen] [ 打开的回调, 非必需",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onClose] [ 关闭的回调, 非必需",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           $(\"#id\").click(function(){\n               // 1. 只做切换\n               uiDialog.toggle();\n\n               // 2. 切换带回调\n               uiDialog.toggle(function(){\n                   // 打开的回调\n               },function(){\n                   // 关闭的回调\n               });\n           })\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 717,
            "description": "置顶",
            "itemtype": "method",
            "name": "top",
            "since": "1.6.2",
            "params": [
                {
                    "name": "index] [ 设置指定层级",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           $(\"#id\").click(function(){\n               // 1. 只做切换\n               uiDialog.top();\n\n           })\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 748,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "example": [
                "\n\n           //销毁\n           uiDialog.destroy();\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 776,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖 toggle 控件",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiDialogWidget = uiDialog.widget(\"toggle\");\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 791,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiDialog.option();\n\n           //获取某个参数\n           var id = uiDialog.option( \"id\" );\n\n           //修改一个参数\n           uiDialog.option( \"fullscreen\",true );\n\n           //修改多个参数\n           uiDialog.option( {\"fullscreen\":true} );\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 819,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"open\"(打开的窗口时候触发) | \"<del>openafter</del>\" \"afteropen\"(打开的动画结束之后触发) | \"close\"(关闭窗口的时候触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiDialog.on(\"open\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dialog.js",
            "line": 840,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"open\"(打开的窗口时候触发) | \"close\"(关闭窗口的时候触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiDialog.off(\"open\");\n\n"
            ],
            "class": "bui.dialog",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 159,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 354,
            "description": "1.5.1 支持 设置值或者文本, 或者获取值",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "text] [设置的值, name 或者 value 的值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置值\n           uiDropdown.value(\"10\");\n\n           //获取值\n           var val = uiDropdown.value();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 433,
            "description": "返回一个选中的对象",
            "itemtype": "method",
            "name": "values",
            "since": "1.5.1",
            "return": {
                "description": "{name:\"\",value:\"\"}",
                "type": "Object"
            },
            "example": [
                "\n\n           //设置值\n           var vals = uiDropdown.values();\n           // {name:\"\",value:\"\"}\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 451,
            "description": "重置下拉的选择",
            "itemtype": "method",
            "name": "reset",
            "since": "1.5.1",
            "example": [
                "\n\n           uiDropdown.reset();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 467,
            "description": "设置某一个二级菜单的值",
            "itemtype": "method",
            "name": "active",
            "since": "1.3.0",
            "params": [
                {
                    "name": "index] [第几个二级菜单",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置值\n           uiDropdown.active(1);\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 494,
            "description": "设置或者获取文本",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "text] [设置文本",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置文本\n           uiDropdown.text(\"广东省\");\n\n           //获取文本\n           var val = uiDropdown.text();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 534,
            "description": "隐藏二级菜单",
            "itemtype": "method",
            "name": "hide",
            "example": [
                "\n\n           //隐藏二级菜单\n           uiDropdown.hide();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 551,
            "description": "显示二级菜单",
            "itemtype": "method",
            "name": "show",
            "example": [
                "\n\n           //显示二级菜单\n           uiDropdown.show();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 567,
            "description": "隐藏所有二级菜单",
            "itemtype": "method",
            "name": "hideAll",
            "example": [
                "\n\n          //显示二级菜单\n          uiDropdown.hideAll();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 595,
            "description": "阻止触发",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n           uiDropdown.disabled();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 612,
            "description": "允许触发",
            "itemtype": "method",
            "name": "enabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n           uiDropdown.enabled();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 629,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiDropdown.destroy();\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 658,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiDropdownWidget = uiDropdown.widget();\n\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 673,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n           var option = uiDropdown.option();\n\n           //获取某个参数\n           var id = uiDropdown.option( \"id\" );\n\n           //修改一个参数\n           uiDropdown.option( \"width\",200 );\n\n           //修改多个参数\n           uiDropdown.option( {\"width\":200} );\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 700,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\" | \"change\" [文本值改变的时候]",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiDropdown.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.dropdown.js",
            "line": 721,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\" | \"change\" [文本值改变的时候]",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiDropdown.off(\"show\");\n\n"
            ],
            "class": "bui.dropdown",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.floor.js",
            "line": 101,
            "description": "初始化",
            "itemtype": "method",
            "name": "init",
            "example": [
                "\n\n\n               uiFloor.init();\n"
            ],
            "class": "bui.floor",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.floor.js",
            "line": 229,
            "description": "跳转",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "index",
                    "description": "[跳转到第几个]",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "[跳转以后执行]",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n\n               uiFloor.init();\n"
            ],
            "class": "bui.floor",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.floor.js",
            "line": 265,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "example": [
                "\n  \n              //销毁\n              uiDropdown.destroy();\n  "
            ],
            "class": "bui.floor",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 140,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 270,
            "description": "当前的显示状态",
            "itemtype": "method",
            "name": "isShow",
            "chainable": 1,
            "example": [
                "\n           var uiHint = bui.hint(\"提醒的信息\");\n               uiHint.isShow();\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 284,
            "description": "新增提醒",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "params": [
                {
                    "name": "text",
                    "description": "[提醒的文本]",
                    "type": "String"
                }
            ],
            "example": [
                "\n           var uiHint = bui.hint(\"提醒的信息\");\n               uiHint.remove();\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 310,
            "description": "隐藏提醒",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "params": [
                {
                    "name": "text",
                    "description": "[提醒的文本]",
                    "type": "String"
                }
            ],
            "example": [
                "\n           var uiHint = bui.hint({ \"content\": \"提醒的信息\", \"autoClose\": true});\n\n               //如果一直存在,就需要手动关闭了\n               uiHint.hide();\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 342,
            "description": "显示提醒",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "params": [
                {
                    "name": "text",
                    "description": "[提醒的文本]",
                    "type": "String"
                }
            ],
            "example": [
                "\n           var uiHint = bui.hint({ \"content\": \"提醒的信息\", \"autoClose\": true});\n\n               //如果一直存在,就需要手动关闭了\n               uiHint.show();\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 396,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiHint.destroy();\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 417,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "since": "1.4.2",
            "params": [
                {
                    "name": "name] [ 依赖控件名 toggle",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiHintWidget = uiHint.widget();\n\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 433,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiHint.option();\n\n           //获取某个参数\n           var id = uiHint.option( \"appendTo\" );\n\n           //修改一个参数\n           uiHint.option( \"autoClose\",true );\n\n           //修改多个参数\n           uiHint.option( {\"autoClose\":true} );\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 460,
            "description": "修改文本",
            "itemtype": "method",
            "name": "text",
            "since": "1.5.5",
            "params": [
                {
                    "name": "val",
                    "description": "[修改的文本]",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n          //修改文本\n          uiHint.text(\"1321\");\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 477,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\"(隐藏或者移除时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiHint.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.hint.js",
            "line": 497,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\"(隐藏或者移除时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiHint.off(\"show\");\n\n"
            ],
            "class": "bui.hint",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 111,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 264,
            "description": "获取并设置值, 只能单个操作",
            "itemtype": "method",
            "name": "value",
            "example": [
                "\n\n           var val = uiInput.value();\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 283,
            "description": "重置",
            "itemtype": "method",
            "name": "reset",
            "since": "1.6.2",
            "example": [
                "\n\n           uiInput.reset();\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 300,
            "description": "清空值",
            "itemtype": "method",
            "name": "empty",
            "example": [
                "\n\n           uiInput.epmty();\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 318,
            "description": "切换text跟password, 用于密码的展示",
            "itemtype": "method",
            "name": "toggleType",
            "example": [
                "\n\n           uiInput.toggleType();\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 339,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiInputWidget = uiInput.widget();\n\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 354,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n           var option = uiInput.option();\n\n           //获取某个参数\n           var id = uiInput.option( \"id\" );\n\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 377,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "params": [
                {
                    "name": "type] [ 事件类型: \"click\"(搜索时触发) | \"focus\"(移除关键字时触发) | \"input\"(每次输入时触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiInput.on(\"input\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.input.js",
            "line": 396,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "params": [
                {
                    "name": "type] [ 事件类型: \"click\"(搜索时触发) | \"focus\"(移除关键字时触发) | \"input\"(每次输入时触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiInput.off(\"input\");\n\n"
            ],
            "class": "bui.input",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 402,
            "description": "跳转到第几层 ,1.5 新增",
            "itemtype": "method",
            "name": "to",
            "chainable": 1,
            "example": [
                "\n\n           //跳转\n           citySelect.to(1);\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 417,
            "description": "上一个,1.5 新增",
            "itemtype": "method",
            "name": "prev",
            "chainable": 1,
            "example": [
                "\n\n           //上一个\n           citySelect.prev();\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 431,
            "description": "下一个,1.5 新增",
            "itemtype": "method",
            "name": "next",
            "chainable": 1,
            "example": [
                "\n\n           //下一个\n           citySelect.next();\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 446,
            "description": "显示窗口",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "example": [
                "\n\n           //显示菜单\n           citySelect.show();\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 471,
            "description": "隐藏窗口",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "example": [
                "\n\n           //显示菜单\n           citySelect.hide();\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 526,
            "description": "取值",
            "itemtype": "method",
            "name": "value",
            "chainable": 1,
            "example": [
                "\n\n           //取值\n           var value = citySelect.value();\n\n           // 返回 [{name:\"广东\",value:\"广州市\",index:\"0\"}]\n\n           //设置值\n           citySelect.value([\"广东\",\"广州市\",\"天河区\"]);\n\n           citySelect.value([{value:\"广东\"},{value:\"广州市\"},{value:\"天河区\"}]);\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 569,
            "description": "修改导航文本",
            "itemtype": "method",
            "name": "setNav",
            "since": "1.5.6",
            "params": [
                {
                    "name": "index",
                    "description": "[第几个导航]",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "[内容]",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //设置值\n           citySelect.setNav(3,\"请选择\");\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 588,
            "description": "重置",
            "itemtype": "method",
            "name": "reset",
            "since": "1.6.2",
            "chainable": 1,
            "example": [
                "\n\n           //重置\n           citySelect.reset();\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 672,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(点击选择框改变的时候触发) | \"lastchange\"(点击最后一个层级的时候,触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           citySelect.on(\"change\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 692,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(点击选择框改变的时候触发) | \"lastchange\"(点击最后一个层级的时候,触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           citySelect.off(\"change\");\n\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 719,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "since": "1.6.0",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n            //获取所有参数\n           var option = citySelect.option();\n\n           //获取某个参数\n           var id = citySelect.option( \"id\" );\n\n           //修改一个参数\n           citySelect.option( \"popup\",false );\n\n           //修改多个参数\n           citySelect.option( {\"popup\":false} );\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 745,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.6.0",
            "example": [
                "\n\n           //销毁\n           citySelect.destroy();\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.levelselect.js",
            "line": 786,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "since": "1.4.2",
            "params": [
                {
                    "name": "name] [ 依赖控件名 dialog, slide, select",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var citySelectWidget = citySelect.widget();\n\n"
            ],
            "class": "bui.levelselect",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 243,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 483,
            "description": "更新分页以判断是否最后一页. 一般用于autoUpdatePage:false下使用, 比方数据渲染有延迟,等渲染以后再调用该方法",
            "itemtype": "method",
            "name": "updatePage",
            "since": "1.5.3",
            "example": [
                "\n\n           //更新分页\n           uiList.updatePage();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 516,
            "description": "刷新方法,有动画效果",
            "itemtype": "method",
            "name": "refresh",
            "since": "1.3.0",
            "example": [
                "\n\n           //获取依赖控件\n           uiList.refresh();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 534,
            "description": "重新加载,无动画",
            "itemtype": "method",
            "name": "reload",
            "since": "1.5.4",
            "example": [
                "\n\n           //获取依赖控件\n           uiList.reload();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 573,
            "description": "不允许滚动加载",
            "itemtype": "method",
            "name": "lock",
            "since": "1.6.3",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.lock();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 591,
            "description": "不允许下拉刷新",
            "itemtype": "method",
            "name": "lockrefresh",
            "since": "1.6.3",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.lockrefresh();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 609,
            "description": "不允许下拉刷新",
            "itemtype": "method",
            "name": "unlockrefresh",
            "since": "1.6.3",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.unlockrefresh();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 627,
            "description": "允许滚动加载",
            "itemtype": "method",
            "name": "unlock",
            "since": "1.6.3",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.unlock();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 646,
            "description": "[清空数据]",
            "itemtype": "method",
            "name": "empty",
            "since": "1.4.7",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //清空数据\n           uiList.empty();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 662,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiList.destroy();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 690,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 scroll",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiListScroll = uiList.widget(\"scroll\");\n\n           //使用scroll的方法\n           uiListScroll.nextPage();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 709,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n           var option = uiList.option();\n\n           //获取某个参数\n           var id = uiList.option( \"id\" );\n\n           //修改data参数,只是修改,不初始化. 如果修改多个参数,会自动初始化, 在onLoad 参数里面变成死循环.\n           uiList.option( \"data\",{\"keyword\":\"关键字\"} );\n\n           //修改多个参数\n           uiList.option( {\"height\":200} );\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 744,
            "description": "修改多个参数,但不执行初始化",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "option] [ 修改参数,跟初始化一样是一个对象.",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //修改多个参数\n           uiList.modify( {url:\"\", data:{\"keyword\":\"关键字\"}  );\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 764,
            "description": "重新计算高度",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.3",
            "params": [
                {
                    "name": "option] [ 可以不传",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.width] [ 如果不传则自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [ 如果不传则自动计算,一些特殊情况需要告诉它在哪个高度下自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //重新计算高度\n           uiList.resize();\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 786,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型:  \"refreshbefore\"(刷新前触发) | \"refresh\"(刷新后触发) | \"success\"(请求成功时触发) | \"fail\" (请求失败时触发) | \"onload\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiList.on(\"refresh\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.list.js",
            "line": 806,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型:  \"refreshbefore\"(刷新前触发) | \"refresh\"(刷新后触发) | \"success\"(请求成功时触发) | \"fail\" (请求失败时触发) | \"onloadbefore\" | \"onload\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiListScroll.off(\"refresh\");\n\n"
            ],
            "class": "bui.list",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 191,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 325,
            "description": "获取激活对象",
            "itemtype": "method",
            "name": "active",
            "since": "1.3.0",
            "return": {
                "description": "[ swipe对象 ]",
                "type": "Object"
            },
            "example": [
                "\n\n          //是否打开\n          var activeUI = uiListview.active();\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 366,
            "description": "关闭菜单",
            "itemtype": "method",
            "name": "close",
            "since": "1.3.0",
            "chainable": 1,
            "example": [
                "\n\n           //关闭菜单\n           uiListview.close();\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 384,
            "description": "不允许滑动",
            "itemtype": "method",
            "name": "lock",
            "since": "1.3.0",
            "chainable": 1,
            "example": [
                "\n\n           //关闭菜单\n           uiListview.lock();\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 404,
            "description": "允许滑动",
            "itemtype": "method",
            "name": "unlock",
            "since": "1.3.0",
            "chainable": 1,
            "example": [
                "\n\n          //关闭菜单\n          uiListview.unlock();\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 424,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          //销毁\n          uiListview.destroy();\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 456,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiListviewWidget = uiListview.widget();\n\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 471,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiListview.option();\n\n           //获取某个参数\n           var id = uiListview.option( \"id\" );\n\n           //修改一个参数\n           uiListview.option( \"width\",120 );\n\n           //修改多个参数\n           uiListview.option( {\"width\":120} );\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 499,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型:  \"open\" | \"close\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             uiListview.on(\"lock\",function () {\n                 // 点击的菜单\n                 console.log(this);\n             });\n\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.listview.js",
            "line": 519,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型:  \"open\" | \"close\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiListview.off(\"lock\");\n\n"
            ],
            "class": "bui.listview",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 149,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 223,
            "description": "显示loading , 参数参考loading的初始化, 每次都重新创建",
            "itemtype": "method",
            "name": "start",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.start();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 283,
            "description": "修改文本",
            "itemtype": "method",
            "name": "text",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.text(\"正在加载\");\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 314,
            "description": "显示圈圈",
            "itemtype": "method",
            "name": "showRing",
            "chainable": 1,
            "example": [
                "\n               uiLoading.showRing();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 336,
            "description": "隐藏圈圈",
            "itemtype": "method",
            "name": "hideRing",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.hideRing();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 358,
            "description": "是否正在展示",
            "itemtype": "method",
            "name": "isLoading",
            "since": "1.5.1",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.isLoading();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 373,
            "description": "关闭并移除loading",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.stop();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 404,
            "description": "暂停loading",
            "itemtype": "method",
            "name": "pause",
            "since": "1.3.0",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.pause();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 427,
            "description": "显示loading",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.show();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 472,
            "description": "隐藏loading",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "example": [
                "\n           var uiLoading = bui.loading();\n               uiLoading.hide();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 522,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiLoading.destroy();\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 553,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 mask",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiLoadingWidget = uiLoading.widget();\n\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 569,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiLoading.option();\n\n           //获取某个参数\n           var id = uiLoading.option( \"appendTo\" );\n\n           //修改一个参数\n           uiLoading.option( \"autoClose\",true );\n\n           //修改多个参数\n           uiLoading.option( {\"autoClose\":true} );\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 597,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\" | \"pause\" (暂停转圈)| \"start\" (开始转圈) | \"remove\" (删除时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiLoading.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.loading.js",
            "line": 617,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\" | \"pause\" (暂停转圈)| \"start\" (开始转圈) | \"remove\" (删除时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiLoading.off(\"show\");\n\n"
            ],
            "class": "bui.loading",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 132,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 240,
            "description": "遮罩移除方法",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "example": [
                "\n           var uiMask = bui.mask();\n               uiMask.remove();\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 280,
            "description": "显示遮罩",
            "itemtype": "method",
            "name": "show",
            "example": [
                "\n           var uiMask = bui.mask();\n               uiMask.show();\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 310,
            "description": "隐藏遮罩",
            "itemtype": "method",
            "name": "hide",
            "example": [
                "\n           var uiMask = bui.mask();\n               uiMask.hide();\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 332,
            "description": "遮罩是否显示",
            "itemtype": "method",
            "name": "isShow",
            "since": "1.3.0",
            "example": [
                "\n           var uiMask = bui.mask(),\n               isShow = uiMask.isShow();\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 347,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiMask.destroy();\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 372,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiMaskWidget = uiMask.widget();\n\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 387,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiMask.option();\n\n           //获取某个参数\n           var id = uiMask.option( \"appendTo\" );\n\n           //修改一个参数\n           uiMask.option( \"opacity\",0.5 );\n\n           //修改多个参数\n           uiMask.option( {\"opacity\":0.5} );\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 414,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiMask.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.mask.js",
            "line": 434,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"show\" | \"hide\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiMask.off(\"show\");\n\n"
            ],
            "class": "bui.mask",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 146,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 394,
            "description": "设置或者获取值",
            "itemtype": "method",
            "name": "value",
            "chainable": 1,
            "params": [
                {
                    "name": "num] [设置值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置值\n           uiNumber.value(\"110\");\n\n           //获取值\n           uiNumber.value();\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 423,
            "description": "重置数据",
            "itemtype": "method",
            "name": "reset",
            "since": "1.6.2",
            "chainable": 1,
            "example": [
                "\n\n           //重置\n           uiNumber.reset();"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 442,
            "description": "获取设置多个值",
            "itemtype": "method",
            "name": "values",
            "chainable": 1,
            "params": [
                {
                    "name": "num] [设置值 [{id:\"\",value:\"\"}]",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[ 返回 [{id:\"\",value:\"\"}] ]",
                "type": "Array"
            },
            "example": [
                "\n\n           uiNumber.values();\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 487,
            "description": "禁止输入",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "params": [
                {
                    "name": "bool] [禁止输入 true | false",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取值\n           uiNumber.disabled();\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 535,
            "description": "减少值",
            "itemtype": "method",
            "name": "prev",
            "chainable": 1,
            "example": [
                "\n\n           //减少\n           uiNumber.prev();\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 562,
            "description": "增加值",
            "itemtype": "method",
            "name": "next",
            "chainable": 1,
            "example": [
                "\n\n           //增加\n           uiNumber.next();\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 590,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiNumber.destroy();\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 619,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiNumberWidget = uiNumber.widget();\n\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 634,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiNumber.option();\n\n           //获取某个参数\n           var id = uiNumber.option( \"id\" );\n\n           //修改一个参数\n           uiNumber.option( \"min\",10 );\n\n           //修改多个参数\n           uiNumber.option( {\"min\":10} );\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 661,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"prev\" | \"next\" | \"change\" 符合条件时触发改变",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiNumber.on(\"change\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.number.js",
            "line": 681,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"prev\" | \"next\" | \"change\" 符合条件时触发改变",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiNumber.off(\"change\");\n\n"
            ],
            "class": "bui.number",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 268,
            "description": "设置分栏",
            "itemtype": "method",
            "name": "cols",
            "params": [
                {
                    "name": "cols",
                    "description": "[ {} ]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "year",
                            "description": "[ 'none' || 年份  ]",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "[ 年份的值 ]",
                                    "type": "Array"
                                },
                                {
                                    "name": "displayValues",
                                    "description": "[ 年份的值对应的文本 ]",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "month",
                            "description": "[ 'none' || 月份  ]",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "[ 月份的值 ]",
                                    "type": "Array"
                                },
                                {
                                    "name": "displayValues",
                                    "description": "[ 月份的值对应的文本 ]",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "date",
                            "description": "[ 'none' || 日  ]",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "[ 日 ]",
                                    "type": "Array"
                                },
                                {
                                    "name": "displayValues",
                                    "description": "[ 日对应的文本 ]",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "hour",
                            "description": "[ 'none' || 时  ]",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "[ 时 ]",
                                    "type": "Array"
                                },
                                {
                                    "name": "displayValues",
                                    "description": "[ 时对应的文本 ]",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "minute",
                            "description": "[ 'none' || 分  ]",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "[ 分 ]",
                                    "type": "Array"
                                },
                                {
                                    "name": "displayValues",
                                    "description": "[ 分对应的文本 ]",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "second",
                            "description": "[ 'none' || 秒  ]",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "[ 秒 ]",
                                    "type": "Array"
                                },
                                {
                                    "name": "displayValues",
                                    "description": "[ 秒对应的文本 ]",
                                    "type": "Array"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n\n               //设置分栏\n               uiPickerdate.cols({\n                   year: {\n                       values: [2013, 2014, 2015],\n                   },\n                   hour: {\n                       values: [8, 9, 10, 11, 13, 14, 15, 16, 17]\n                   },\n                   minute: {\n                       values: [0, 30],\n                       displayValues: ['00', '30']\n                   },\n                   second: 'none'\n               });\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 368,
            "description": "重新渲染",
            "itemtype": "method",
            "name": "reset",
            "example": [
                "\n\n               //重置\n               uiPickedate.reset();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 387,
            "description": "清空值,必须在控件初始化以后再执行.",
            "itemtype": "method",
            "name": "empty",
            "since": "1.5.6",
            "example": [
                "\n\n               //\n               uiPickedate.empty();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 405,
            "description": "设置最小日期",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "min] [ 默认最小日期:'1960/01/01 00:00:00'",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //设置最小日期\n               uiPickedate.min('1960/01/01 00:00:00');\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 422,
            "description": "设置最大日期",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "max] [ 默认最大日期:'2030/01/01 00:00:00'",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //设置最大日期\n               uiPickedate.max('2030/01/01 00:00:00');\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 439,
            "description": "设置某个日期",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "date] [ 日期格式:'2030/01/01 00:00:00'",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //设置某个日期\n               uiPickedate.value('2016/07/01 00:00:00');\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 511,
            "description": "格式化后回调",
            "itemtype": "method",
            "name": "formatValue",
            "params": [
                {
                    "name": "str] [ \"yyyy-MM-dd hh:00:00\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //设置某个日期\n               uiPickedate.formatValue(\"yyyy-MM-dd hh:00:00\");\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 564,
            "description": "格式化后回调",
            "itemtype": "method",
            "name": "formatDate",
            "params": [
                {
                    "name": "date] [ \"2019-11-01\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pattern] [ \"yyyy-MM-dd hh:00:00\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //设置某个日期\n               uiPickedate.formatDate(\"yyyy-MM-dd hh:00:00\");\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 601,
            "description": "日期改变的回调",
            "itemtype": "method",
            "name": "onChange",
            "params": [
                {
                    "name": "callback] [ 日期改变实时监听回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //设置某个日期\n               uiPickedate.onChange(function(value) {\n                   // body...\n               });\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 933,
            "description": "阻止触发",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n               uiPickerdate.disabled();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 951,
            "description": "打开窗口",
            "itemtype": "method",
            "name": "open",
            "chainable": 1,
            "since": "1.5.3",
            "example": [
                "\n\n               uiPickerdate.open();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 968,
            "description": "是否打开状态",
            "itemtype": "method",
            "name": "isOpen",
            "chainable": 1,
            "since": "1.5.3",
            "example": [
                "\n\n               uiPickerdate.isOpen();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 984,
            "description": "关闭窗口",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "since": "1.5.3",
            "example": [
                "\n\n               uiPickerdate.close();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 1002,
            "description": "修改标题文本, 只有刚开始标题有内容才可以修改",
            "itemtype": "method",
            "name": "modifyTitle",
            "params": [
                {
                    "name": "content",
                    "description": "[文本]",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "1.5.6",
            "example": [
                "\n\n               uiPickerdate.modifyTitle(\"标题名称\");\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 1021,
            "description": "允许触发",
            "itemtype": "method",
            "name": "enabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n               uiPickerdate.enabled();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 1038,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //销毁\n               uiPickerdate.destroy();\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 1060,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 dialog",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n                   //获取依赖控件\n                   var uiPickerdateWidget = uiPickerdate.widget();\n\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 1078,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(日期改变的时候) | \"show\"(日期展示的时候)| \"hide\"(日期隐藏的时候)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               uiPickerdate.on(\"show\",function () {\n                   // 点击的菜单\n                   console.log(this);\n               });\n\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pickerdate.js",
            "line": 1098,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(日期改变的时候) | \"show\"(日期展示的时候)| \"hide\"(日期隐藏的时候)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               uiPickerdate.off(\"show\");\n\n"
            ],
            "class": "bui.pickerdate",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.prompt.js",
            "line": 136,
            "description": "获取输入的值或者设置",
            "itemtype": "method",
            "name": "value",
            "since": "1.3.6",
            "example": [
                " \n           \n           var uiPrompt = bui.prompt(\"请输入您的名字\",function(ui){\n               // 获取输入的值\n               console.log(ui.value());\n               // 或者\n               console.log(uiPrompt.value());\n          })\n               "
            ],
            "class": "bui.prompt",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.prompt.js",
            "line": 160,
            "description": "聚焦",
            "itemtype": "method",
            "name": "focus",
            "since": "1.4.2",
            "example": [
                " \n           \n           var uiPrompt = bui.prompt(\"请输入您的名字\",function(ui){\n               \n          })\n\n          uiPrompt.focus();\n               "
            ],
            "class": "bui.prompt",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 207,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 619,
            "description": "锁住拖动刷新,跟unlock配合使用",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "callback",
                    "description": "回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //uiPullRefresh基于顶部例子\n           uiPullRefresh.lock();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 649,
            "description": "绑定拖动刷新,跟lock配合使用",
            "itemtype": "method",
            "name": "unlock",
            "params": [
                {
                    "name": "callback",
                    "description": "回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //uiPullRefresh基于顶部例子\n           uiPullRefresh.unlock();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 677,
            "description": "返回原位",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "num",
                    "description": "数字",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bool",
                    "description": "是否使用动画 true | false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //回调里面触发 uiPullRefresh基于顶部例子\n           uiPullRefresh.reverse();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 789,
            "description": "请求失败改为点击加载,一般在请求的fail里面",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //uiPullRefresh基于顶部例子\n           uiPullRefresh.fail();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 810,
            "description": "手动刷新数据",
            "itemtype": "method",
            "name": "refresh",
            "chainable": 1,
            "example": [
                "\n\n           //uiPullRefresh基于顶部例子\n           uiPullRefresh.refresh();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 832,
            "description": "设置滚动的高度,常用于$(window).resize(fun)",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "height",
                    "description": "设置的高度",
                    "type": "Number|string",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //uiPullRefresh基于顶部例子\n           uiPullRefresh.setHeight(300);\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 875,
            "description": "重新计算高度",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.3",
            "params": [
                {
                    "name": "option] [ 可以不传",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.width] [ 如果不传则自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [ 如果不传则自动计算,一些特殊情况需要告诉它在哪个高度下自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n          //重新计算高度\n          uiPullRefresh.resize();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 905,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiPullRefresh.destroy();\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 931,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 loading",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiPullRefreshWidget = uiPullRefresh.widget();\n\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 946,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiPullRefresh.option();\n\n           //获取某个参数\n           var id = uiPullRefresh.option( \"id\" );\n\n           //修改一个参数\n           uiPullRefresh.option( \"lastUpdated\",false );\n\n           //修改多个参数\n           uiPullRefresh.option( {\"lastUpdated\":false} );\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 974,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"refresh\"(刷新时) | \"swipedown\"(往下滑) | \"movingdown\"(往下滑移动实时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiPullrefresh.on(\"refresh\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.pullrefresh.js",
            "line": 994,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型:  \"refresh\"(刷新时) | \"swipedown\"(往下滑) | \"movingdown\"(往下滑移动实时)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiPullrefresh.off(\"refresh\");\n\n"
            ],
            "class": "bui.pullrefresh",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 108,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 300,
            "description": "设置星星的值",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "num] [设置值",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                " \n          \n          //设置值\n          uiRating.value(3);\n\n          //获取值\n          var val = uiRating.value();\n              "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 334,
            "description": "重置",
            "itemtype": "method",
            "name": "reset",
            "since": "1.6.2",
            "example": [
                " \n          \n          //重置\n          uiRating.reset();\n\n              "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 355,
            "description": "展示评分的星星值,只读,支持星星的百分比展示",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "params": [
                {
                    "name": "num] [设置值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n          \n          //设置值\n          uiRating.show(3);\n              "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 374,
            "description": "禁止评分",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "example": [
                " \n           \n           //禁止评分\n           uiRating.disabled();\n               "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 400,
            "description": "允许评分",
            "itemtype": "method",
            "name": "enabled",
            "since": "1.6.2",
            "chainable": 1,
            "example": [
                " \n           \n           //允许评分\n           uiRating.enabled();\n               "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 421,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //销毁\n           uiRating.destroy();\n           "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 442,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //获取依赖控件\n           var uiRatingWidget = uiRating.widget();\n           \n               "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 457,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n           \n           \n           //获取所有参数\n            //获取所有参数\n           var option = uiRating.option();\n\n           //获取某个参数\n           var id = uiRating.option( \"id\" );\n\n           //修改一个参数\n           uiRating.option( \"half\",false );\n\n           //修改多个参数\n           uiRating.option( {\"half\":false} );\n               "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 484,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                " \n                   \n                   uiRating.on(\"show\",function () {\n                       // 点击的菜单\n                       console.log(this);\n                   });\n                   \n                       "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.rating.js",
            "line": 504,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           uiRating.off(\"show\");\n           \n               "
            ],
            "class": "bui.rating",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 289,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 520,
            "description": "获取当前在第几页",
            "itemtype": "method",
            "name": "getPage",
            "since": "1.5.3",
            "chainable": 1,
            "return": {
                "description": "[object] [ 返回 page ]"
            },
            "example": [
                "\n\n           // 获取当前在第几页\n           var currentPage = uiScroll.getPage();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 536,
            "description": "更新请求的分页及缓存,并继续请求下一页, 旧接口<del>updateCache</del>不再使用.",
            "itemtype": "method",
            "name": "updatePage",
            "params": [
                {
                    "name": "start",
                    "description": "[当前分页]",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "[当前数据]",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //回调里面触发 uiScroll基于顶部例子\n           uiScroll.updatePage(2,data);\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 635,
            "description": "返回原位",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "callback",
                    "description": "回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //回调里面触发 uiScroll基于顶部例子\n           uiScroll.reverse();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 671,
            "description": "失败点击可以重新加载当前页",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "start",
                    "description": "第几页",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "count",
                    "description": "每页多少条",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //回调里面触发 uiScroll基于顶部例子\n           uiScroll.fail();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 705,
            "description": "数据过滤,用于已有缓存过滤",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "keyword",
                    "description": "关键字",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "在哪个字段",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[返回符合条件的数据]",
                "type": "Array"
            },
            "example": [
                "\n\n           //过滤数据中的phone字段,是否含有139224这个数据\n           var filterData = uiScroll.filter(\"139224\",\"phone\");\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 740,
            "description": "跳到指定元素",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "index",
                    "description": "内容的索引,例如第3个li 则 index=2",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "跳转后执行",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiScroll.to(2);\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 777,
            "description": "跳到底部",
            "itemtype": "method",
            "name": "toBottom",
            "params": [
                {
                    "name": "callback",
                    "description": "跳转后执行",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiScroll.toBottom();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 800,
            "description": "跳到指定的滚动高度值",
            "itemtype": "method",
            "name": "scrollTop",
            "since": "1.4.3",
            "params": [
                {
                    "name": "num] [ 非必须,默认:0",
                    "description": "",
                    "type": "Number|object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           uiScroll.scrollTop(2);\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 827,
            "description": "设置滚动的高度,常用于$(window).resize(fun)",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "height",
                    "description": "设置的高度",
                    "type": "Number|string",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.setHeight(300);\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 862,
            "description": "不允许滚动加载",
            "itemtype": "method",
            "name": "lock",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.lock();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 881,
            "description": "不允许下拉刷新",
            "itemtype": "method",
            "name": "lockrefresh",
            "since": "1.6.3",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.lockrefresh();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 899,
            "description": "不允许下拉刷新",
            "itemtype": "method",
            "name": "unlockrefresh",
            "since": "1.6.3",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.unlockrefresh();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 917,
            "description": "允许滚动加载",
            "itemtype": "method",
            "name": "unlock",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.unlock();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 937,
            "description": "手动执行刷新数据",
            "itemtype": "method",
            "name": "refresh",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.refresh();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 956,
            "description": "手动加载更多数据",
            "itemtype": "method",
            "name": "load",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.load();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 974,
            "description": "加载下一页数据",
            "itemtype": "method",
            "name": "nextPage",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.nextPage();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 988,
            "description": "加载上一页数据",
            "itemtype": "method",
            "name": "prevPage",
            "chainable": 1,
            "example": [
                "\n\n           //uiScroll基于顶部例子\n           uiScroll.prevPage();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 1007,
            "description": "重新计算高度",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.3",
            "params": [
                {
                    "name": "option] [ 可以不传",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.width] [ 如果不传则自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [ 如果不传则自动计算,一些特殊情况需要告诉它在哪个高度下自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n          //重新计算高度\n          uiScroll.resize();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 1035,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiScroll.destroy();\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 1064,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 pullrefresh loading",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiScrollWidget = uiScroll.widget();\n\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 1079,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiScroll.option();\n\n           //获取某个参数\n           var id = uiScroll.option( \"id\" );\n\n           //修改一个参数\n           uiScroll.option( \"distance\",100 );\n\n           //修改多个参数\n           uiScroll.option( {\"distance\":100} );\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 1106,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"loadpage\"(数据加载后) | \"lastpage\"(加载最后一页时触发) | \"scrollend\"(每次滚动结束) | \"scrolltop\"(滚动到顶部) |\"scrollbottom\"(滚动到底部)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiScroll.on(\"scrollend\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.scroll.js",
            "line": 1126,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"loadpage\"(数据加载后) | \"lastpage\"(加载最后一页时触发) | \"scrollend\"(每次滚动结束) | \"scrolltop\"(滚动到顶部) |\"scrollbottom\"(滚动到底部)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiScroll.off(\"scrollend\");\n\n"
            ],
            "class": "bui.scroll",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 105,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 228,
            "description": "调用搜索的方法",
            "itemtype": "method",
            "name": "search",
            "since": "1.3.0",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           uiSearchbar.on(\"search\",function(e,keyword){\n\n           })\n           uiSearchbar.search();\n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 251,
            "description": "获取当前输入框的值",
            "itemtype": "method",
            "name": "value",
            "since": "1.5.3",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n          var val = uiSearchbar.value();\n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 272,
            "description": "清空当前输入框的值",
            "itemtype": "method",
            "name": "reset",
            "since": "1.5.4",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n          uiSearchbar.reset();\n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 288,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //销毁\n           uiSearchbar.destroy();\n           "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 313,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //获取依赖控件\n           var uiSearchbarWidget = uiSearchbar.widget();\n           \n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 328,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n           \n           \n           //获取所有参数\n           var option = uiSearchbar.option();\n\n           //获取某个参数\n           var id = uiSearchbar.option( \"id\" );\n\n           //修改一个参数\n           uiSearchbar.option( \"handle\",\".btn-search\" );\n\n           //修改多个参数\n           uiSearchbar.option( {\"handle\":\".btn-search\"} );\n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 356,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"search\"(搜索时触发) | \"remove\"(移除关键字时触发) | \"input\"(每次输入时触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           uiSearchbar.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n           \n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.searchbar.js",
            "line": 376,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"search\"(搜索时触发) | \"remove\"(移除关键字时触发) | \"input\"(每次输入时触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           uiSearchbar.off(\"show\");\n           \n               "
            ],
            "class": "bui.searchbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 345,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 928,
            "description": "菜单显示",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "example": [
                "\n\n           //显示菜单\n           uiSelect.show();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 966,
            "description": "清空数据",
            "itemtype": "method",
            "name": "empty",
            "since": "1.4.7",
            "chainable": 1,
            "example": [
                "\n\n           //清空数据\n           uiSelect.empty();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 987,
            "description": "菜单隐藏",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "example": [
                "\n\n           //显示菜单\n           uiSelect.hide();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1028,
            "description": "获取选中的索引",
            "itemtype": "method",
            "name": "index",
            "since": "1.5.0",
            "example": [
                "\n\n           var index = uiSelect.index();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1041,
            "description": "设置或者获取值, 会按二级菜单出现的顺序重新排序",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "text] [设置的值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置值\n           uiSelect.value(\"10\");\n\n           // 多选,设置多个值\n           uiSelect.value(\"10,12\");\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1152,
            "description": "获取对象值",
            "itemtype": "method",
            "name": "values",
            "params": [
                {
                    "name": "text] [设置的值",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置值\n           var selectVal = uiSelect.values();\n           // [{name:\"\",value:\"\",index:0}]\n\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1178,
            "description": "获取所有对象值,不管选中没选中,返回 data 的每条的 checked 状态",
            "itemtype": "method",
            "name": "allValues",
            "since": "1.5.5",
            "example": [
                "\n\n           //设置值\n           var selectVal = uiSelect.allValues();\n           // [{name:\"\",value:\"\",checked:true},{name:\"\",value:\"\",checked:false}]\n\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1205,
            "description": "设置或者获取文本",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "text] [设置文本",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //设置文本\n           uiSelect.text(\"广东省\");\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1234,
            "description": "默认选中第几个, 支持多个",
            "itemtype": "method",
            "name": "active",
            "since": "1.3.0",
            "params": [
                {
                    "name": "index] [索引值, 如果是多个,使用逗号分开, 例如: \"0,2\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //激活选中的checkbox\n           uiSelect.active(1);\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1274,
            "description": "不选择第几个索引",
            "itemtype": "method",
            "name": "unactive",
            "since": "1.5.2",
            "params": [
                {
                    "name": "index] [索引值, 如果是多个,使用逗号分开, 例如: \"0,2\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //激活选中的checkbox\n           uiSelect.unactive(1);\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1312,
            "description": "全选,多选才能全选",
            "itemtype": "method",
            "name": "selectAll",
            "example": [
                "\n\n           //设置文本\n           uiSelect.selectAll();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1336,
            "description": "全不选",
            "itemtype": "method",
            "name": "selectNone",
            "example": [
                "\n\n           //设置文本\n           uiSelect.selectNone();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1363,
            "description": "重置",
            "itemtype": "method",
            "name": "reset",
            "since": "1.6.2",
            "example": [
                "\n\n           //重置\n           uiSelect.reset();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1381,
            "description": "反选",
            "itemtype": "method",
            "name": "unselect",
            "example": [
                "\n\n           //反选\n           uiSelect.unselect();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1425,
            "description": "不选择某个值",
            "itemtype": "method",
            "name": "unselected",
            "since": "1.5.2",
            "params": [
                {
                    "name": "value",
                    "description": "[可以是name值,也可以是value值, 如果是索引,请使用 unactive ]",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n           uiSelect.unselected(\"北京\");\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1468,
            "description": "如果实例是popup:true,可以阻止按钮点击触发",
            "itemtype": "method",
            "name": "disabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n           // 不允许选择\n           uiSelect.disabled();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1487,
            "description": "如果实例是popup:true,可以允许按钮点击触发",
            "itemtype": "method",
            "name": "enabled",
            "chainable": 1,
            "since": "1.4",
            "example": [
                "\n\n           //显示第几个\n           uiSelect.enabled();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1505,
            "description": "阻止选中",
            "itemtype": "method",
            "name": "disabledSelect",
            "params": [
                {
                    "name": "index] [ 默认: 全部 || 1",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "1.5.2",
            "example": [
                "\n\n           // 不允许选择\n           uiSelect.disabledSelect();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1531,
            "description": "允许选中",
            "itemtype": "method",
            "name": "enabledSelect",
            "params": [
                {
                    "name": "index] [ 默认: 全部 || 1",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "1.5.2",
            "example": [
                "\n\n           // 不允许选择\n           uiSelect.enabledSelect();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1557,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiSelect.destroy();\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1594,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名 dialog",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiSelectWidget = uiSelect.widget();\n\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1609,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiSelect.option();\n\n           //获取某个参数\n           var id = uiSelect.option( \"id\" );\n\n           //修改一个参数\n           uiSelect.option( \"popup\",false );\n\n           //修改多个参数\n           uiSelect.option( {\"popup\":false} );\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1635,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(点击选择框改变的时候触发) | \"select\"(点击选择框的时候触发)| \"check\"(选中才触发)| \"uncheck\"(取消选中才触发) | \"reset\"(全部清0的时候触发) | \"show\"(如果是popup:true才会有show事件) | \"hide\"(如果是popup:true才会有hide事件) |",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiSelect.on(\"show\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.select.js",
            "line": 1655,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(点击选择框改变的时候触发) | \"select\"(点击选择框的时候触发)| \"check\"(选中才触发)| \"uncheck\"(取消选中才触发) | \"reset\"(全部清0的时候触发) | \"show\"(如果是popup:true才会有show事件) | \"hide\"(如果是popup:true才会有hide事件) |",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiSelect.off(\"show\");\n\n"
            ],
            "class": "bui.select",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 121,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 234,
            "description": "打开菜单",
            "itemtype": "method",
            "name": "open",
            "since": "1.3.0",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target] [打开侧滑的方向, 默认: \"swiperight\"(在左边的菜单) | \"swipeleft\"(在右边的菜单)",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "transition] [打开是否需要动画, 默认 300 毫秒, 不需要动画则设置为 \"none\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //显示菜单\n           uiSidebar.open();\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 257,
            "description": "关闭菜单",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "example": [
                "\n\n           //关闭菜单\n           uiSidebar.close();\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 274,
            "description": "不允许滑动",
            "itemtype": "method",
            "name": "lock",
            "chainable": 1,
            "example": [
                "\n\n           //关闭菜单\n           uiSidebar.lock();\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 293,
            "description": "允许滑动",
            "itemtype": "method",
            "name": "unlock",
            "chainable": 1,
            "example": [
                "\n\n          //关闭菜单\n          uiSidebar.unlock();\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 312,
            "description": "是否打开 已弃用,直接判断 active() 对象是否为null就可以了",
            "itemtype": "method",
            "name": "isActive",
            "deprecated": true,
            "return": {
                "description": "[ 打开为 true | false ]",
                "type": "Boolean"
            },
            "example": [
                "\n\n          //是否打开\n          var isActive = uiSidebar.isActive();\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 343,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiSidebar.destroy();\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 368,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n          //获取依赖控件\n          var uiSidebarWidget = uiSidebar.widget();\n\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 383,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiSidebar.option();\n\n           //获取某个参数\n           var id = uiSidebar.option( \"id\" );\n\n           //修改一个参数\n           uiSidebar.option( \"fullHeight\",false );\n\n           //修改多个参数\n           uiSidebar.option( {\"fullHeight\":false} );\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 411,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"open\" | \"close\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n             uiSidebar.on(\"lock\",function () {\n                 // 点击的菜单\n                 console.log(this);\n             });\n\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.sidebar.js",
            "line": 431,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"open\" | \"close\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiSidebar.off(\"lock\");\n\n"
            ],
            "class": "bui.sidebar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 322,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 732,
            "description": "获取有多少个子元素",
            "itemtype": "method",
            "name": "getPages",
            "since": "1.5.2",
            "return": {
                "description": "[返回多少个]",
                "type": "Number"
            },
            "chainable": 1,
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1165,
            "description": "跳到第几个",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "index",
                    "description": "[索引,从0开始]",
                    "type": "Number"
                },
                {
                    "name": "transition] [  \"all 300ms\"(不传则默认) | \"none\"(不要动画) | \"all 300ms ease-out\" (可以加上缓冲效果)",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //跳到第2个\n           uiSlide.to(1);\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1281,
            "description": "停止自动播放",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n\n          //自动播放\n          uiSlide.stop();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1309,
            "description": "自动播放",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "time",
                    "description": "[重新设置循环时间]",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n           //自动播放\n           uiSlide.start();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1324,
            "description": "当前索引",
            "itemtype": "method",
            "name": "index",
            "since": "1.3.0",
            "chainable": 1,
            "example": [
                "\n\n           var index = uiSlide.index();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1338,
            "description": "上一个",
            "itemtype": "method",
            "name": "prev",
            "chainable": 1,
            "example": [
                "\n\n           uiSlide.prev();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1361,
            "description": "下一个",
            "itemtype": "method",
            "name": "next",
            "chainable": 1,
            "example": [
                "\n\n           uiSlide.next();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1411,
            "description": "不允许拖拽",
            "itemtype": "method",
            "name": "lock",
            "chainable": 1,
            "example": [
                "\n\n          uiSlide.lock();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1436,
            "description": "允许拖拽",
            "itemtype": "method",
            "name": "unlock",
            "chainable": 1,
            "example": [
                "\n\n           uiSlide.unlock();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1557,
            "description": "<div class=\"oui-fluid\">\n  <div class=\"span12\">\n    <h2>动态加载页面,模拟路由</h2>\n    <p>由于多页开发,后退不能刷新页面,所以便有这个slide来模拟简单的路由加载, 用于跟多页配合</p>\n    <h3>预览地址: <a href=\"../../index.html#pages/ui_controls/bui.slide_tab_router.html\" target=\"_blank\">demo</a></h3>\n  </div>\n</div>",
            "itemtype": "method",
            "name": "load",
            "since": "1.4.0",
            "params": [
                {
                    "name": "option] [ 页面跳转的地址",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.url",
                    "description": "[ 页面跳转的地址  ]",
                    "type": "String"
                },
                {
                    "name": "option.id] [ 页面结果加载到的地方,可选,默认是下一个",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.preload] [ 预加载,默认: false 自动跳转到加载的页面 | true, 则不跳转",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "option.success] [ 成功回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "option.fail] [ 失败回调",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiTab.load({\n             url: \"bui.slide_tab_router_page1.html\"\n           })\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1681,
            "description": "获取内容的当前dom",
            "itemtype": "method",
            "name": "currentMain",
            "since": "1.6.3",
            "params": [
                {
                    "name": "index] [ 默认为当前的索引,可以不传 格式: 0 | 1",
                    "description": ";",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiTab.currentMain();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1698,
            "description": "获取菜单的当前dom",
            "itemtype": "method",
            "name": "currentMenu",
            "since": "1.6.3",
            "params": [
                {
                    "name": "index] [ 默认为当前的索引,可以不传 格式: 0 | 1",
                    "description": ";",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiTab.currentMenu();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1753,
            "description": "重新计算宽高",
            "itemtype": "method",
            "name": "resize",
            "since": "1.5.3",
            "params": [
                {
                    "name": "option] [ 可以不传",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "option.width] [ 如果不传则自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "option.height] [ 如果不传则自动计算,一些特殊情况需要告诉它在哪个高度下自动计算",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //重新计算高度\n           uiSlide.resize();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1778,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //销毁\n           uiSlide.destroy();\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1810,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           //获取依赖控件\n           var uiSlideWidget = uiSlide.widget();\n\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1825,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n\n           //获取所有参数\n            //获取所有参数\n           var option = uiSlide.option();\n\n           //获取某个参数\n           var id = uiSlide.option( \"id\" );\n\n           //修改一个参数\n           uiSlide.option( \"autoplay\",false );\n\n           //修改多个参数\n           uiSlide.option( {\"autoplay\":false} );\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1853,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"play\"(播放的时候触发) |\"stop\"(停止的时候触发) |\"first\"(在第一个往左边操作的时候触发) | \"last\"(在最后一个往右边操作的时候触发) | \"to\"(每次跳转时触发,除了第1次不触发) | \"afterto\"(每次跳转后触发) | \"load\"(自动加载远程页面  1.4)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiSlide.on(\"lock\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.slide.js",
            "line": 1873,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"play\"(播放的时候触发) |\"stop\"(停止的时候触发) |\"first\"(在第一个往左边操作的时候触发) | \"last\"(在最后一个往右边操作的时候触发) | \"to\"(每次跳转时触发,除了第1次不触发) | \"afterto\"(每次跳转后触发) | \"load\"(自动加载远程页面 1.4)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           uiSlide.off(\"lock\");\n\n"
            ],
            "class": "bui.slide",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 138,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 235,
            "description": "设置或者获取值",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "index] [设置值",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "status] [1.5.6新增,支持设置状态样式名, 默认\"success\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //设置值\n           uiStepbar.value(1);\n           \n           //获取值\n           var val = uiStepbar.value();\n               "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 285,
            "description": "下一步",
            "itemtype": "method",
            "name": "next",
            "example": [
                " \n           \n           //下一步\n           uiStepbar.next();\n           "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 303,
            "description": "上一步",
            "itemtype": "method",
            "name": "prev",
            "example": [
                " \n           \n           //上一步\n           uiStepbar.prev();\n           "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 322,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //销毁\n           uiStepbar.destroy();\n           "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 348,
            "description": "获取依赖的控件",
            "itemtype": "method",
            "name": "widget",
            "params": [
                {
                    "name": "name] [ 依赖控件名",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           //获取依赖控件\n           var uiStepbarWidget = uiStepbar.widget();\n           \n               "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 363,
            "description": "获取设置参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key] [ 不传则获取所有参数, 类型为string,没有第2个参数则获取某个参数",
                    "description": "",
                    "type": "String | object",
                    "optional": true
                },
                {
                    "name": "value] [ 设置参数的时候要传,设置多个参数不用传,获取参数的时候也不用传",
                    "description": "",
                    "type": "String | number | boolean | function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                " \n           \n           \n           //获取所有参数\n            //获取所有参数\n           var option = uiStepbar.option();\n\n           //获取某个参数\n           var id = uiStepbar.option( \"id\" );\n\n           //修改一个参数\n           uiStepbar.option( \"click\",false );\n\n           //修改多个参数\n           uiStepbar.option( {\"click\":false} );\n               "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 391,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(改变时触发) | \"next\"(下一步时触发) | \"prev\"(上一步时触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           uiStepbar.on(\"change\",function () {\n               // 点击的菜单\n               console.log(this);\n           });\n           \n               "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.stepbar.js",
            "line": 411,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"change\"(改变时触发) | \"next\"(下一步时触发) | \"prev\"(上一步时触发)",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                " \n           \n           uiStepbar.off(\"change\");\n           \n               "
            ],
            "class": "bui.stepbar",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 215,
            "description": "初始化方法,用于重新初始化结构,事件只初始化一次",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "option] [参数控件本身",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1054,
            "description": "关闭侧滑栏",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "example": [
                "\n\n                //关闭所有侧滑\n                uiSwipe.close();\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1072,
            "description": "打开侧滑",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "option",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target] [打开侧滑的方向, 默认: \"swiperight\"(在左边的菜单) | \"swipeleft\"(在右边的菜单) | \"swipeup\"(在下边的菜单) | \"swipedown\"(在上边的菜单)",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "index] [打开第几个侧滑",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "transition] [打开是否需要动画, 默认 300 毫秒, 不需要动画则设置为 \"none\"",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n                //显示菜单\n                uiSwipe.open();\n\n                uiSwipe.open({\n                  \"target\":\"swipedown\",\n                  \"transition\": \"none\"\n                });\n\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1165,
            "description": "获取激活的对象,只有在有多个需要激活的active才会有,正常情况下是null",
            "itemtype": "method",
            "name": "active",
            "chainable": 1,
            "example": [
                "\n\n\n                var activeUI = uiSwipe.active();\n\n                activeUI.close();\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1181,
            "description": "是否已经激活",
            "itemtype": "method",
            "name": "isActive",
            "since": "1.3.4",
            "chainable": 1,
            "example": [
                "\n\n                var isActive = uiSwipe.isActive();\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1263,
            "description": "不允许滑动",
            "itemtype": "method",
            "name": "lock",
            "chainable": 1,
            "example": [
                "\n\n               //锁住滑动\n               uiSwipe.lock();\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1287,
            "description": "允许滑动",
            "itemtype": "method",
            "name": "unlock",
            "chainable": 1,
            "example": [
                "\n\n               //可以滑动\n               uiSwipe.unlock();\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1313,
            "description": "[销毁控件]",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.4.2",
            "params": [
                {
                    "name": "bool] [ 默认: false 销毁部分 | true 销毁全部",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               //销毁\n               uiSwipe.destroy();\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1338,
            "description": "为控件绑定事件",
            "itemtype": "event",
            "name": "on",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"open\" | \"close\" | \"touchstart\" | \"touchmove\" | \"touchend\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               uiSwipe.on(\"lock\",function () {\n                   // 点击的菜单\n                   console.log(this);\n               });\n\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.swipe.js",
            "line": 1358,
            "description": "为控件取消绑定事件",
            "itemtype": "event",
            "name": "off",
            "since": "1.3.0",
            "params": [
                {
                    "name": "type] [ 事件类型: \"open\" | \"close\" | \"touchstart\" | \"touchmove\" | \"touchend\"",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback] [ 绑定的事件, this 为当前点击的菜单",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\n               uiSwipe.off(\"lock\");\n\n"
            ],
            "class": "bui.swipe",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.timer.js",
            "line": 140,
            "description": "暂停",
            "itemtype": "method",
            "name": "pause",
            "is_constructor": 1,
            "example": [
                "\n\n           timer.pause();\n        \n     \n"
            ],
            "class": "bui.timer",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.timer.js",
            "line": 159,
            "description": "重新计时",
            "itemtype": "method",
            "name": "restart",
            "is_constructor": 1,
            "example": [
                "\n\n           timer.restart();\n        \n     \n"
            ],
            "class": "bui.timer",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.timer.js",
            "line": 244,
            "description": "开始计时,递减或者递增取决于初始化的reduce是否为true",
            "itemtype": "method",
            "name": "start",
            "is_constructor": 1,
            "example": [
                "\n\n           timer.start();\n        \n     \n"
            ],
            "class": "bui.timer",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.timer.js",
            "line": 318,
            "description": "停止计时",
            "itemtype": "method",
            "name": "stop",
            "is_constructor": 1,
            "example": [
                "\n\n           timer.stop();\n        \n     \n"
            ],
            "class": "bui.timer",
            "module": "UI",
            "namespace": "bui"
        },
        {
            "file": "src/scripts/ui/bui.timer.js",
            "line": 330,
            "description": "是否在计时中",
            "itemtype": "method",
            "name": "status",
            "is_constructor": 1,
            "example": [
                "\n           \n           // true 正在进行倒计时\n           var status = timer.status();\n        \n     \n"
            ],
            "class": "bui.timer",
            "module": "UI",
            "namespace": "bui"
        }
    ],
    "warnings": []
}